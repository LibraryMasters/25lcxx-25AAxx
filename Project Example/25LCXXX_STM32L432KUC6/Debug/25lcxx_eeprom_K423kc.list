
25lcxx_eeprom_K423kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fbc  080090e8  080090e8  000190e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0a4  0800a0a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0ac  0800a0ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0b0  0800a0b0  0001a0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a0b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  200001e0  0800a294  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800a294  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2fe  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000227a  00000000  00000000  0002f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00031788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  000324d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bbc  00000000  00000000  00033140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f42a  00000000  00000000  00054cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6252  00000000  00000000  00064126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a378  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004860  00000000  00000000  0012a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090d0 	.word	0x080090d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080090d0 	.word	0x080090d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <a_e25lcxx_spi_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed write
 * @note
 */
uint8_t a_e25lcxx_spi_write(E_25LCxx_handle_t *pHandler, uint16_t u16Address, uint32_t *pBuffer, size_t iLength) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	817b      	strh	r3, [r7, #10]
    pHandler->pGpio_write(E_25LCxx_BOOL_TRUE); /**< disable write protect before attempt writing */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2001      	movs	r0, #1
 8000f02:	4798      	blx	r3
    if (pHandler->pSpi_write(u16Address, pBuffer, iLength) != 0) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	8978      	ldrh	r0, [r7, #10]
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4798      	blx	r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <a_e25lcxx_spi_write+0x2e>
        return 1; /**< error error */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e004      	b.n	8000f24 <a_e25lcxx_spi_write+0x38>
    }
    pHandler->pGpio_write(E_25LCxx_BOOL_FALSE); /**< enable write protect pin after writing */
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	2000      	movs	r0, #0
 8000f20:	4798      	blx	r3
    return 0; /**<success error */
 8000f22:	2300      	movs	r3, #0

}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <a_e25lcxx_spi_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed read
 * @note
 */
uint8_t a_e25lcxx_spi_read(E_25LCxx_handle_t *pHandler, uint16_t u16Address, uint32_t *pBuffer, size_t iLength) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	817b      	strh	r3, [r7, #10]

    if (pHandler->pSpi_read(u16Address, pBuffer, iLength) != 0) {
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	8978      	ldrh	r0, [r7, #10]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4798      	blx	r3
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <a_e25lcxx_spi_read+0x26>
        return 1; /**< failed error */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <a_e25lcxx_spi_read+0x28>
    }
    return 0; /**< success error */
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <E_25LCxx_init>:
 *            - 1 spi initialization failed
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t E_25LCxx_init(E_25LCxx_handle_t *pHandle) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]

    if (pHandle == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <E_25LCxx_init+0x12>
        return 2; /**< return failed error  */
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e05c      	b.n	8001028 <E_25LCxx_init+0xcc>
    if (pHandle->pDebug_print == NULL)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <E_25LCxx_init+0x1e>
        return 3; /**< return failed error  */
 8000f76:	2303      	movs	r3, #3
 8000f78:	e056      	b.n	8001028 <E_25LCxx_init+0xcc>

    if (pHandle->pDelay_ms == NULL) {
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <E_25LCxx_init+0x32>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: delay_ms is null\r\n");
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	482a      	ldr	r0, [pc, #168]	; (8001030 <E_25LCxx_init+0xd4>)
 8000f88:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e04c      	b.n	8001028 <E_25LCxx_init+0xcc>
    }

    if (pHandle->pSpi_init == NULL) {
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d105      	bne.n	8000fa2 <E_25LCxx_init+0x46>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: initialize is null\r\n");
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4826      	ldr	r0, [pc, #152]	; (8001034 <E_25LCxx_init+0xd8>)
 8000f9c:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e042      	b.n	8001028 <E_25LCxx_init+0xcc>
    }

    if (pHandle->pSpi_deinit == NULL) {
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <E_25LCxx_init+0x5a>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: de-initialize is null\r\n");
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4822      	ldr	r0, [pc, #136]	; (8001038 <E_25LCxx_init+0xdc>)
 8000fb0:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e038      	b.n	8001028 <E_25LCxx_init+0xcc>
    }


    if (pHandle->pSpi_read == NULL) {
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <E_25LCxx_init+0x6e>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: spi read is null\r\n");
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	481e      	ldr	r0, [pc, #120]	; (800103c <E_25LCxx_init+0xe0>)
 8000fc4:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e02e      	b.n	8001028 <E_25LCxx_init+0xcc>
    }


    if (pHandle->pSpi_write == NULL) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <E_25LCxx_init+0x82>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: spi write is null\r\n");
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <E_25LCxx_init+0xe4>)
 8000fd8:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e024      	b.n	8001028 <E_25LCxx_init+0xcc>
    }


    if (pHandle->pChip_select == NULL) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d105      	bne.n	8000ff2 <E_25LCxx_init+0x96>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: chip select is null\r\n");
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4816      	ldr	r0, [pc, #88]	; (8001044 <E_25LCxx_init+0xe8>)
 8000fec:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e01a      	b.n	8001028 <E_25LCxx_init+0xcc>
    }


    if (pHandle->pGpio_write == NULL) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <E_25LCxx_init+0xaa>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: gpio write is null\r\n");
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4812      	ldr	r0, [pc, #72]	; (8001048 <E_25LCxx_init+0xec>)
 8001000:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 3;
 8001002:	2303      	movs	r3, #3
 8001004:	e010      	b.n	8001028 <E_25LCxx_init+0xcc>
    }

    if (pHandle->pSpi_init()) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4798      	blx	r3
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <E_25LCxx_init+0xc2>

#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to initialize spi\r\n");
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <E_25LCxx_init+0xf0>)
 8001018:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 800101a:	2301      	movs	r3, #1
 800101c:	e004      	b.n	8001028 <E_25LCxx_init+0xcc>
    }

    pHandle->u8Inited = 1;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    return 0; /**< return success */
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	080090e8 	.word	0x080090e8
 8001034:	08009104 	.word	0x08009104
 8001038:	08009124 	.word	0x08009124
 800103c:	08009144 	.word	0x08009144
 8001040:	08009160 	.word	0x08009160
 8001044:	0800917c 	.word	0x0800917c
 8001048:	0800919c 	.word	0x0800919c
 800104c:	080091bc 	.word	0x080091bc

08001050 <E_25LCxx_set_variant>:
 *            - 1 set variant failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_set_variant(E_25LCxx_handle_t *pHandle, E_25LCxx_variant_t variant) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
    if (pHandle == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <E_25LCxx_set_variant+0x16>
        return 2; /**< return failed error */
 8001062:	2302      	movs	r3, #2
 8001064:	e017      	b.n	8001096 <E_25LCxx_set_variant+0x46>
    if (pHandle->u8Inited != 1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800106c:	2b01      	cmp	r3, #1
 800106e:	d001      	beq.n	8001074 <E_25LCxx_set_variant+0x24>
        return 3; /**< return failed error */
 8001070:	2303      	movs	r3, #3
 8001072:	e010      	b.n	8001096 <E_25LCxx_set_variant+0x46>

    pHandle->u8Device_type = variant;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	78fa      	ldrb	r2, [r7, #3]
 8001078:	f883 2020 	strb.w	r2, [r3, #32]

    if (pHandle->u8Device_type != variant) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	78fa      	ldrb	r2, [r7, #3]
 8001084:	429a      	cmp	r2, r3
 8001086:	d005      	beq.n	8001094 <E_25LCxx_set_variant+0x44>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to set variant\r\n");
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <E_25LCxx_set_variant+0x50>)
 800108e:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error*/
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <E_25LCxx_set_variant+0x46>
    }
    return 0; /**< return success */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08009204 	.word	0x08009204

080010a4 <E_25LCxx_set_page_size>:
 *            - 1 set page size failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_set_page_size(E_25LCxx_handle_t *pHandle, E_25LCxx_page_size_t iSize) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
    if (pHandle == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <E_25LCxx_set_page_size+0x16>
        return 2; /**< return failed error */
 80010b6:	2302      	movs	r3, #2
 80010b8:	e017      	b.n	80010ea <E_25LCxx_set_page_size+0x46>
    if (pHandle->u8Inited != 1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d001      	beq.n	80010c8 <E_25LCxx_set_page_size+0x24>
        return 3; /**< return failed error */
 80010c4:	2303      	movs	r3, #3
 80010c6:	e010      	b.n	80010ea <E_25LCxx_set_page_size+0x46>

    pHandle->iPage_size = iSize;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    if (pHandle->iPage_size != iSize) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d005      	beq.n	80010e8 <E_25LCxx_set_page_size+0x44>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to set page size\r\n");
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <E_25LCxx_set_page_size+0x50>)
 80010e2:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error */
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <E_25LCxx_set_page_size+0x46>
    }

    return 0; /**< return success */
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08009244 	.word	0x08009244

080010f8 <E_25LCxx_get_wip_status>:
 *            - 1 get status failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_get_wip_status(E_25LCxx_handle_t *pHandle, E_25LCxx_write_in_process_status_t *pStatus) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;

    if (pHandle == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <E_25LCxx_get_wip_status+0x14>
        return 2; /**< return failed error */
 8001108:	2302      	movs	r3, #2
 800110a:	e027      	b.n	800115c <E_25LCxx_get_wip_status+0x64>
    if (pHandle->u8Inited != 1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001112:	2b01      	cmp	r3, #1
 8001114:	d001      	beq.n	800111a <E_25LCxx_get_wip_status+0x22>
        return 3; /**< return failed error */
 8001116:	2303      	movs	r3, #3
 8001118:	e020      	b.n	800115c <E_25LCxx_get_wip_status+0x64>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	2000      	movs	r0, #0
 8001120:	4798      	blx	r3
    res = a_e25lcxx_spi_read(pHandle, E_25LCXXX_RDSR_REG, (uint8_t *) & status, 1);
 8001122:	f107 020e 	add.w	r2, r7, #14
 8001126:	2301      	movs	r3, #1
 8001128:	2105      	movs	r1, #5
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fefe 	bl	8000f2c <a_e25lcxx_spi_read>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	2001      	movs	r0, #1
 800113a:	4798      	blx	r3
    if (res) {
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d005      	beq.n	800114e <E_25LCxx_get_wip_status+0x56>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to read status reg\r\n");
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <E_25LCxx_get_wip_status+0x6c>)
 8001148:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 800114a:	2301      	movs	r3, #1
 800114c:	e006      	b.n	800115c <E_25LCxx_get_wip_status+0x64>
    }

    *pStatus = (E_25LCxx_write_in_process_status_t) (status & E_25LCXXX_WIP_MASK);
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	701a      	strb	r2, [r3, #0]

    return 0; /**< return success */
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800928c 	.word	0x0800928c

08001168 <E_25LCxx_set_bp_status>:
 *            - 1 set bp failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_set_bp_status(E_25LCxx_handle_t *pHandle, E_25LCxx_block_protection_status_t status) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t stat;

    if (pHandle == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <E_25LCxx_set_bp_status+0x16>
        return 2; /**< return failed error */
 800117a:	2302      	movs	r3, #2
 800117c:	e062      	b.n	8001244 <E_25LCxx_set_bp_status+0xdc>
    if (pHandle->u8Inited != 1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001184:	2b01      	cmp	r3, #1
 8001186:	d001      	beq.n	800118c <E_25LCxx_set_bp_status+0x24>
        return 3; /**< return failed error */
 8001188:	2303      	movs	r3, #3
 800118a:	e05b      	b.n	8001244 <E_25LCxx_set_bp_status+0xdc>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	2000      	movs	r0, #0
 8001192:	4798      	blx	r3
    res = a_e25lcxx_spi_read(pHandle, E_25LCXXX_RDSR_REG, (uint8_t *) & stat, 1);
 8001194:	f107 020e 	add.w	r2, r7, #14
 8001198:	2301      	movs	r3, #1
 800119a:	2105      	movs	r1, #5
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff fec5 	bl	8000f2c <a_e25lcxx_spi_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2001      	movs	r0, #1
 80011ac:	4798      	blx	r3
    if (res) {
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d005      	beq.n	80011c0 <E_25LCxx_set_bp_status+0x58>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to read status reg\r\n");
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	4824      	ldr	r0, [pc, #144]	; (800124c <E_25LCxx_set_bp_status+0xe4>)
 80011ba:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 80011bc:	2301      	movs	r3, #1
 80011be:	e041      	b.n	8001244 <E_25LCxx_set_bp_status+0xdc>
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	2000      	movs	r0, #0
 80011c6:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WREN_REG, NULL, 0); /**< enable write operation */
 80011c8:	2300      	movs	r3, #0
 80011ca:	2200      	movs	r2, #0
 80011cc:	2106      	movs	r1, #6
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe8c 	bl	8000eec <a_e25lcxx_spi_write>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	2001      	movs	r0, #1
 80011de:	4798      	blx	r3
    if (res) {
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d005      	beq.n	80011f2 <E_25LCxx_set_bp_status+0x8a>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to enable write operation \r\n");
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4819      	ldr	r0, [pc, #100]	; (8001250 <E_25LCxx_set_bp_status+0xe8>)
 80011ec:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return fail error */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e028      	b.n	8001244 <E_25LCxx_set_bp_status+0xdc>
    }

    stat &= ~(0x03 << 2);
 80011f2:	7bbb      	ldrb	r3, [r7, #14]
 80011f4:	f023 030c 	bic.w	r3, r3, #12
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73bb      	strb	r3, [r7, #14]
    stat |= (status << 2);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	b25a      	sxtb	r2, r3
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25b      	sxtb	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	73bb      	strb	r3, [r7, #14]
    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2000      	movs	r0, #0
 8001214:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WRSR_REG, (uint8_t*) & stat, 1);
 8001216:	f107 020e 	add.w	r2, r7, #14
 800121a:	2301      	movs	r3, #1
 800121c:	2101      	movs	r1, #1
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fe64 	bl	8000eec <a_e25lcxx_spi_write>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	2001      	movs	r0, #1
 800122e:	4798      	blx	r3
    if (res) {
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <E_25LCxx_set_bp_status+0xda>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to write status reg\r\n");
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <E_25LCxx_set_bp_status+0xec>)
 800123c:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <E_25LCxx_set_bp_status+0xdc>
    }
    return 0; /**< return success */
 8001242:	2300      	movs	r3, #0

}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	0800928c 	.word	0x0800928c
 8001250:	080092b0 	.word	0x080092b0
 8001254:	080092dc 	.word	0x080092dc

08001258 <E_25LCxx_get_bp_status>:
 *            - 1 get bp failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_get_bp_status(E_25LCxx_handle_t *pHandle, E_25LCxx_block_protection_status_t *pStatus) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t status;

    if (pHandle == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <E_25LCxx_get_bp_status+0x14>
        return 2; /**< return failed error */
 8001268:	2302      	movs	r3, #2
 800126a:	e028      	b.n	80012be <E_25LCxx_get_bp_status+0x66>
    if (pHandle->u8Inited != 1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <E_25LCxx_get_bp_status+0x22>
        return 3; /**< return failed error */
 8001276:	2303      	movs	r3, #3
 8001278:	e021      	b.n	80012be <E_25LCxx_get_bp_status+0x66>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	2000      	movs	r0, #0
 8001280:	4798      	blx	r3
    res = a_e25lcxx_spi_read(pHandle, E_25LCXXX_RDSR_REG, (uint8_t *) & status, 1);
 8001282:	f107 020e 	add.w	r2, r7, #14
 8001286:	2301      	movs	r3, #1
 8001288:	2105      	movs	r1, #5
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fe4e 	bl	8000f2c <a_e25lcxx_spi_read>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	2001      	movs	r0, #1
 800129a:	4798      	blx	r3
    if (res) {
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <E_25LCxx_get_bp_status+0x56>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to read status reg\r\n");
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <E_25LCxx_get_bp_status+0x70>)
 80012a8:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 80012aa:	2301      	movs	r3, #1
 80012ac:	e007      	b.n	80012be <E_25LCxx_get_bp_status+0x66>
    }

    *pStatus = (E_25LCxx_block_protection_status_t) ((status & E_25LCXXX_BP_MASK) >> 2);
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	109b      	asrs	r3, r3, #2
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	701a      	strb	r2, [r3, #0]
    return 0; /**< return success */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	0800928c 	.word	0x0800928c

080012cc <E_25LCxx_set_write_protect_enable>:
 *            - 1 set wpen failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_set_write_protect_enable(E_25LCxx_handle_t *pHandle, E_25LCxx_bool_t enable) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t status;

    if (pHandle == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <E_25LCxx_set_write_protect_enable+0x16>
        return 2; /**< return failed error */
 80012de:	2302      	movs	r3, #2
 80012e0:	e062      	b.n	80013a8 <E_25LCxx_set_write_protect_enable+0xdc>
    if (pHandle->u8Inited != 1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d001      	beq.n	80012f0 <E_25LCxx_set_write_protect_enable+0x24>
        return 3; /**< return failed error */
 80012ec:	2303      	movs	r3, #3
 80012ee:	e05b      	b.n	80013a8 <E_25LCxx_set_write_protect_enable+0xdc>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	2000      	movs	r0, #0
 80012f6:	4798      	blx	r3
    res = a_e25lcxx_spi_read(pHandle, E_25LCXXX_RDSR_REG, (uint8_t *) & status, 1);
 80012f8:	f107 020e 	add.w	r2, r7, #14
 80012fc:	2301      	movs	r3, #1
 80012fe:	2105      	movs	r1, #5
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fe13 	bl	8000f2c <a_e25lcxx_spi_read>
 8001306:	4603      	mov	r3, r0
 8001308:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2001      	movs	r0, #1
 8001310:	4798      	blx	r3
    if (res) {
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <E_25LCxx_set_write_protect_enable+0x58>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to read status reg\r\n");
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4824      	ldr	r0, [pc, #144]	; (80013b0 <E_25LCxx_set_write_protect_enable+0xe4>)
 800131e:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 8001320:	2301      	movs	r3, #1
 8001322:	e041      	b.n	80013a8 <E_25LCxx_set_write_protect_enable+0xdc>
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	2000      	movs	r0, #0
 800132a:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WREN_REG, NULL, 0);
 800132c:	2300      	movs	r3, #0
 800132e:	2200      	movs	r2, #0
 8001330:	2106      	movs	r1, #6
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fdda 	bl	8000eec <a_e25lcxx_spi_write>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2001      	movs	r0, #1
 8001342:	4798      	blx	r3
    if (res) {
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <E_25LCxx_set_write_protect_enable+0x8a>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to enable write operation \r\n");
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <E_25LCxx_set_write_protect_enable+0xe8>)
 8001350:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return fail error */
 8001352:	2301      	movs	r3, #1
 8001354:	e028      	b.n	80013a8 <E_25LCxx_set_write_protect_enable+0xdc>
    }

    status &= ~(1 << 7);
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73bb      	strb	r3, [r7, #14]
    status |= (enable << 7);
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	01db      	lsls	r3, r3, #7
 8001364:	b25a      	sxtb	r2, r3
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b25b      	sxtb	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	73bb      	strb	r3, [r7, #14]

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2000      	movs	r0, #0
 8001378:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WRSR_REG, (uint8_t *) & status, 1);
 800137a:	f107 020e 	add.w	r2, r7, #14
 800137e:	2301      	movs	r3, #1
 8001380:	2101      	movs	r1, #1
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fdb2 	bl	8000eec <a_e25lcxx_spi_write>
 8001388:	4603      	mov	r3, r0
 800138a:	73fb      	strb	r3, [r7, #15]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	2001      	movs	r0, #1
 8001392:	4798      	blx	r3
    if (res) {
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <E_25LCxx_set_write_protect_enable+0xda>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to write status reg\r\n");
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <E_25LCxx_set_write_protect_enable+0xec>)
 80013a0:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <E_25LCxx_set_write_protect_enable+0xdc>
    }

    return 0; /**< return success */
 80013a6:	2300      	movs	r3, #0

}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	0800928c 	.word	0x0800928c
 80013b4:	080092b0 	.word	0x080092b0
 80013b8:	080092dc 	.word	0x080092dc

080013bc <E_25LCxx_write_byte>:
 *            - 4 invalid address (failed to validate address)
 *            - 5 attempt to write a protected block array
 *            - 6 data length is larger than page can contain
 * @note      none
 */
uint8_t E_25LCxx_write_byte(E_25LCxx_handle_t *pHandle, uint16_t u16Addr, uint8_t *pBuf, uint16_t u16Length) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	461a      	mov	r2, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	817b      	strh	r3, [r7, #10]
 80013cc:	4613      	mov	r3, r2
 80013ce:	813b      	strh	r3, [r7, #8]
    uint8_t res;

    if (pHandle == NULL)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <E_25LCxx_write_byte+0x1e>
        return 2; /**< return failed error */
 80013d6:	2302      	movs	r3, #2
 80013d8:	e075      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    if (pHandle->u8Inited != 1)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d001      	beq.n	80013e8 <E_25LCxx_write_byte+0x2c>
        return 3; /**< return failed error */
 80013e4:	2303      	movs	r3, #3
 80013e6:	e06e      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    if (E_25LCXX_validate_page_boundary(pHandle, u16Addr, u16Length) != 0)
 80013e8:	893a      	ldrh	r2, [r7, #8]
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	4619      	mov	r1, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 fccc 	bl	8001d8c <E_25LCXX_validate_page_boundary>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <E_25LCxx_write_byte+0x42>
        return 6; /**< return failed error */
 80013fa:	2306      	movs	r3, #6
 80013fc:	e063      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    if (E_25LCxxx_validate_address(pHandle, u16Addr) != 0) /**< check if the address to write is valid or not */
 80013fe:	897b      	ldrh	r3, [r7, #10]
 8001400:	4619      	mov	r1, r3
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 fc22 	bl	8001c4c <E_25LCxxx_validate_address>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <E_25LCxx_write_byte+0x56>
        return 4; /**< return failed error */
 800140e:	2304      	movs	r3, #4
 8001410:	e059      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    if (E_25LCxx_check_bp_before_write(pHandle, u16Addr) != 0) /**< check that we're not trying to write on protected block  */
 8001412:	897b      	ldrh	r3, [r7, #10]
 8001414:	4619      	mov	r1, r3
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 fb8a 	bl	8001b30 <E_25LCxx_check_bp_before_write>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <E_25LCxx_write_byte+0x6a>
        return 5; /**< return failed error */
 8001422:	2305      	movs	r3, #5
 8001424:	e04f      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>


    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2000      	movs	r0, #0
 800142c:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WREN_REG, NULL, 0); /**< enable write operation */
 800142e:	2300      	movs	r3, #0
 8001430:	2200      	movs	r2, #0
 8001432:	2106      	movs	r1, #6
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fd59 	bl	8000eec <a_e25lcxx_spi_write>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2001      	movs	r0, #1
 8001444:	4798      	blx	r3
    if (res) {
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <E_25LCxx_write_byte+0x9c>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to enable write operation \r\n");
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	481f      	ldr	r0, [pc, #124]	; (80014d0 <E_25LCxx_write_byte+0x114>)
 8001452:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return fail error */
 8001454:	2301      	movs	r3, #1
 8001456:	e036      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	2000      	movs	r0, #0
 800145e:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WRITE_REG, NULL, 0); /**< send write command  */
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	2102      	movs	r1, #2
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff fd40 	bl	8000eec <a_e25lcxx_spi_write>
 800146c:	4603      	mov	r3, r0
 800146e:	75fb      	strb	r3, [r7, #23]
    if (res) {
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <E_25LCxx_write_byte+0xc6>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to send write command\r\n");
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4816      	ldr	r0, [pc, #88]	; (80014d4 <E_25LCxx_write_byte+0x118>)
 800147c:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 800147e:	2301      	movs	r3, #1
 8001480:	e021      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    }
    res = a_e25lcxx_spi_write(pHandle, (u16Addr >> 8), NULL, 0); /**< write MSB of the address */
 8001482:	897b      	ldrh	r3, [r7, #10]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	b299      	uxth	r1, r3
 8001488:	2300      	movs	r3, #0
 800148a:	2200      	movs	r2, #0
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fd2d 	bl	8000eec <a_e25lcxx_spi_write>
 8001492:	4603      	mov	r3, r0
 8001494:	75fb      	strb	r3, [r7, #23]
    res = a_e25lcxx_spi_write(pHandle, (uint8_t) u16Addr, (uint8_t*) pBuf, u16Length); /**< add 1 byte on the size to cater for the addr byte */
 8001496:	897b      	ldrh	r3, [r7, #10]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b299      	uxth	r1, r3
 800149c:	893b      	ldrh	r3, [r7, #8]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7ff fd23 	bl	8000eec <a_e25lcxx_spi_write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75fb      	strb	r3, [r7, #23]

    if (res) {
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <E_25LCxx_write_byte+0x100>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to write data byte\r\n");
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <E_25LCxx_write_byte+0x11c>)
 80014b6:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error */
 80014b8:	2301      	movs	r3, #1
 80014ba:	e004      	b.n	80014c6 <E_25LCxx_write_byte+0x10a>
    }
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2001      	movs	r0, #1
 80014c2:	4798      	blx	r3

    return 0; /**< return success */
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	080092b0 	.word	0x080092b0
 80014d4:	08009300 	.word	0x08009300
 80014d8:	08009328 	.word	0x08009328

080014dc <E_25LCXX_put_byte>:
 *            - 4 invalid address (failed to validate address)
 *            - 5 attempt to write a protected block array
 *            - 6 data length is larger than page can contain
 * @note       Equivalent to eeprom.put on arduino
 */
uint8_t E_25LCXX_put_byte(E_25LCxx_handle_t *pHandle, uint16_t u16Addr, unsigned long long *pBuf, uint8_t u16Length) {
 80014dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014e0:	b08b      	sub	sp, #44	; 0x2c
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	461a      	mov	r2, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	4613      	mov	r3, r2
 80014f0:	727b      	strb	r3, [r7, #9]
 80014f2:	466b      	mov	r3, sp
 80014f4:	461e      	mov	r6, r3
    uint8_t res;
    static uint8_t dataIndex, wipStatus;
    uint8_t tempBuffer[u16Length]; /**< Temporarily buffer */
 80014f6:	7a79      	ldrb	r1, [r7, #9]
 80014f8:	460b      	mov	r3, r1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
 80014fe:	b2cb      	uxtb	r3, r1
 8001500:	2200      	movs	r2, #0
 8001502:	4698      	mov	r8, r3
 8001504:	4691      	mov	r9, r2
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800151a:	b2cb      	uxtb	r3, r1
 800151c:	2200      	movs	r2, #0
 800151e:	461c      	mov	r4, r3
 8001520:	4615      	mov	r5, r2
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	00eb      	lsls	r3, r5, #3
 800152c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001530:	00e2      	lsls	r2, r4, #3
 8001532:	460b      	mov	r3, r1
 8001534:	3307      	adds	r3, #7
 8001536:	08db      	lsrs	r3, r3, #3
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	ebad 0d03 	sub.w	sp, sp, r3
 800153e:	466b      	mov	r3, sp
 8001540:	3300      	adds	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
    unsigned long long dataOut;
    static uint8_t counter = 0;

    if (pHandle == NULL)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <E_25LCXX_put_byte+0x72>
        return 2; /**< return failed error */
 800154a:	2302      	movs	r3, #2
 800154c:	e07f      	b.n	800164e <E_25LCXX_put_byte+0x172>
    if (pHandle->u8Inited != 1)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001554:	2b01      	cmp	r3, #1
 8001556:	d001      	beq.n	800155c <E_25LCXX_put_byte+0x80>
        return 3; /**< return failed error */
 8001558:	2303      	movs	r3, #3
 800155a:	e078      	b.n	800164e <E_25LCXX_put_byte+0x172>

    memcpy(tempBuffer, pBuf, u16Length);
 800155c:	7a7b      	ldrb	r3, [r7, #9]
 800155e:	461a      	mov	r2, r3
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	6a38      	ldr	r0, [r7, #32]
 8001564:	f004 fe18 	bl	8006198 <memcpy>

    /**< Reverse array data to big Indian*/
    for (dataIndex = 0; dataIndex < u16Length / 2; dataIndex++) {
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <E_25LCXX_put_byte+0x180>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e024      	b.n	80015ba <E_25LCXX_put_byte+0xde>
        dataOut = tempBuffer[dataIndex];
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <E_25LCXX_put_byte+0x180>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	5c9b      	ldrb	r3, [r3, r2]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2200      	movs	r2, #0
 800157e:	469a      	mov	sl, r3
 8001580:	4693      	mov	fp, r2
 8001582:	e9c7 ab04 	strd	sl, fp, [r7, #16]
        tempBuffer[dataIndex] = tempBuffer[u16Length - dataIndex - 1];
 8001586:	7a7b      	ldrb	r3, [r7, #9]
 8001588:	4a34      	ldr	r2, [pc, #208]	; (800165c <E_25LCXX_put_byte+0x180>)
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	3b01      	subs	r3, #1
 8001590:	4a32      	ldr	r2, [pc, #200]	; (800165c <E_25LCXX_put_byte+0x180>)
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	4611      	mov	r1, r2
 8001596:	6a3a      	ldr	r2, [r7, #32]
 8001598:	5cd2      	ldrb	r2, [r2, r3]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	545a      	strb	r2, [r3, r1]
        tempBuffer[u16Length - dataIndex - 1] = dataOut;
 800159e:	7a7b      	ldrb	r3, [r7, #9]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015a2:	7812      	ldrb	r2, [r2, #0]
 80015a4:	1a9b      	subs	r3, r3, r2
 80015a6:	3b01      	subs	r3, #1
 80015a8:	7c39      	ldrb	r1, [r7, #16]
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	54d1      	strb	r1, [r2, r3]
    for (dataIndex = 0; dataIndex < u16Length / 2; dataIndex++) {
 80015ae:	4b2b      	ldr	r3, [pc, #172]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b29      	ldr	r3, [pc, #164]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	7a7b      	ldrb	r3, [r7, #9]
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d8d3      	bhi.n	8001570 <E_25LCXX_put_byte+0x94>
    }

    for (dataIndex = u16Addr; dataIndex < (u16Length + u16Addr); dataIndex++) {
 80015c8:	897b      	ldrh	r3, [r7, #10]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e034      	b.n	800163c <E_25LCXX_put_byte+0x160>
        res = (E_25LCxx_write_byte(pHandle, dataIndex, (uint8_t *) &tempBuffer[counter], 1));
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <E_25LCXX_put_byte+0x180>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b299      	uxth	r1, r3
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <E_25LCXX_put_byte+0x184>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	441a      	add	r2, r3
 80015e2:	2301      	movs	r3, #1
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fee9 	bl	80013bc <E_25LCxx_write_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	77fb      	strb	r3, [r7, #31]
        if (res) {
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <E_25LCXX_put_byte+0x124>
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx: failed to put bytes\r\n");
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	481a      	ldr	r0, [pc, #104]	; (8001664 <E_25LCXX_put_byte+0x188>)
 80015fa:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< failed to write */
 80015fc:	2301      	movs	r3, #1
 80015fe:	e026      	b.n	800164e <E_25LCXX_put_byte+0x172>
        }
        counter++;
 8001600:	4b17      	ldr	r3, [pc, #92]	; (8001660 <E_25LCXX_put_byte+0x184>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <E_25LCXX_put_byte+0x184>)
 800160a:	701a      	strb	r2, [r3, #0]

        do {
            res = (E_25LCxx_get_wip_status(pHandle, (uint8_t*) & wipStatus));
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <E_25LCXX_put_byte+0x18c>)
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f7ff fd72 	bl	80010f8 <E_25LCxx_get_wip_status>
 8001614:	4603      	mov	r3, r0
 8001616:	77fb      	strb	r3, [r7, #31]
            if (res) {
 8001618:	7ffb      	ldrb	r3, [r7, #31]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <E_25LCXX_put_byte+0x14c>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LCxx: failed to read WIP status\r\n");
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4812      	ldr	r0, [pc, #72]	; (800166c <E_25LCXX_put_byte+0x190>)
 8001624:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                break;
 8001626:	e003      	b.n	8001630 <E_25LCXX_put_byte+0x154>
                return 1;
            }
        } while (wipStatus); /** wait for each byte to successfully complete writing */
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <E_25LCXX_put_byte+0x18c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1ed      	bne.n	800160c <E_25LCXX_put_byte+0x130>
    for (dataIndex = u16Addr; dataIndex < (u16Length + u16Addr); dataIndex++) {
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <E_25LCXX_put_byte+0x180>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <E_25LCXX_put_byte+0x180>)
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <E_25LCXX_put_byte+0x180>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	7a7a      	ldrb	r2, [r7, #9]
 8001644:	897b      	ldrh	r3, [r7, #10]
 8001646:	4413      	add	r3, r2
 8001648:	4299      	cmp	r1, r3
 800164a:	dbc2      	blt.n	80015d2 <E_25LCXX_put_byte+0xf6>
    }

    return 0; /**< return success */
 800164c:	2300      	movs	r3, #0
 800164e:	46b5      	mov	sp, r6
}
 8001650:	4618      	mov	r0, r3
 8001652:	372c      	adds	r7, #44	; 0x2c
 8001654:	46bd      	mov	sp, r7
 8001656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800165a:	bf00      	nop
 800165c:	20000204 	.word	0x20000204
 8001660:	20000205 	.word	0x20000205
 8001664:	0800934c 	.word	0x0800934c
 8001668:	20000206 	.word	0x20000206
 800166c:	0800936c 	.word	0x0800936c

08001670 <E_25LCxx_read_byte>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 *            - 4 invalid address (failed to validate address)
 * @note      none
 */
uint8_t E_25LCxx_read_byte(E_25LCxx_handle_t *pHandle, uint16_t u16Addr, uint8_t *pBuf, uint16_t u16Length) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	461a      	mov	r2, r3
 800167c:	460b      	mov	r3, r1
 800167e:	817b      	strh	r3, [r7, #10]
 8001680:	4613      	mov	r3, r2
 8001682:	813b      	strh	r3, [r7, #8]

    uint8_t res;

    if (pHandle == NULL)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <E_25LCxx_read_byte+0x1e>
        return 2; /**< return failed error */
 800168a:	2302      	movs	r3, #2
 800168c:	e047      	b.n	800171e <E_25LCxx_read_byte+0xae>
    if (pHandle->u8Inited != 1)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001694:	2b01      	cmp	r3, #1
 8001696:	d001      	beq.n	800169c <E_25LCxx_read_byte+0x2c>
        return 3; /**< return failed error */
 8001698:	2303      	movs	r3, #3
 800169a:	e040      	b.n	800171e <E_25LCxx_read_byte+0xae>
    if (E_25LCxxx_validate_address(pHandle, u16Addr) != 0)
 800169c:	897b      	ldrh	r3, [r7, #10]
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fad3 	bl	8001c4c <E_25LCxxx_validate_address>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <E_25LCxx_read_byte+0x40>
        return 4; /**< return failed error */
 80016ac:	2304      	movs	r3, #4
 80016ae:	e036      	b.n	800171e <E_25LCxx_read_byte+0xae>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	2000      	movs	r0, #0
 80016b6:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_READ_REG, NULL, 0); /**< send a read command */
 80016b8:	2300      	movs	r3, #0
 80016ba:	2200      	movs	r2, #0
 80016bc:	2103      	movs	r1, #3
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff fc14 	bl	8000eec <a_e25lcxx_spi_write>
 80016c4:	4603      	mov	r3, r0
 80016c6:	75fb      	strb	r3, [r7, #23]
    if (res) {
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <E_25LCxx_read_byte+0x6a>

#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to issue read command \r\n");
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <E_25LCxx_read_byte+0xb8>)
 80016d4:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e021      	b.n	800171e <E_25LCxx_read_byte+0xae>
    }
    res = a_e25lcxx_spi_write(pHandle, (u16Addr >> 8), NULL, 0); /**< write MSb address */
 80016da:	897b      	ldrh	r3, [r7, #10]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b299      	uxth	r1, r3
 80016e0:	2300      	movs	r3, #0
 80016e2:	2200      	movs	r2, #0
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fc01 	bl	8000eec <a_e25lcxx_spi_write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	75fb      	strb	r3, [r7, #23]
    res = a_e25lcxx_spi_read(pHandle, (uint8_t) u16Addr, (uint8_t *) pBuf, u16Length); /**< read data off the buffer */
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b299      	uxth	r1, r3
 80016f4:	893b      	ldrh	r3, [r7, #8]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff fc17 	bl	8000f2c <a_e25lcxx_spi_read>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
    if (res) {
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <E_25LCxx_read_byte+0xa4>

#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed read byte \r\n");
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	4807      	ldr	r0, [pc, #28]	; (800172c <E_25LCxx_read_byte+0xbc>)
 800170e:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 8001710:	2301      	movs	r3, #1
 8001712:	e004      	b.n	800171e <E_25LCxx_read_byte+0xae>
    }

    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2001      	movs	r0, #1
 800171a:	4798      	blx	r3

    return 0; /**< return success */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	08009390 	.word	0x08009390
 800172c:	080093b8 	.word	0x080093b8

08001730 <E_25LCXX_get_byte>:
 *            - 3 handle is not initialized
 *            - 4 invalid address (failed to validate address)
 * @note     Equivalent to eeprom.get on Arduino
 */

uint8_t E_25LCXX_get_byte(E_25LCxx_handle_t *pHandle, uint16_t u16Addr, uint32_t *pBuf, uint8_t u16Length) {
 8001730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001734:	b089      	sub	sp, #36	; 0x24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	461a      	mov	r2, r3
 800173e:	460b      	mov	r3, r1
 8001740:	817b      	strh	r3, [r7, #10]
 8001742:	4613      	mov	r3, r2
 8001744:	727b      	strb	r3, [r7, #9]
 8001746:	466b      	mov	r3, sp
 8001748:	461e      	mov	r6, r3
    static uint8_t res, index;
    uint8_t tempBuffer[u16Length];
 800174a:	7a79      	ldrb	r1, [r7, #9]
 800174c:	460b      	mov	r3, r1
 800174e:	3b01      	subs	r3, #1
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	b2cb      	uxtb	r3, r1
 8001754:	2200      	movs	r2, #0
 8001756:	4698      	mov	r8, r3
 8001758:	4691      	mov	r9, r2
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f04f 0300 	mov.w	r3, #0
 8001762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800176e:	b2cb      	uxtb	r3, r1
 8001770:	2200      	movs	r2, #0
 8001772:	461c      	mov	r4, r3
 8001774:	4615      	mov	r5, r2
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	00eb      	lsls	r3, r5, #3
 8001780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001784:	00e2      	lsls	r2, r4, #3
 8001786:	460b      	mov	r3, r1
 8001788:	3307      	adds	r3, #7
 800178a:	08db      	lsrs	r3, r3, #3
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	ebad 0d03 	sub.w	sp, sp, r3
 8001792:	466b      	mov	r3, sp
 8001794:	3300      	adds	r3, #0
 8001796:	61bb      	str	r3, [r7, #24]
    uint8_t count = u16Length - 1;
 8001798:	7a7b      	ldrb	r3, [r7, #9]
 800179a:	3b01      	subs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    static uint32_t dataOut;

    if (pHandle == NULL)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <E_25LCXX_get_byte+0x78>
        return 2; /**< return failed error */
 80017a4:	2302      	movs	r3, #2
 80017a6:	e055      	b.n	8001854 <E_25LCXX_get_byte+0x124>
    if (pHandle->u8Inited != 1)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d001      	beq.n	80017b6 <E_25LCXX_get_byte+0x86>
        return 3; /**< return failed error */
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04e      	b.n	8001854 <E_25LCXX_get_byte+0x124>

    res = (E_25LCxx_read_byte(pHandle, u16Addr, (uint8_t*) tempBuffer, u16Length));
 80017b6:	7a7b      	ldrb	r3, [r7, #9]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff ff56 	bl	8001670 <E_25LCxx_read_byte>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <E_25LCXX_get_byte+0x130>)
 80017ca:	701a      	strb	r2, [r3, #0]
    if (res != NULL) {
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <E_25LCXX_get_byte+0x130>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <E_25LCXX_get_byte+0xb0>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to get bytes\r\n");
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4822      	ldr	r0, [pc, #136]	; (8001864 <E_25LCXX_get_byte+0x134>)
 80017da:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return error code */
 80017dc:	2301      	movs	r3, #1
 80017de:	e039      	b.n	8001854 <E_25LCXX_get_byte+0x124>
    }

    /**< Reverse array data */
    for (index = 0; index < u16Length / 2; index++) {
 80017e0:	4b21      	ldr	r3, [pc, #132]	; (8001868 <E_25LCXX_get_byte+0x138>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e023      	b.n	8001830 <E_25LCXX_get_byte+0x100>
        dataOut = tempBuffer[index];
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <E_25LCXX_get_byte+0x138>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	5c9b      	ldrb	r3, [r3, r2]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <E_25LCXX_get_byte+0x13c>)
 80017f6:	601a      	str	r2, [r3, #0]
        tempBuffer[index] = tempBuffer[u16Length - index - 1];
 80017f8:	7a7b      	ldrb	r3, [r7, #9]
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <E_25LCXX_get_byte+0x138>)
 80017fc:	7812      	ldrb	r2, [r2, #0]
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	3b01      	subs	r3, #1
 8001802:	4a19      	ldr	r2, [pc, #100]	; (8001868 <E_25LCXX_get_byte+0x138>)
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	5cd2      	ldrb	r2, [r2, r3]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	545a      	strb	r2, [r3, r1]
        tempBuffer[u16Length - index - 1] = dataOut;
 8001810:	4b16      	ldr	r3, [pc, #88]	; (800186c <E_25LCXX_get_byte+0x13c>)
 8001812:	6819      	ldr	r1, [r3, #0]
 8001814:	7a7b      	ldrb	r3, [r7, #9]
 8001816:	4a14      	ldr	r2, [pc, #80]	; (8001868 <E_25LCXX_get_byte+0x138>)
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	3b01      	subs	r3, #1
 800181e:	b2c9      	uxtb	r1, r1
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	54d1      	strb	r1, [r2, r3]
    for (index = 0; index < u16Length / 2; index++) {
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <E_25LCXX_get_byte+0x138>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <E_25LCXX_get_byte+0x138>)
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	7a7b      	ldrb	r3, [r7, #9]
 8001832:	085b      	lsrs	r3, r3, #1
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <E_25LCXX_get_byte+0x138>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d8d4      	bhi.n	80017e8 <E_25LCXX_get_byte+0xb8>
    }

    memcpy(dataReadOut.buffer, tempBuffer, u16Length);
 800183e:	7a7b      	ldrb	r3, [r7, #9]
 8001840:	461a      	mov	r2, r3
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	480a      	ldr	r0, [pc, #40]	; (8001870 <E_25LCXX_get_byte+0x140>)
 8001846:	f004 fca7 	bl	8006198 <memcpy>
    //    for( index = 0; index < u16Length; ++index)
    //    {
    //        dataOut|= (tempBuffer[count] << (8 * index));
    //        count--;
    //    }
    *pBuf = (uint32_t) dataReadOut.data;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <E_25LCXX_get_byte+0x140>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]

    return 0;
 8001852:	2300      	movs	r3, #0
 8001854:	46b5      	mov	sp, r6

}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001860:	20000207 	.word	0x20000207
 8001864:	080093d4 	.word	0x080093d4
 8001868:	20000208 	.word	0x20000208
 800186c:	2000020c 	.word	0x2000020c
 8001870:	200001fc 	.word	0x200001fc

08001874 <E_25LCxx_erase_page>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 *            - 4 invalid page (out of boundary)
 * @note      Page erase instruction will erase all bits (FFh) inside the given page.
 */
uint8_t E_25LCxx_erase_page(E_25LCxx_handle_t *pHandle, uint16_t u16PageNumber) {
 8001874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001878:	b087      	sub	sp, #28
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	466b      	mov	r3, sp
 8001884:	461e      	mov	r6, r3
    uint8_t res;
    uint16_t pageStartAdd; /**< define variable to hold page start address */
    uint8_t data[pHandle->iPage_size];
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800188c:	460b      	mov	r3, r1
 800188e:	3b01      	subs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	b2cb      	uxtb	r3, r1
 8001894:	2200      	movs	r2, #0
 8001896:	4698      	mov	r8, r3
 8001898:	4691      	mov	r9, r2
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ae:	b2cb      	uxtb	r3, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	461c      	mov	r4, r3
 80018b4:	4615      	mov	r5, r2
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	00eb      	lsls	r3, r5, #3
 80018c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c4:	00e2      	lsls	r2, r4, #3
 80018c6:	460b      	mov	r3, r1
 80018c8:	3307      	adds	r3, #7
 80018ca:	08db      	lsrs	r3, r3, #3
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	ebad 0d03 	sub.w	sp, sp, r3
 80018d2:	466b      	mov	r3, sp
 80018d4:	3300      	adds	r3, #0
 80018d6:	60fb      	str	r3, [r7, #12]

    memset(data, 0xff, pHandle->iPage_size); /**< define data to write when erasing page (default 255)*/
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018de:	461a      	mov	r2, r3
 80018e0:	21ff      	movs	r1, #255	; 0xff
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f004 fc66 	bl	80061b4 <memset>

    if (pHandle == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <E_25LCxx_erase_page+0x7e>
        return 2; /**< return failed error */
 80018ee:	2302      	movs	r3, #2
 80018f0:	e090      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
    if (pHandle->u8Inited != 1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d001      	beq.n	8001900 <E_25LCxx_erase_page+0x8c>
        return 3; /**< return failed error */
 80018fc:	2303      	movs	r3, #3
 80018fe:	e089      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
    if (E_25LCxxx_validate_page(pHandle, u16PageNumber, (uint16_t *) & pageStartAdd) != NULL)
 8001900:	f107 020a 	add.w	r2, r7, #10
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fabf 	bl	8001e8c <E_25LCxxx_validate_page>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <E_25LCxx_erase_page+0xa4>
        return 4; /**< return failed error */
 8001914:	2304      	movs	r3, #4
 8001916:	e07d      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
    if (E_25LCxx_check_bp_before_write(pHandle, pageStartAdd) != NULL)
 8001918:	897b      	ldrh	r3, [r7, #10]
 800191a:	4619      	mov	r1, r3
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 f907 	bl	8001b30 <E_25LCxx_check_bp_before_write>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <E_25LCxx_erase_page+0xb8>
        return 5; /**< return failed error */
 8001928:	2305      	movs	r3, #5
 800192a:	e073      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	2000      	movs	r0, #0
 8001932:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WREN_REG, NULL, 0); /**< enable write operation */
 8001934:	2300      	movs	r3, #0
 8001936:	2200      	movs	r2, #0
 8001938:	2106      	movs	r1, #6
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fad6 	bl	8000eec <a_e25lcxx_spi_write>
 8001940:	4603      	mov	r3, r0
 8001942:	75fb      	strb	r3, [r7, #23]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip diselect */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	2001      	movs	r0, #1
 800194a:	4798      	blx	r3
    if (res) {
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <E_25LCxx_erase_page+0xea>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to enable write operation \r\n");
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4832      	ldr	r0, [pc, #200]	; (8001a20 <E_25LCxx_erase_page+0x1ac>)
 8001958:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return fail error */
 800195a:	2301      	movs	r3, #1
 800195c:	e05a      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	2000      	movs	r0, #0
 8001964:	4798      	blx	r3
    if (pHandle->u8Device_type == E_25LC512_VARIANT) {
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196c:	2b07      	cmp	r3, #7
 800196e:	d11c      	bne.n	80019aa <E_25LCxx_erase_page+0x136>
        res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_PAGE_ERASE_CMD, NULL, 0); /**< send an erase command  */
 8001970:	2300      	movs	r3, #0
 8001972:	2200      	movs	r2, #0
 8001974:	2142      	movs	r1, #66	; 0x42
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fab8 	bl	8000eec <a_e25lcxx_spi_write>
 800197c:	4603      	mov	r3, r0
 800197e:	75fb      	strb	r3, [r7, #23]
        res = a_e25lcxx_spi_write(pHandle, (pageStartAdd >> 8), NULL, 0); /**< write MSB byte  */
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b299      	uxth	r1, r3
 8001986:	2300      	movs	r3, #0
 8001988:	2200      	movs	r2, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff faae 	bl	8000eec <a_e25lcxx_spi_write>
 8001990:	4603      	mov	r3, r0
 8001992:	75fb      	strb	r3, [r7, #23]
        res = a_e25lcxx_spi_write(pHandle, (uint8_t) pageStartAdd, NULL, 0); /**< write LSB byte  */
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	b299      	uxth	r1, r3
 800199a:	2300      	movs	r3, #0
 800199c:	2200      	movs	r2, #0
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff faa4 	bl	8000eec <a_e25lcxx_spi_write>
 80019a4:	4603      	mov	r3, r0
 80019a6:	75fb      	strb	r3, [r7, #23]
 80019a8:	e026      	b.n	80019f8 <E_25LCxx_erase_page+0x184>
    } else {

        res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WRITE_REG, NULL, 0); /**< send the write command  */
 80019aa:	2300      	movs	r3, #0
 80019ac:	2200      	movs	r2, #0
 80019ae:	2102      	movs	r1, #2
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fa9b 	bl	8000eec <a_e25lcxx_spi_write>
 80019b6:	4603      	mov	r3, r0
 80019b8:	75fb      	strb	r3, [r7, #23]
        if (res) {
 80019ba:	7dfb      	ldrb	r3, [r7, #23]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <E_25LCxx_erase_page+0x158>
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx:failed to send write command\r\n");
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4817      	ldr	r0, [pc, #92]	; (8001a24 <E_25LCxx_erase_page+0x1b0>)
 80019c6:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return failed error **/
 80019c8:	2301      	movs	r3, #1
 80019ca:	e023      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
        }
        res = a_e25lcxx_spi_write(pHandle, (pageStartAdd >> 8), NULL, 0); /**< write MSB byte  */
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	b299      	uxth	r1, r3
 80019d2:	2300      	movs	r3, #0
 80019d4:	2200      	movs	r2, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff fa88 	bl	8000eec <a_e25lcxx_spi_write>
 80019dc:	4603      	mov	r3, r0
 80019de:	75fb      	strb	r3, [r7, #23]
        res = a_e25lcxx_spi_write(pHandle, (uint8_t) pageStartAdd, (uint8_t *) & data, pHandle->iPage_size); /**< write LSB byte  */
 80019e0:	897b      	ldrh	r3, [r7, #10]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	b299      	uxth	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fa7c 	bl	8000eec <a_e25lcxx_spi_write>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]
    }

    if (res) {
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <E_25LCxx_erase_page+0x196>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to erase page\r\n");
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <E_25LCxx_erase_page+0x1b4>)
 8001a04:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 8001a06:	2301      	movs	r3, #1
 8001a08:	e004      	b.n	8001a14 <E_25LCxx_erase_page+0x1a0>
    }
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip deselect */
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2001      	movs	r0, #1
 8001a10:	4798      	blx	r3

    return 0; /**< return success */
 8001a12:	2300      	movs	r3, #0
 8001a14:	46b5      	mov	sp, r6
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a20:	080092b0 	.word	0x080092b0
 8001a24:	08009300 	.word	0x08009300
 8001a28:	080093f4 	.word	0x080093f4

08001a2c <E_25LCxx_erase_sector>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 *            - 4 invalid address
 * @note      sector erase instruction will erase all bits (FFh) inside the given sector
 */
uint8_t E_25LCxx_erase_sector(E_25LCxx_handle_t *pHandle, uint16_t *pSector_addr) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]

    uint8_t res;
    uint8_t index;

    if (pHandle == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <E_25LCxx_erase_sector+0x14>
        return 2; /**< return failed error */
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e06c      	b.n	8001b1a <E_25LCxx_erase_sector+0xee>
    if (pHandle->u8Inited != 1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <E_25LCxx_erase_sector+0x22>
        return 3; /**< return failed error */
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e065      	b.n	8001b1a <E_25LCxx_erase_sector+0xee>
    for (index = 0; index < 2; index++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e014      	b.n	8001a7e <E_25LCxx_erase_sector+0x52>
        if (E_25LCxxx_validate_address(pHandle, pSector_addr[index]) != NULL) /**< check if the address to erase is valid or not */ {
 8001a54:	7bfb      	ldrb	r3, [r7, #15]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 f8f3 	bl	8001c4c <E_25LCxxx_validate_address>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <E_25LCxx_erase_sector+0x4c>
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx: failed to write, invalid address \r\n");
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	482c      	ldr	r0, [pc, #176]	; (8001b24 <E_25LCxx_erase_sector+0xf8>)
 8001a72:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 4; /**< return failed error */
 8001a74:	2304      	movs	r3, #4
 8001a76:	e050      	b.n	8001b1a <E_25LCxx_erase_sector+0xee>
    for (index = 0; index < 2; index++) {
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d9e7      	bls.n	8001a54 <E_25LCxx_erase_sector+0x28>
        }
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2000      	movs	r0, #0
 8001a8a:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_WREN_REG, NULL, 0); /**< enable write operation */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2106      	movs	r1, #6
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fa2a 	bl	8000eec <a_e25lcxx_spi_write>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73bb      	strb	r3, [r7, #14]
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	4798      	blx	r3
    if (res) {
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <E_25LCxx_erase_sector+0x8a>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx: failed to enable write operation \r\n");
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	481e      	ldr	r0, [pc, #120]	; (8001b28 <E_25LCxx_erase_sector+0xfc>)
 8001ab0:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return fail error */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e031      	b.n	8001b1a <E_25LCxx_erase_sector+0xee>
    }

    pHandle->pChip_select(SLAVE_SELECT); /**< chip select */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2000      	movs	r0, #0
 8001abc:	4798      	blx	r3
    res = a_e25lcxx_spi_write(pHandle, E_25LCXXX_SECTOR_ERASE_CMD, NULL, 0); /**< send an erase command and sector to erase */
 8001abe:	2300      	movs	r3, #0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	21d8      	movs	r1, #216	; 0xd8
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fa11 	bl	8000eec <a_e25lcxx_spi_write>
 8001aca:	4603      	mov	r3, r0
 8001acc:	73bb      	strb	r3, [r7, #14]
    res = a_e25lcxx_spi_write(pHandle, (pSector_addr[0] >> 8), (uint8_t*) & pSector_addr[0], 1); /**< write MSB and LSB byte of the start address */
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b299      	uxth	r1, r3
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fa06 	bl	8000eec <a_e25lcxx_spi_write>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	73bb      	strb	r3, [r7, #14]
    res = a_e25lcxx_spi_write(pHandle, (pSector_addr[1] >> 8), (uint8_t*) & pSector_addr[1], 1); /**< write MSB and LSB byte of the last address */
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	b299      	uxth	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	1c9a      	adds	r2, r3, #2
 8001af2:	2301      	movs	r3, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff f9f9 	bl	8000eec <a_e25lcxx_spi_write>
 8001afa:	4603      	mov	r3, r0
 8001afc:	73bb      	strb	r3, [r7, #14]
    if (res) {
 8001afe:	7bbb      	ldrb	r3, [r7, #14]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <E_25LCxx_erase_sector+0xe4>
#ifdef E_25LCXX_DEBUG_MODE
        pHandle->pDebug_print("25LCxx:failed to send erase sector\r\n");
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <E_25LCxx_erase_sector+0x100>)
 8001b0a:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
        return 1; /**< return failed error **/
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e004      	b.n	8001b1a <E_25LCxx_erase_sector+0xee>
    }
    pHandle->pChip_select(SLAVE_ASSERT); /**< chip assert */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	2001      	movs	r0, #1
 8001b16:	4798      	blx	r3

    return 0; /**< return success */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	08009414 	.word	0x08009414
 8001b28:	080092b0 	.word	0x080092b0
 8001b2c:	08009440 	.word	0x08009440

08001b30 <E_25LCxx_check_bp_before_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t E_25LCxx_check_bp_before_write(E_25LCxx_handle_t *pHandle, uint16_t u16Address) {
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
    uint8_t status;
    uint16_t memoryLength;
    if (pHandle == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <E_25LCxx_check_bp_before_write+0x16>
        return 2; /**< return failed error */
 8001b42:	2302      	movs	r3, #2
 8001b44:	e071      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
    if (pHandle->u8Inited != 1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d001      	beq.n	8001b54 <E_25LCxx_check_bp_before_write+0x24>
        return 3; /**< return failed error */
 8001b50:	2303      	movs	r3, #3
 8001b52:	e06a      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>

    E_25LCxx_get_bp_status(pHandle, (uint8_t*) & status);
 8001b54:	f107 030f 	add.w	r3, r7, #15
 8001b58:	4619      	mov	r1, r3
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff fb7c 	bl	8001258 <E_25LCxx_get_bp_status>
    E_25LCxx_get_legth(pHandle, (uint16_t *) & memoryLength);
 8001b60:	f107 030c 	add.w	r3, r7, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa84 	bl	8002074 <E_25LCxx_get_legth>

    switch (status) {
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d856      	bhi.n	8001c20 <E_25LCxx_check_bp_before_write+0xf0>
 8001b72:	a201      	add	r2, pc, #4	; (adr r2, 8001b78 <E_25LCxx_check_bp_before_write+0x48>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001b89 	.word	0x08001b89
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001bd1 	.word	0x08001bd1
 8001b84:	08001c15 	.word	0x08001c15

        case E_25LCxx_BP00: /* write to full memory enable */
        {
            return 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e04e      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
            break;
        }

        case E_25LCxx_BP01:
        {
            if (u16Address >= (memoryLength * 0.75)) {
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcc8 	bl	8000524 <__aeabi_i2d>
 8001b94:	4604      	mov	r4, r0
 8001b96:	460d      	mov	r5, r1
 8001b98:	89bb      	ldrh	r3, [r7, #12]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcc2 	bl	8000524 <__aeabi_i2d>
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <E_25LCxx_check_bp_before_write+0x104>)
 8001ba6:	f7fe fd27 	bl	80005f8 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe ffa7 	bl	8000b04 <__aeabi_dcmpge>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <E_25LCxx_check_bp_before_write+0x9c>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LCxx: failed to write from address: %d, 25%% of the upper memory is write protected\r\n", u16Address);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	887a      	ldrh	r2, [r7, #2]
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	481c      	ldr	r0, [pc, #112]	; (8001c38 <E_25LCxx_check_bp_before_write+0x108>)
 8001bc6:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return error */
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e02e      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
            } else {
                return 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e02c      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
            break;
        }

        case E_25LCxx_BP10:
        {
            if (u16Address >= (memoryLength * 0.5)) {
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fca6 	bl	8000524 <__aeabi_i2d>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	460d      	mov	r5, r1
 8001bdc:	89bb      	ldrh	r3, [r7, #12]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fca0 	bl	8000524 <__aeabi_i2d>
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <E_25LCxx_check_bp_before_write+0x10c>)
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	f7fe ff85 	bl	8000b04 <__aeabi_dcmpge>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <E_25LCxx_check_bp_before_write+0xe0>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LCxx: failed to write from address: %d, half of the memory is write protected\r\n", u16Address);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	4611      	mov	r1, r2
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <E_25LCxx_check_bp_before_write+0x110>)
 8001c0a:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return error */
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e00c      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
            } else {
                return 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e00a      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
        }

        case E_25LCxx_BP11:
        {
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx: write failed, eeprom full memory write protected, check the BP status\r\n");
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
 8001c18:	480a      	ldr	r0, [pc, #40]	; (8001c44 <E_25LCxx_check_bp_before_write+0x114>)
 8001c1a:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return error */
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e004      	b.n	8001c2a <E_25LCxx_check_bp_before_write+0xfa>
            break;
        }

        default:
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx: write failed,unknown block protect status\r\n");
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	4808      	ldr	r0, [pc, #32]	; (8001c48 <E_25LCxx_check_bp_before_write+0x118>)
 8001c26:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return error */
 8001c28:	2301      	movs	r3, #1
            break;

    }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bdb0      	pop	{r4, r5, r7, pc}
 8001c32:	bf00      	nop
 8001c34:	3fe80000 	.word	0x3fe80000
 8001c38:	080094e4 	.word	0x080094e4
 8001c3c:	3fe00000 	.word	0x3fe00000
 8001c40:	0800953c 	.word	0x0800953c
 8001c44:	08009590 	.word	0x08009590
 8001c48:	080095e0 	.word	0x080095e0

08001c4c <E_25LCxxx_validate_address>:
 *          - 1 failed validate
 *          - 2 handle is NULL
 *          - 3 handle is not initialized
 * @note    none
 */
uint8_t E_25LCxxx_validate_address(E_25LCxx_handle_t *pHandle, E_25LCxx_max_addr_t u16Address) {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]

    if (pHandle == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <E_25LCxxx_validate_address+0x16>
        return 2; /**< return failed error */
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e082      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
    if (pHandle->u8Inited != 1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <E_25LCxxx_validate_address+0x24>
        return 3; /**< return failed error */
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e07b      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>

    uint16_t address = (uint16_t) u16Address;
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	81fb      	strh	r3, [r7, #14]

    switch (pHandle->u8Device_type) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d85f      	bhi.n	8001d40 <E_25LCxxx_validate_address+0xf4>
 8001c80:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <E_25LCxxx_validate_address+0x3c>)
 8001c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c86:	bf00      	nop
 8001c88:	08001ca5 	.word	0x08001ca5
 8001c8c:	08001cbf 	.word	0x08001cbf
 8001c90:	08001cd9 	.word	0x08001cd9
 8001c94:	08001cf3 	.word	0x08001cf3
 8001c98:	08001d0d 	.word	0x08001d0d
 8001c9c:	08001d27 	.word	0x08001d27
 8001ca0:	08001d4d 	.word	0x08001d4d

        case E_25LC080x_VARIANT:
        {
            if (address > E_25LC080x_MAX_ADD) {
 8001ca4:	89fb      	ldrh	r3, [r7, #14]
 8001ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001caa:	d351      	bcc.n	8001d50 <E_25LCxxx_validate_address+0x104>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC080x: address %d is greater than max allowed %d\r\n", address, E_25LC080x_MAX_ADD);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	89f9      	ldrh	r1, [r7, #14]
 8001cb2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001cb6:	482e      	ldr	r0, [pc, #184]	; (8001d70 <E_25LCxxx_validate_address+0x124>)
 8001cb8:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e054      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
        }

        case E_25LC160x_VARIANT:
        {
            if (address > E_25LC160x_MAX_ADD) {
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc4:	d346      	bcc.n	8001d54 <E_25LCxxx_validate_address+0x108>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC160x: address %d is greater than max allowed %d\r\n", address, E_25LC160x_MAX_ADD);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	89f9      	ldrh	r1, [r7, #14]
 8001ccc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001cd0:	4828      	ldr	r0, [pc, #160]	; (8001d74 <E_25LCxxx_validate_address+0x128>)
 8001cd2:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e047      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
        }

        case E_25LC320x_VARIANT:
        {
            if (address > E_25LC320x_MAX_ADD) {
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cde:	d33b      	bcc.n	8001d58 <E_25LCxxx_validate_address+0x10c>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC320x: address %d is greater than max allowed %d\r\n", address, E_25LC320x_MAX_ADD);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	89f9      	ldrh	r1, [r7, #14]
 8001ce6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001cea:	4823      	ldr	r0, [pc, #140]	; (8001d78 <E_25LCxxx_validate_address+0x12c>)
 8001cec:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e03a      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
        }

        case E_25LC640x_VARIANT:
        {
            if (address > E_25LC640x_MAX_ADD) {
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cf8:	d330      	bcc.n	8001d5c <E_25LCxxx_validate_address+0x110>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC640x: address %d is greater than max allowed %d\r\n", address, E_25LC640x_MAX_ADD);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	89f9      	ldrh	r1, [r7, #14]
 8001d00:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001d04:	481d      	ldr	r0, [pc, #116]	; (8001d7c <E_25LCxxx_validate_address+0x130>)
 8001d06:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e02d      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
        }

        case E_25LC128_VARIANT:
        {

            if (address > E_25LC128_MAX_ADD) {
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d12:	d325      	bcc.n	8001d60 <E_25LCxxx_validate_address+0x114>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC128: address %d is greater than max allowed %d\r\n", address, E_25LC128_MAX_ADD);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	89f9      	ldrh	r1, [r7, #14]
 8001d1a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001d1e:	4818      	ldr	r0, [pc, #96]	; (8001d80 <E_25LCxxx_validate_address+0x134>)
 8001d20:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001d22:	2301      	movs	r3, #1
 8001d24:	e020      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
        }

        case E_25LC256_VARIANT:
        {
            if (address > E_25LC256_MAX_ADD) {
 8001d26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da1a      	bge.n	8001d64 <E_25LCxxx_validate_address+0x118>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC256: address %d is greater than max allowed %d\r\n", address, E_25LC256_MAX_ADD);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	89f9      	ldrh	r1, [r7, #14]
 8001d34:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <E_25LCxxx_validate_address+0x138>)
 8001d3a:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e013      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
        }

        default:
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx:failed to validate address eeprom type unknown\r\n");
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <E_25LCxxx_validate_address+0x13c>)
 8001d46:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return failed error **/
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00d      	b.n	8001d68 <E_25LCxxx_validate_address+0x11c>
            break;
 8001d4c:	bf00      	nop
 8001d4e:	e00a      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d50:	bf00      	nop
 8001d52:	e008      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d54:	bf00      	nop
 8001d56:	e006      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d58:	bf00      	nop
 8001d5a:	e004      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d5c:	bf00      	nop
 8001d5e:	e002      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <E_25LCxxx_validate_address+0x11a>
            break;
 8001d64:	bf00      	nop
            break;
    }

    return 0; /**< address validated */
 8001d66:	2300      	movs	r3, #0

}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	08009614 	.word	0x08009614
 8001d74:	0800964c 	.word	0x0800964c
 8001d78:	08009684 	.word	0x08009684
 8001d7c:	080096bc 	.word	0x080096bc
 8001d80:	080096f4 	.word	0x080096f4
 8001d84:	0800972c 	.word	0x0800972c
 8001d88:	08009764 	.word	0x08009764

08001d8c <E_25LCXX_validate_page_boundary>:
 *          - 1 failed to validate
 *          - 2 handle is NULL
 *          - 3 handle is not initialized
 * @note    none
 */
uint8_t E_25LCXX_validate_page_boundary(E_25LCxx_handle_t *pHandle, uint16_t u16Address, uint16_t u16Length) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	803b      	strh	r3, [r7, #0]
    float status;
    uint16_t index, res;
    uint16_t startAdress, endAddress;

    if (pHandle == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <E_25LCXX_validate_page_boundary+0x1a>
        return 2; /**< return failed error */
 8001da2:	2302      	movs	r3, #2
 8001da4:	e06a      	b.n	8001e7c <E_25LCXX_validate_page_boundary+0xf0>
    if (pHandle->u8Inited != 1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d001      	beq.n	8001db4 <E_25LCXX_validate_page_boundary+0x28>
        return 3; /**< return failed error */
 8001db0:	2303      	movs	r3, #3
 8001db2:	e063      	b.n	8001e7c <E_25LCXX_validate_page_boundary+0xf0>

    for (index = 0; index < (e_25LCxx_basic_get_eeprom_legth() / pHandle->iPage_size); index++) {
 8001db4:	2300      	movs	r3, #0
 8001db6:	82fb      	strh	r3, [r7, #22]
 8001db8:	e052      	b.n	8001e60 <E_25LCXX_validate_page_boundary+0xd4>

        if ((index * pHandle->iPage_size) > u16Address) /**< get start address page number(index) */ {
 8001dba:	8afb      	ldrh	r3, [r7, #22]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8001dc2:	fb03 f202 	mul.w	r2, r3, r2
 8001dc6:	887b      	ldrh	r3, [r7, #2]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dd46      	ble.n	8001e5a <E_25LCXX_validate_page_boundary+0xce>
            status = (u16Address + u16Length) / (float) pHandle->iPage_size;
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	883b      	ldrh	r3, [r7, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	edc7 7a04 	vstr	s15, [r7, #16]
            res = ceil(status);
 8001df0:	6938      	ldr	r0, [r7, #16]
 8001df2:	f7fe fba9 	bl	8000548 <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	ec43 2b10 	vmov	d0, r2, r3
 8001dfe:	f007 f8e3 	bl	8008fc8 <ceil>
 8001e02:	ec53 2b10 	vmov	r2, r3, d0
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fecd 	bl	8000ba8 <__aeabi_d2uiz>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	81fb      	strh	r3, [r7, #14]
            if (res > index) {
 8001e12:	89fa      	ldrh	r2, [r7, #14]
 8001e14:	8afb      	ldrh	r3, [r7, #22]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d92e      	bls.n	8001e78 <E_25LCXX_validate_page_boundary+0xec>
                startAdress = (uint16_t) (pHandle->iPage_size * (index - 1));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	8afb      	ldrh	r3, [r7, #22]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	fb12 f303 	smulbb	r3, r2, r3
 8001e2c:	81bb      	strh	r3, [r7, #12]
                endAddress = (startAdress + pHandle->iPage_size) - 1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	817b      	strh	r3, [r7, #10]
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LCxx: failed to execute, attempt to write beyond page boundary\r\n");
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	480f      	ldr	r0, [pc, #60]	; (8001e84 <E_25LCXX_validate_page_boundary+0xf8>)
 8001e46:	4798      	blx	r3
                pHandle->pDebug_print("25LCxx: page %d start address:%d end address:%d\r\n", index, startAdress, endAddress);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69dc      	ldr	r4, [r3, #28]
 8001e4c:	8af9      	ldrh	r1, [r7, #22]
 8001e4e:	89ba      	ldrh	r2, [r7, #12]
 8001e50:	897b      	ldrh	r3, [r7, #10]
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <E_25LCXX_validate_page_boundary+0xfc>)
 8001e54:	47a0      	blx	r4
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001e56:	2301      	movs	r3, #1
 8001e58:	e010      	b.n	8001e7c <E_25LCXX_validate_page_boundary+0xf0>
    for (index = 0; index < (e_25LCxx_basic_get_eeprom_legth() / pHandle->iPage_size); index++) {
 8001e5a:	8afb      	ldrh	r3, [r7, #22]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	82fb      	strh	r3, [r7, #22]
 8001e60:	8afc      	ldrh	r4, [r7, #22]
 8001e62:	f000 fb25 	bl	80024b0 <e_25LCxx_basic_get_eeprom_legth>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e72:	429c      	cmp	r4, r3
 8001e74:	dba1      	blt.n	8001dba <E_25LCXX_validate_page_boundary+0x2e>
 8001e76:	e000      	b.n	8001e7a <E_25LCXX_validate_page_boundary+0xee>
            }
            break;
 8001e78:	bf00      	nop
        }
    }

    return 0; /**< page boundary validated */
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	0800979c 	.word	0x0800979c
 8001e88:	080097e0 	.word	0x080097e0

08001e8c <E_25LCxxx_validate_page>:
 *          - 1 failed page (out of range)
 *           - 2 handle is NULL
 *          - 3 handle is not initialized
 * @note    none
 */
uint8_t E_25LCxxx_validate_page(E_25LCxx_handle_t *pHandle, uint16_t u16Page, uint16_t *pStartAddr) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	460b      	mov	r3, r1
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	817b      	strh	r3, [r7, #10]
    uint16_t max_page; /**< maximum number of pages starting from page 1 */

    if (pHandle == NULL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <E_25LCxxx_validate_page+0x18>
        return 2; /**< return failed error */
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e0d3      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
    if (pHandle->u8Inited != 1)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <E_25LCxxx_validate_page+0x26>
        return 3; /**< return failed error */
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0cc      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>

    switch (pHandle->u8Device_type) {
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	f200 80a6 	bhi.w	800200c <E_25LCxxx_validate_page+0x180>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <E_25LCxxx_validate_page+0x3c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ee5 	.word	0x08001ee5
 8001ecc:	08001f11 	.word	0x08001f11
 8001ed0:	08001f3b 	.word	0x08001f3b
 8001ed4:	08001f65 	.word	0x08001f65
 8001ed8:	08001f8f 	.word	0x08001f8f
 8001edc:	08001fb9 	.word	0x08001fb9
 8001ee0:	08001fe3 	.word	0x08001fe3

        case E_25LC080x_VARIANT:
        {
            max_page = ((E_25LC080x_MAX_ADD + 1) / pHandle->iPage_size);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ef4:	82fb      	strh	r3, [r7, #22]
            if (u16Page > max_page) {
 8001ef6:	897a      	ldrh	r2, [r7, #10]
 8001ef8:	8afb      	ldrh	r3, [r7, #22]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	f240 808c 	bls.w	8002018 <E_25LCxxx_validate_page+0x18c>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC080x: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	8979      	ldrh	r1, [r7, #10]
 8001f06:	8afa      	ldrh	r2, [r7, #22]
 8001f08:	4852      	ldr	r0, [pc, #328]	; (8002054 <E_25LCxxx_validate_page+0x1c8>)
 8001f0a:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e09d      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
            break;
        }

        case E_25LC160x_VARIANT:
        {
            max_page = ((E_25LC160x_MAX_ADD + 1) / pHandle->iPage_size);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f16:	461a      	mov	r2, r3
 8001f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f20:	82fb      	strh	r3, [r7, #22]
            if (u16Page > max_page) {
 8001f22:	897a      	ldrh	r2, [r7, #10]
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d978      	bls.n	800201c <E_25LCxxx_validate_page+0x190>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC160x: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	8979      	ldrh	r1, [r7, #10]
 8001f30:	8afa      	ldrh	r2, [r7, #22]
 8001f32:	4849      	ldr	r0, [pc, #292]	; (8002058 <E_25LCxxx_validate_page+0x1cc>)
 8001f34:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001f36:	2301      	movs	r3, #1
 8001f38:	e088      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
            break;
        }

        case E_25LC320x_VARIANT:
        {
            max_page = ((E_25LC320x_MAX_ADD + 1) / pHandle->iPage_size);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f40:	461a      	mov	r2, r3
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f4a:	82fb      	strh	r3, [r7, #22]
            if (u16Page > max_page) {
 8001f4c:	897a      	ldrh	r2, [r7, #10]
 8001f4e:	8afb      	ldrh	r3, [r7, #22]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d965      	bls.n	8002020 <E_25LCxxx_validate_page+0x194>
#ifdef E_25LCXX_DEBUG_MODE
                pHandle->pDebug_print("25LC320x: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	8979      	ldrh	r1, [r7, #10]
 8001f5a:	8afa      	ldrh	r2, [r7, #22]
 8001f5c:	483f      	ldr	r0, [pc, #252]	; (800205c <E_25LCxxx_validate_page+0x1d0>)
 8001f5e:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                return 1; /**< return failed error **/
 8001f60:	2301      	movs	r3, #1
 8001f62:	e073      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
            }
            break;

            case E_25LC640x_VARIANT:
            {
                max_page = ((E_25LC640x_MAX_ADD + 1) / pHandle->iPage_size);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f74:	82fb      	strh	r3, [r7, #22]
                if (u16Page > max_page) {
 8001f76:	897a      	ldrh	r2, [r7, #10]
 8001f78:	8afb      	ldrh	r3, [r7, #22]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d952      	bls.n	8002024 <E_25LCxxx_validate_page+0x198>
#ifdef E_25LCXX_DEBUG_MODE
                    pHandle->pDebug_print("25LC640x: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	8979      	ldrh	r1, [r7, #10]
 8001f84:	8afa      	ldrh	r2, [r7, #22]
 8001f86:	4836      	ldr	r0, [pc, #216]	; (8002060 <E_25LCxxx_validate_page+0x1d4>)
 8001f88:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                    return 1; /**< return failed error **/
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e05e      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
                break;
            }

            case E_25LC128_VARIANT:
            {
                max_page = ((E_25LC128_MAX_ADD + 1) / pHandle->iPage_size);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f9e:	82fb      	strh	r3, [r7, #22]
                if (u16Page > max_page) {
 8001fa0:	897a      	ldrh	r2, [r7, #10]
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d93f      	bls.n	8002028 <E_25LCxxx_validate_page+0x19c>
#ifdef E_25LCXX_DEBUG_MODE
                    pHandle->pDebug_print("25LC128: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	8979      	ldrh	r1, [r7, #10]
 8001fae:	8afa      	ldrh	r2, [r7, #22]
 8001fb0:	482c      	ldr	r0, [pc, #176]	; (8002064 <E_25LCxxx_validate_page+0x1d8>)
 8001fb2:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                    return 1; /**< return failed error **/
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e049      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
                break;
            }

            case E_25LC256_VARIANT:
            {
                max_page = ((E_25LC256_MAX_ADD + 1) / pHandle->iPage_size);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8001fc8:	82fb      	strh	r3, [r7, #22]
                if (u16Page > max_page) {
 8001fca:	897a      	ldrh	r2, [r7, #10]
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d92c      	bls.n	800202c <E_25LCxxx_validate_page+0x1a0>
#ifdef E_25LCXX_DEBUG_MODE
                    pHandle->pDebug_print("25LC256: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	8afa      	ldrh	r2, [r7, #22]
 8001fda:	4823      	ldr	r0, [pc, #140]	; (8002068 <E_25LCxxx_validate_page+0x1dc>)
 8001fdc:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                    return 1; /**< return failed error **/
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e034      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
                break;
            }

            case E_25LC512_VARIANT:
            {
                max_page = ((E_25LC512_MAX_ADD + 1) / pHandle->iPage_size);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fee:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ff2:	82fb      	strh	r3, [r7, #22]
                if (u16Page > max_page) {
 8001ff4:	897a      	ldrh	r2, [r7, #10]
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d919      	bls.n	8002030 <E_25LCxxx_validate_page+0x1a4>
#ifdef E_25LCXX_DEBUG_MODE
                    pHandle->pDebug_print("25LC512: page %d is greater than max page number %d\r\n", u16Page, max_page);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	8afa      	ldrh	r2, [r7, #22]
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <E_25LCxxx_validate_page+0x1e0>)
 8002006:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
                    return 1; /**< return failed error **/
 8002008:	2301      	movs	r3, #1
 800200a:	e01f      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
                break;
            }

            default:
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx:failed to validate page device type unknown\r\n");
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4817      	ldr	r0, [pc, #92]	; (8002070 <E_25LCxxx_validate_page+0x1e4>)
 8002012:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return failed error **/
 8002014:	2301      	movs	r3, #1
 8002016:	e019      	b.n	800204c <E_25LCxxx_validate_page+0x1c0>
            break;
 8002018:	bf00      	nop
 800201a:	e00a      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
            break;
 800201c:	bf00      	nop
 800201e:	e008      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
            break;
 8002020:	bf00      	nop
 8002022:	e006      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
                break;
 8002024:	bf00      	nop
 8002026:	e004      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
                break;
 8002028:	bf00      	nop
 800202a:	e002      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
                break;
 800202c:	bf00      	nop
 800202e:	e000      	b.n	8002032 <E_25LCxxx_validate_page+0x1a6>
                break;
 8002030:	bf00      	nop
            break;
        }
    }
    *pStartAddr = (uint16_t) (pHandle->iPage_size * (u16Page - 1));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002038:	b29a      	uxth	r2, r3
 800203a:	897b      	ldrh	r3, [r7, #10]
 800203c:	3b01      	subs	r3, #1
 800203e:	b29b      	uxth	r3, r3
 8002040:	fb12 f303 	smulbb	r3, r2, r3
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	801a      	strh	r2, [r3, #0]

    return 0; /**< address validated */
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	08009814 	.word	0x08009814
 8002058:	0800984c 	.word	0x0800984c
 800205c:	08009884 	.word	0x08009884
 8002060:	080098bc 	.word	0x080098bc
 8002064:	080098f4 	.word	0x080098f4
 8002068:	0800992c 	.word	0x0800992c
 800206c:	08009964 	.word	0x08009964
 8002070:	0800999c 	.word	0x0800999c

08002074 <E_25LCxx_get_legth>:
 *            - 1 failed get length
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t E_25LCxx_get_legth(E_25LCxx_handle_t *pHandle, E_25LCxx_max_addr_t *pLength) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    uint8_t res;
    if (pHandle == NULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <E_25LCxx_get_legth+0x14>
        return 2; /**< return failed error */
 8002084:	2302      	movs	r3, #2
 8002086:	e046      	b.n	8002116 <E_25LCxx_get_legth+0xa2>
    if (pHandle->u8Inited != 1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800208e:	2b01      	cmp	r3, #1
 8002090:	d001      	beq.n	8002096 <E_25LCxx_get_legth+0x22>
        return 3; /**< return failed error */
 8002092:	2303      	movs	r3, #3
 8002094:	e03f      	b.n	8002116 <E_25LCxx_get_legth+0xa2>

    switch (pHandle->u8Device_type) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209c:	3b01      	subs	r3, #1
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d832      	bhi.n	8002108 <E_25LCxx_get_legth+0x94>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <E_25LCxx_get_legth+0x34>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020c5 	.word	0x080020c5
 80020ac:	080020cf 	.word	0x080020cf
 80020b0:	080020d9 	.word	0x080020d9
 80020b4:	080020e3 	.word	0x080020e3
 80020b8:	080020ed 	.word	0x080020ed
 80020bc:	080020f7 	.word	0x080020f7
 80020c0:	08002101 	.word	0x08002101
        case E_25LC080x_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC080x_MAX_ADD + 1);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ca:	801a      	strh	r2, [r3, #0]
            break;
 80020cc:	e022      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC160x_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC160x_MAX_ADD + 1);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020d4:	801a      	strh	r2, [r3, #0]
            break;
 80020d6:	e01d      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC320x_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC320x_MAX_ADD + 1);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020de:	801a      	strh	r2, [r3, #0]
            break;
 80020e0:	e018      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC640x_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC640x_MAX_ADD + 1);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e8:	801a      	strh	r2, [r3, #0]
            break;
 80020ea:	e013      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC128_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC128_MAX_ADD + 1);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020f2:	801a      	strh	r2, [r3, #0]
            break;
 80020f4:	e00e      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC256_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC256_MAX_ADD + 1);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020fc:	801a      	strh	r2, [r3, #0]
            break;
 80020fe:	e009      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        case E_25LC512_VARIANT:
            *pLength = (E_25LCxx_max_addr_t) (E_25LC512_MAX_ADD + 1);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	801a      	strh	r2, [r3, #0]
            break;
 8002106:	e005      	b.n	8002114 <E_25LCxx_get_legth+0xa0>

        default:
#ifdef E_25LCXX_DEBUG_MODE
            pHandle->pDebug_print("25LCxx:invalid device type\r\n");
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4804      	ldr	r0, [pc, #16]	; (8002120 <E_25LCxx_get_legth+0xac>)
 800210e:	4798      	blx	r3
#endif // E_25LCXX_DEBUG_MODE
            return 1; /**< return failed error **/
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <E_25LCxx_get_legth+0xa2>
            break;
    }
    return 0; /**< return success */
 8002114:	2300      	movs	r3, #0

}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	080099d4 	.word	0x080099d4

08002124 <E_25LCxx_info>:
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */

uint8_t E_25LCxx_info(E_25LCxx_info_t *pInfo) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    if (pInfo == NULL) /**< check if handle is null */ {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <E_25LCxx_info+0x12>
        return 2; /**<failed, return error */
 8002132:	2302      	movs	r3, #2
 8002134:	e02b      	b.n	800218e <E_25LCxx_info+0x6a>
    }
    memset(pInfo, 0, sizeof (E_25LCxx_info_t)); /**< initialize 25LCxxx info structure */
 8002136:	2244      	movs	r2, #68	; 0x44
 8002138:	2100      	movs	r1, #0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f004 f83a 	bl	80061b4 <memset>
    strncpy(pInfo->chip_name, CHIP_NAME, 10); /**< copy chip name */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	220a      	movs	r2, #10
 8002144:	4914      	ldr	r1, [pc, #80]	; (8002198 <E_25LCxx_info+0x74>)
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fca6 	bl	8006a98 <strncpy>
    strncpy(pInfo->interface, INTERFACE, 5); /**< copy interface name */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3323      	adds	r3, #35	; 0x23
 8002150:	2205      	movs	r2, #5
 8002152:	4912      	ldr	r1, [pc, #72]	; (800219c <E_25LCxx_info+0x78>)
 8002154:	4618      	mov	r0, r3
 8002156:	f004 fc9f 	bl	8006a98 <strncpy>
    strncpy(pInfo->manufacturer_name, MANUFACTURER_NAME, 25); /**< copy manufacturer name */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	330a      	adds	r3, #10
 800215e:	2219      	movs	r2, #25
 8002160:	490f      	ldr	r1, [pc, #60]	; (80021a0 <E_25LCxx_info+0x7c>)
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fc98 	bl	8006a98 <strncpy>
    pInfo->supply_voltage_max_v = SUPPLY_VOLTAGE_MAX; /**< set minimal supply voltage */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <E_25LCxx_info+0x80>)
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
    pInfo->supply_voltage_min_v = SUPPLY_VOLTAGE_MIN; /**< set maximum supply voltage */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <E_25LCxx_info+0x84>)
 8002172:	62da      	str	r2, [r3, #44]	; 0x2c
    pInfo->max_current_ma = MAX_CURRENT; /**< set maximum current */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <E_25LCxx_info+0x88>)
 8002178:	635a      	str	r2, [r3, #52]	; 0x34
    pInfo->temperature_max = TEMPERATURE_MAX; /**< set minimal temperature */
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <E_25LCxx_info+0x8c>)
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
    pInfo->temperature_min = TEMPERATURE_MIN; /**< set maximum temperature */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a0c      	ldr	r2, [pc, #48]	; (80021b4 <E_25LCxx_info+0x90>)
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
    pInfo->driver_version = DRIVER_VERSION; /**< set driver version */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <E_25LCxx_info+0x94>)
 800218a:	641a      	str	r2, [r3, #64]	; 0x40

    return 0; /**< return success */
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	080099f4 	.word	0x080099f4
 800219c:	080099fc 	.word	0x080099fc
 80021a0:	08009a00 	.word	0x08009a00
 80021a4:	40b00000 	.word	0x40b00000
 80021a8:	40200000 	.word	0x40200000
 80021ac:	41200000 	.word	0x41200000
 80021b0:	42fa0000 	.word	0x42fa0000
 80021b4:	c2200000 	.word	0xc2200000
 80021b8:	44964000 	.word	0x44964000

080021bc <e_25LCxx_basic_initialize>:
 *          - 1 initialize failed
 * @note    none
 */

uint8_t e_25LCxx_basic_initialize(E_25LCxx_variant_t DeviceVariant, E_25LCxx_page_size_t pageSize)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
    uint8_t res;

    /*link driver functions */
    DRIVER_25LCXX_LINK_INIT(&e_25LCxx_handler, E_25LCxx_handle_t);
 80021cc:	2224      	movs	r2, #36	; 0x24
 80021ce:	2100      	movs	r1, #0
 80021d0:	4836      	ldr	r0, [pc, #216]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021d2:	f003 ffef 	bl	80061b4 <memset>
    DRIVER_25LCXX_LINK_SPI_INIT(&e_25LCxx_handler, e_25LCxx_interface_spi_init);
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021d8:	4a35      	ldr	r2, [pc, #212]	; (80022b0 <e_25LCxx_basic_initialize+0xf4>)
 80021da:	601a      	str	r2, [r3, #0]
    DRIVER_25LCXX_LINK_SPI_DEINIT(&e_25LCxx_handler, e_25LCxx_interface_spi_deinit);
 80021dc:	4b33      	ldr	r3, [pc, #204]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021de:	4a35      	ldr	r2, [pc, #212]	; (80022b4 <e_25LCxx_basic_initialize+0xf8>)
 80021e0:	605a      	str	r2, [r3, #4]
    DRIVER_25LCXX_LINK_SPI_READ(&e_25LCxx_handler, e_25LCxx_interface_spi_read);
 80021e2:	4b32      	ldr	r3, [pc, #200]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021e4:	4a34      	ldr	r2, [pc, #208]	; (80022b8 <e_25LCxx_basic_initialize+0xfc>)
 80021e6:	60da      	str	r2, [r3, #12]
    DRIVER_25LCXX_LINK_SPI_WRITE(&e_25LCxx_handler, e_25LCxx_interface_spi_write);
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021ea:	4a34      	ldr	r2, [pc, #208]	; (80022bc <e_25LCxx_basic_initialize+0x100>)
 80021ec:	609a      	str	r2, [r3, #8]
    DRIVER_25LCXX_LINK_CHIP_SELECT(&e_25LCxx_handler, e_25LCxx_interface_chip_select);
 80021ee:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021f0:	4a33      	ldr	r2, [pc, #204]	; (80022c0 <e_25LCxx_basic_initialize+0x104>)
 80021f2:	615a      	str	r2, [r3, #20]
    DRIVER_25LCXX_LINK_GPIO_WRITE(&e_25LCxx_handler, e_25LCxx_interface_gpio_write);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021f6:	4a33      	ldr	r2, [pc, #204]	; (80022c4 <e_25LCxx_basic_initialize+0x108>)
 80021f8:	611a      	str	r2, [r3, #16]
    DRIVER_25LCXX_LINK_DEBUG_PRINT(&e_25LCxx_handler, e_25LCxx_interface_debug_print);
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 80021fc:	4a32      	ldr	r2, [pc, #200]	; (80022c8 <e_25LCxx_basic_initialize+0x10c>)
 80021fe:	61da      	str	r2, [r3, #28]
    DRIVER_25LCXX_LINK_DELAY_MS(&e_25LCxx_handler, e_25LCxx_interface_delay_ms);
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <e_25LCxx_basic_initialize+0x110>)
 8002204:	619a      	str	r2, [r3, #24]

    /*25LCxx initialize*/
    res = E_25LCxx_init(&e_25LCxx_handler);
 8002206:	4829      	ldr	r0, [pc, #164]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002208:	f7fe fea8 	bl	8000f5c <E_25LCxx_init>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
    if(res)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <e_25LCxx_basic_initialize+0x64>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx: initialize failed\r\n");
 8002216:	482e      	ldr	r0, [pc, #184]	; (80022d0 <e_25LCxx_basic_initialize+0x114>)
 8002218:	f000 fa3b 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 800221c:	2301      	movs	r3, #1
 800221e:	e040      	b.n	80022a2 <e_25LCxx_basic_initialize+0xe6>
    }

    res = E_25LCxx_set_variant(&e_25LCxx_handler, DeviceVariant);
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	4619      	mov	r1, r3
 8002224:	4821      	ldr	r0, [pc, #132]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002226:	f7fe ff13 	bl	8001050 <E_25LCxx_set_variant>
 800222a:	4603      	mov	r3, r0
 800222c:	73fb      	strb	r3, [r7, #15]
    if(res)
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <e_25LCxx_basic_initialize+0x82>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx: failed to set device type\r\n");
 8002234:	4827      	ldr	r0, [pc, #156]	; (80022d4 <e_25LCxx_basic_initialize+0x118>)
 8002236:	f000 fa2c 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 800223a:	2301      	movs	r3, #1
 800223c:	e031      	b.n	80022a2 <e_25LCxx_basic_initialize+0xe6>
    }

    res = E_25LCxx_set_page_size(&e_25LCxx_handler, pageSize);
 800223e:	79bb      	ldrb	r3, [r7, #6]
 8002240:	4619      	mov	r1, r3
 8002242:	481a      	ldr	r0, [pc, #104]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002244:	f7fe ff2e 	bl	80010a4 <E_25LCxx_set_page_size>
 8002248:	4603      	mov	r3, r0
 800224a:	73fb      	strb	r3, [r7, #15]
    if(res)
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <e_25LCxx_basic_initialize+0xa0>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx:failed to set page size\r\n");
 8002252:	4821      	ldr	r0, [pc, #132]	; (80022d8 <e_25LCxx_basic_initialize+0x11c>)
 8002254:	f000 fa1d 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 8002258:	2301      	movs	r3, #1
 800225a:	e022      	b.n	80022a2 <e_25LCxx_basic_initialize+0xe6>
    }

    res = E_25LCxx_set_bp_status(&e_25LCxx_handler, E_25LCxx_BP01);
 800225c:	2101      	movs	r1, #1
 800225e:	4813      	ldr	r0, [pc, #76]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002260:	f7fe ff82 	bl	8001168 <E_25LCxx_set_bp_status>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
    if(res)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <e_25LCxx_basic_initialize+0xbc>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx:failed to set block protect status\r\n");
 800226e:	481b      	ldr	r0, [pc, #108]	; (80022dc <e_25LCxx_basic_initialize+0x120>)
 8002270:	f000 fa0f 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 8002274:	2301      	movs	r3, #1
 8002276:	e014      	b.n	80022a2 <e_25LCxx_basic_initialize+0xe6>
    }
    e_25LCxx_interface_delay_ms(10);
 8002278:	200a      	movs	r0, #10
 800227a:	f000 f9ff 	bl	800267c <e_25LCxx_interface_delay_ms>
    res = E_25LCxx_set_write_protect_enable(&e_25LCxx_handler, E_25LCxx_BOOL_FALSE);
 800227e:	2100      	movs	r1, #0
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <e_25LCxx_basic_initialize+0xf0>)
 8002282:	f7ff f823 	bl	80012cc <E_25LCxx_set_write_protect_enable>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
    if(res)
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d004      	beq.n	800229a <e_25LCxx_basic_initialize+0xde>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx:failed to set write protect status\r\n");
 8002290:	4813      	ldr	r0, [pc, #76]	; (80022e0 <e_25LCxx_basic_initialize+0x124>)
 8002292:	f000 f9fe 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 8002296:	2301      	movs	r3, #1
 8002298:	e003      	b.n	80022a2 <e_25LCxx_basic_initialize+0xe6>
    }

    e_25LCxx_interface_delay_ms(10);                                                        /**< delay 10ms after initializing */
 800229a:	200a      	movs	r0, #10
 800229c:	f000 f9ee 	bl	800267c <e_25LCxx_interface_delay_ms>
    return 0;                                                                               /**< return success */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000210 	.word	0x20000210
 80022b0:	080025dd 	.word	0x080025dd
 80022b4:	080025ed 	.word	0x080025ed
 80022b8:	080025fd 	.word	0x080025fd
 80022bc:	08002623 	.word	0x08002623
 80022c0:	08002661 	.word	0x08002661
 80022c4:	08002649 	.word	0x08002649
 80022c8:	08002693 	.word	0x08002693
 80022cc:	0800267d 	.word	0x0800267d
 80022d0:	08009a18 	.word	0x08009a18
 80022d4:	08009a34 	.word	0x08009a34
 80022d8:	08009a58 	.word	0x08009a58
 80022dc:	08009a7c 	.word	0x08009a7c
 80022e0:	08009aa8 	.word	0x08009aa8

080022e4 <e_25LCxx_basic_write_byte>:
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t e_25LCxx_basic_write_byte(uint16_t u16Address, uint8_t *pBuffer, uint16_t u16Size)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	80fb      	strh	r3, [r7, #6]
 80022f0:	4613      	mov	r3, r2
 80022f2:	80bb      	strh	r3, [r7, #4]
    if(E_25LCxx_write_byte(&e_25LCxx_handler, u16Address, (uint8_t *)pBuffer, u16Size) != 0)
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	88f9      	ldrh	r1, [r7, #6]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	480a      	ldr	r0, [pc, #40]	; (8002324 <e_25LCxx_basic_write_byte+0x40>)
 80022fc:	f7ff f85e 	bl	80013bc <E_25LCxx_write_byte>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <e_25LCxx_basic_write_byte+0x26>
    {
        return 1;                                                                            /**< return failed error */
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <e_25LCxx_basic_write_byte+0x36>
    }

    if(e_25LCxx_basic_get_wip_status())                                                      /**< check write in progress status */
 800230a:	f000 f8e9 	bl	80024e0 <e_25LCxx_basic_get_wip_status>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <e_25LCxx_basic_write_byte+0x34>
    {
        return 1;                                                                            /**< return error */
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <e_25LCxx_basic_write_byte+0x36>
    }

    return 0;                                                                                /**< return success */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000210 	.word	0x20000210

08002328 <e_25LCxx_basic_put_byte>:
 *          - 0 success
 *          - 1 failed
 * @note    equivalent to eeprom.put on arduino
 */
uint8_t e_25LCxx_basic_put_byte(uint16_t u16Address, unsigned long long *pBuffer, uint16_t u16Size)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	4613      	mov	r3, r2
 8002336:	80bb      	strh	r3, [r7, #4]
    if(E_25LCXX_put_byte(&e_25LCxx_handler, u16Address, (unsigned long long *)pBuffer, u16Size) != NULL)
 8002338:	88bb      	ldrh	r3, [r7, #4]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	88f9      	ldrh	r1, [r7, #6]
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	4809      	ldr	r0, [pc, #36]	; (8002368 <e_25LCxx_basic_put_byte+0x40>)
 8002342:	f7ff f8cb 	bl	80014dc <E_25LCXX_put_byte>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <e_25LCxx_basic_put_byte+0x28>
    {
        return 1;                                                                            /**< return failed error */
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <e_25LCxx_basic_put_byte+0x38>
    }

    if(e_25LCxx_basic_get_wip_status())                                                      /**< check write in progress status */
 8002350:	f000 f8c6 	bl	80024e0 <e_25LCxx_basic_get_wip_status>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <e_25LCxx_basic_put_byte+0x36>
    {
        return 1;                                                                            /**< return error */
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <e_25LCxx_basic_put_byte+0x38>
    }

    return 0;                                                                                /**< return success */
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000210 	.word	0x20000210

0800236c <e_25LCxx_basic_read_byte>:
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t e_25LCxx_basic_read_byte(uint16_t u16Address, uint8_t *pBuffer, uint16_t u16Size)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	80fb      	strh	r3, [r7, #6]
 8002378:	4613      	mov	r3, r2
 800237a:	80bb      	strh	r3, [r7, #4]
    if(E_25LCxx_read_byte(&e_25LCxx_handler, u16Address, (uint8_t *)pBuffer, u16Size) != 0)        /**< begin reading process */
 800237c:	88bb      	ldrh	r3, [r7, #4]
 800237e:	88f9      	ldrh	r1, [r7, #6]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <e_25LCxx_basic_read_byte+0x30>)
 8002384:	f7ff f974 	bl	8001670 <E_25LCxx_read_byte>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <e_25LCxx_basic_read_byte+0x26>
    {
        return 1;                                                                                 /**< return failed error code */
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <e_25LCxx_basic_read_byte+0x28>
    }
    return 0;                                                                                     /**< return success */
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000210 	.word	0x20000210

080023a0 <e_25LCxx_basic_get_byte>:
 *          - 0 success
 *          - 1 failed
 * @note    equivalent to eeprom.get on Arduino
 */
uint8_t e_25LCxx_basic_get_byte(uint16_t u16Address, uint32_t *pBuffer, uint16_t u16Size)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	80fb      	strh	r3, [r7, #6]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80bb      	strh	r3, [r7, #4]
    if(E_25LCXX_get_byte(&e_25LCxx_handler, u16Address, (uint32_t *)pBuffer, u16Size) != 0)
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	88f9      	ldrh	r1, [r7, #6]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4806      	ldr	r0, [pc, #24]	; (80023d4 <e_25LCxx_basic_get_byte+0x34>)
 80023ba:	f7ff f9b9 	bl	8001730 <E_25LCXX_get_byte>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <e_25LCxx_basic_get_byte+0x28>
    {
        return 1;       /**< return error, read failed */
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <e_25LCxx_basic_get_byte+0x2a>
    }
    return 0;           /**< read successful */
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000210 	.word	0x20000210

080023d8 <e_25LCxx_basic_erase_page>:
 *          - 0 success
 *          - 1 failed
 * @note    Page erase instruction will erase all bits (FFh) inside the given page.
 */
uint8_t e_25LCxx_basic_erase_page(uint16_t u16Page)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
    uint16_t pageSize;

    if(E_25LCxx_erase_page(&e_25LCxx_handler, u16Page))                                       /**< begin erasing process */
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4619      	mov	r1, r3
 80023e6:	480a      	ldr	r0, [pc, #40]	; (8002410 <e_25LCxx_basic_erase_page+0x38>)
 80023e8:	f7ff fa44 	bl	8001874 <E_25LCxx_erase_page>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <e_25LCxx_basic_erase_page+0x1e>
    {
        return 1;                                                                            /**< return failed error */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <e_25LCxx_basic_erase_page+0x2e>
    }

    if(e_25LCxx_basic_get_wip_status())                                                      /**< check write in progress status */
 80023f6:	f000 f873 	bl	80024e0 <e_25LCxx_basic_get_wip_status>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <e_25LCxx_basic_erase_page+0x2c>
    {
        return 1;                                                                            /**< return error */
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <e_25LCxx_basic_erase_page+0x2e>
    }
    return 0;                                                                                /**< return success */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000210 	.word	0x20000210

08002414 <e_25LCxx_basic_erase_sector>:
 *          - 0 success
 *          - 1 failed
 * @note    sector erase instruction will erase all bits (FFh) inside the given sector address
 */
uint8_t e_25LCxx_basic_erase_sector(uint16_t u16StartAddr, uint16_t u16EndAddr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	460a      	mov	r2, r1
 800241e:	80fb      	strh	r3, [r7, #6]
 8002420:	4613      	mov	r3, r2
 8002422:	80bb      	strh	r3, [r7, #4]
    uint16_t addBuffer[2];
    uint16_t addrIndex;
    const uint8_t data = 0xff;
 8002424:	23ff      	movs	r3, #255	; 0xff
 8002426:	73fb      	strb	r3, [r7, #15]

    addBuffer[0] = u16StartAddr;
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	823b      	strh	r3, [r7, #16]
    addBuffer[1] = u16EndAddr;
 800242c:	88bb      	ldrh	r3, [r7, #4]
 800242e:	827b      	strh	r3, [r7, #18]


    if(e_25LCxx_handler.u8Device_type != E_25LC512_VARIANT)                                     /**< currently only the 25LC512 support chip erase command */
 8002430:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <e_25LCxx_basic_erase_sector+0x98>)
 8002432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002436:	2b07      	cmp	r3, #7
 8002438:	d021      	beq.n	800247e <e_25LCxx_basic_erase_sector+0x6a>
    {
        for(addrIndex = u16StartAddr; addrIndex < ( u16EndAddr + 1); addrIndex++)
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	82fb      	strh	r3, [r7, #22]
 800243e:	e016      	b.n	800246e <e_25LCxx_basic_erase_sector+0x5a>
        {
            if(E_25LCxx_check_bp_before_write(&e_25LCxx_handler, addrIndex) != 0)
 8002440:	8afb      	ldrh	r3, [r7, #22]
 8002442:	4619      	mov	r1, r3
 8002444:	4819      	ldr	r0, [pc, #100]	; (80024ac <e_25LCxx_basic_erase_sector+0x98>)
 8002446:	f7ff fb73 	bl	8001b30 <E_25LCxx_check_bp_before_write>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <e_25LCxx_basic_erase_sector+0x40>
			{
				return 1;
 8002450:	2301      	movs	r3, #1
 8002452:	e027      	b.n	80024a4 <e_25LCxx_basic_erase_sector+0x90>
			}
            if(e_25LCxx_basic_write_byte(addrIndex, (uint8_t *)&data, 1) != NULL)
 8002454:	f107 010f 	add.w	r1, r7, #15
 8002458:	8afb      	ldrh	r3, [r7, #22]
 800245a:	2201      	movs	r2, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff41 	bl	80022e4 <e_25LCxx_basic_write_byte>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <e_25LCxx_basic_erase_sector+0x64>
        for(addrIndex = u16StartAddr; addrIndex < ( u16EndAddr + 1); addrIndex++)
 8002468:	8afb      	ldrh	r3, [r7, #22]
 800246a:	3301      	adds	r3, #1
 800246c:	82fb      	strh	r3, [r7, #22]
 800246e:	88ba      	ldrh	r2, [r7, #4]
 8002470:	8afb      	ldrh	r3, [r7, #22]
 8002472:	429a      	cmp	r2, r3
 8002474:	d2e4      	bcs.n	8002440 <e_25LCxx_basic_erase_sector+0x2c>
 8002476:	e000      	b.n	800247a <e_25LCxx_basic_erase_sector+0x66>
            {
                break;
 8002478:	bf00      	nop
                return 1;           /**< return error */
            }
        }
        return 0;
 800247a:	2300      	movs	r3, #0
 800247c:	e012      	b.n	80024a4 <e_25LCxx_basic_erase_sector+0x90>
    }

    if(E_25LCxx_erase_sector(&e_25LCxx_handler, (uint16_t *)addBuffer))                      /**< begin erasing process */
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4619      	mov	r1, r3
 8002484:	4809      	ldr	r0, [pc, #36]	; (80024ac <e_25LCxx_basic_erase_sector+0x98>)
 8002486:	f7ff fad1 	bl	8001a2c <E_25LCxx_erase_sector>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <e_25LCxx_basic_erase_sector+0x80>
    {
        return 1;                                                                           /**< return failed error */
 8002490:	2301      	movs	r3, #1
 8002492:	e007      	b.n	80024a4 <e_25LCxx_basic_erase_sector+0x90>
    }

    if(e_25LCxx_basic_get_wip_status())                                                     /**< check write in progress status */
 8002494:	f000 f824 	bl	80024e0 <e_25LCxx_basic_get_wip_status>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <e_25LCxx_basic_erase_sector+0x8e>
    {
        return 1;                                                                           /**< return error */
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <e_25LCxx_basic_erase_sector+0x90>
    }
    return 0;                                                                               /**< return success */
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000210 	.word	0x20000210

080024b0 <e_25LCxx_basic_get_eeprom_legth>:
 * @return status code
 *          - 1 failed
 * @note    none
 */
uint32_t e_25LCxx_basic_get_eeprom_legth(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
    static uint32_t eeprom_size;
    if(E_25LCxx_get_legth(&e_25LCxx_handler, (uint16_t *)&eeprom_size))
 80024b4:	4907      	ldr	r1, [pc, #28]	; (80024d4 <e_25LCxx_basic_get_eeprom_legth+0x24>)
 80024b6:	4808      	ldr	r0, [pc, #32]	; (80024d8 <e_25LCxx_basic_get_eeprom_legth+0x28>)
 80024b8:	f7ff fddc 	bl	8002074 <E_25LCxx_get_legth>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <e_25LCxx_basic_get_eeprom_legth+0x1c>
    {
#ifdef E_25LCXX_DEBUG_MODE
        e_25LCxx_interface_debug_print("25LCxx: failed to get memory length\r\n");
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <e_25LCxx_basic_get_eeprom_legth+0x2c>)
 80024c4:	f000 f8e5 	bl	8002692 <e_25LCxx_interface_debug_print>
#endif // E_25LCXX_DEBUG_MODE
        return 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e001      	b.n	80024d0 <e_25LCxx_basic_get_eeprom_legth+0x20>
    }
    return eeprom_size;
 80024cc:	4b01      	ldr	r3, [pc, #4]	; (80024d4 <e_25LCxx_basic_get_eeprom_legth+0x24>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000234 	.word	0x20000234
 80024d8:	20000210 	.word	0x20000210
 80024dc:	08009ad4 	.word	0x08009ad4

080024e0 <e_25LCxx_basic_get_wip_status>:
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t e_25LCxx_basic_get_wip_status(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
    uint8_t writeInProgess_status;
    uint32_t timeOut;

    E_25LCxx_get_wip_status(&e_25LCxx_handler, &writeInProgess_status);                       /**< read write-in-progress status bit */
 80024e6:	1cfb      	adds	r3, r7, #3
 80024e8:	4619      	mov	r1, r3
 80024ea:	480e      	ldr	r0, [pc, #56]	; (8002524 <e_25LCxx_basic_get_wip_status+0x44>)
 80024ec:	f7fe fe04 	bl	80010f8 <E_25LCxx_get_wip_status>
    while((writeInProgess_status == _25LCxx_BUSY ) && (timeOut < WRITE_TIMEOUT))              /**< wait until writing process is complete */
 80024f0:	e00a      	b.n	8002508 <e_25LCxx_basic_get_wip_status+0x28>
    {
        if(E_25LCxx_get_wip_status(&e_25LCxx_handler, &writeInProgess_status) != 0)
 80024f2:	1cfb      	adds	r3, r7, #3
 80024f4:	4619      	mov	r1, r3
 80024f6:	480b      	ldr	r0, [pc, #44]	; (8002524 <e_25LCxx_basic_get_wip_status+0x44>)
 80024f8:	f7fe fdfe 	bl	80010f8 <E_25LCxx_get_wip_status>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10a      	bne.n	8002518 <e_25LCxx_basic_get_wip_status+0x38>
        {
            break;
            return 1;                                                                        /**< return failed to read the wip status bit */
        }
        timeOut++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3301      	adds	r3, #1
 8002506:	607b      	str	r3, [r7, #4]
    while((writeInProgess_status == _25LCxx_BUSY ) && (timeOut < WRITE_TIMEOUT))              /**< wait until writing process is complete */
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d105      	bne.n	800251a <e_25LCxx_basic_get_wip_status+0x3a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <e_25LCxx_basic_get_wip_status+0x48>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d9ed      	bls.n	80024f2 <e_25LCxx_basic_get_wip_status+0x12>
 8002516:	e000      	b.n	800251a <e_25LCxx_basic_get_wip_status+0x3a>
            break;
 8002518:	bf00      	nop
    }
    return 0;                                                                                /**< return success */
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000210 	.word	0x20000210
 8002528:	0001869f 	.word	0x0001869f

0800252c <e_25LCxx_basic_get_bp_status>:
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t e_25LCxx_basic_get_bp_status(E_25LCxx_block_protection_status_t *pBlock)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    if(E_25LCxx_get_bp_status(&e_25LCxx_handler, (uint8_t *)pBlock) != 0)
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4806      	ldr	r0, [pc, #24]	; (8002550 <e_25LCxx_basic_get_bp_status+0x24>)
 8002538:	f7fe fe8e 	bl	8001258 <E_25LCxx_get_bp_status>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <e_25LCxx_basic_get_bp_status+0x1a>
    {
        return 1;											 /**< return failed error */
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <e_25LCxx_basic_get_bp_status+0x1c>
    }
    return 0;                                                /**< return success */
 8002546:	2300      	movs	r3, #0

}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000210 	.word	0x20000210

08002554 <e_25LCxx_basic_get_memory_properties>:
 *          - 0 success
 *          - 1 failed
* @note		this routine reads the entire memory, assumes that address that reads 0xff are free
*/
uint8_t e_25LCxx_basic_get_memory_properties(E_25LCxx_max_addr_t *pMemorySize, uint16_t *pFree_space, uint16_t *pUsed_space)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	uint16_t index;
	static uint16_t counter = 0;
	static uint8_t dataRead = 0;

	for(index = 0; index < e_25LCxx_basic_get_eeprom_legth(); index++){
 8002560:	2300      	movs	r3, #0
 8002562:	82fb      	strh	r3, [r7, #22]
 8002564:	e017      	b.n	8002596 <e_25LCxx_basic_get_memory_properties+0x42>
		if(e_25LCxx_basic_read_byte(index, (uint8_t *)&dataRead, 1) != 0){
 8002566:	8afb      	ldrh	r3, [r7, #22]
 8002568:	2201      	movs	r2, #1
 800256a:	491a      	ldr	r1, [pc, #104]	; (80025d4 <e_25LCxx_basic_get_memory_properties+0x80>)
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff fefd 	bl	800236c <e_25LCxx_basic_read_byte>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <e_25LCxx_basic_get_memory_properties+0x28>
			return 1;			/**< failed to read memory address*/
 8002578:	2301      	movs	r3, #1
 800257a:	e027      	b.n	80025cc <e_25LCxx_basic_get_memory_properties+0x78>
		}
		if(dataRead == 0xff){
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <e_25LCxx_basic_get_memory_properties+0x80>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2bff      	cmp	r3, #255	; 0xff
 8002582:	d105      	bne.n	8002590 <e_25LCxx_basic_get_memory_properties+0x3c>
			counter++;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <e_25LCxx_basic_get_memory_properties+0x84>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <e_25LCxx_basic_get_memory_properties+0x84>)
 800258e:	801a      	strh	r2, [r3, #0]
	for(index = 0; index < e_25LCxx_basic_get_eeprom_legth(); index++){
 8002590:	8afb      	ldrh	r3, [r7, #22]
 8002592:	3301      	adds	r3, #1
 8002594:	82fb      	strh	r3, [r7, #22]
 8002596:	8afc      	ldrh	r4, [r7, #22]
 8002598:	f7ff ff8a 	bl	80024b0 <e_25LCxx_basic_get_eeprom_legth>
 800259c:	4603      	mov	r3, r0
 800259e:	429c      	cmp	r4, r3
 80025a0:	d3e1      	bcc.n	8002566 <e_25LCxx_basic_get_memory_properties+0x12>
		}
	}
    *pMemorySize = e_25LCxx_basic_get_eeprom_legth();
 80025a2:	f7ff ff85 	bl	80024b0 <e_25LCxx_basic_get_eeprom_legth>
 80025a6:	4603      	mov	r3, r0
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	801a      	strh	r2, [r3, #0]
	*pFree_space = counter;
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <e_25LCxx_basic_get_memory_properties+0x84>)
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	801a      	strh	r2, [r3, #0]
	*pUsed_space = e_25LCxx_basic_get_eeprom_legth() - counter;
 80025b6:	f7ff ff7b 	bl	80024b0 <e_25LCxx_basic_get_eeprom_legth>
 80025ba:	4603      	mov	r3, r0
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <e_25LCxx_basic_get_memory_properties+0x84>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	801a      	strh	r2, [r3, #0]

	return 0;		/**< success */
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	20000238 	.word	0x20000238
 80025d8:	2000023a 	.word	0x2000023a

080025dc <e_25LCxx_interface_spi_init>:
*         - 0 success
*         - 1 spi init failed
* @note   none
*/
uint8_t e_25LCxx_interface_spi_init(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
    /*call your spi initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0;      /**< return success */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <e_25LCxx_interface_spi_deinit>:
 * @return status code
 *          - 0 success
 *          - 1 spi deinit fail
 */
uint8_t e_25LCxx_interface_spi_deinit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
    /*call your spi deinitialize function here*/
    /*user code begin */

    /*user code end*/
    return 0;      /**< return success */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <e_25LCxx_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t e_25LCxx_interface_spi_read(uint16_t u16Reg, uint32_t *pbuf, uint16_t u16Len)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	80fb      	strh	r3, [r7, #6]
 8002608:	4613      	mov	r3, r2
 800260a:	80bb      	strh	r3, [r7, #4]
    /*call your spi read function here*/
    /*user code begin */
	spi_read(u16Reg, pbuf, u16Len);
 800260c:	88ba      	ldrh	r2, [r7, #4]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 faee 	bl	8002bf4 <spi_read>
    /*user code end*/
    return 0;      /**< return success */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <e_25LCxx_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t e_25LCxx_interface_spi_write(uint16_t u16Reg, uint32_t *pbuf, uint16_t u16Len)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	6039      	str	r1, [r7, #0]
 800262c:	80fb      	strh	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	80bb      	strh	r3, [r7, #4]
    /*call your spi write function here*/
    /*user code begin */
	spi_write(u16Reg, pbuf, u16Len);
 8002632:	88ba      	ldrh	r2, [r7, #4]
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	6839      	ldr	r1, [r7, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fabb 	bl	8002bb4 <spi_write>
    /*user code end*/
    return 0;      /**< return success */
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <e_25LCxx_interface_gpio_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write gpio
 */
uint8_t e_25LCxx_interface_gpio_write(uint8_t u8State)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
    /*call your gpio write function here*/
    /*user code begin */

    /*user code end*/
    return 0;       /**< return success */
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <e_25LCxx_interface_chip_select>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write gpio
 */
uint8_t e_25LCxx_interface_chip_select(uint8_t u8State)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
    /*call your spi chip select function here*/
    /*user code begin */
	spi_write_gpio_cs(u8State);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fafb 	bl	8002c68 <spi_write_gpio_cs>
    /*user code end*/
    return 0;      /**< return success */
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <e_25LCxx_interface_delay_ms>:
 * @brief  This function interface delay ms
 * @param[in] u32Ms is the time delay in milli seconds
 * @note      none
 */
void e_25LCxx_interface_delay_ms(uint32_t u32Ms)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
    /*call your delay function here*/
    /*user code begin */
    HAL_Delay(u32Ms);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fd65 	bl	8003154 <HAL_Delay>
    /*user code end*/

}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <e_25LCxx_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void e_25LCxx_interface_debug_print(const char *const fmt, ...)
{
 8002692:	b40f      	push	{r0, r1, r2, r3}
 8002694:	b580      	push	{r7, lr}
 8002696:	b0c2      	sub	sp, #264	; 0x108
 8002698:	af00      	add	r7, sp, #0
#ifdef E_25LCXX_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a2:	2100      	movs	r1, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fd85 	bl	80061b4 <memset>
    va_start(args, fmt);
 80026aa:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80026ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026b6:	601a      	str	r2, [r3, #0]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
 80026b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026c0:	f107 0008 	add.w	r0, r7, #8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80026ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ce:	f004 fa21 	bl	8006b14 <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd fd7a 	bl	80001d0 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026e4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80026e8:	701a      	strb	r2, [r3, #0]
    uart_transmit((char *const)str, len);
 80026ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80026ee:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fa9f 	bl	8002c40 <uart_transmit>

    /*user code end*/
#endif
}
 8002702:	bf00      	nop
 8002704:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800270e:	b004      	add	sp, #16
 8002710:	4770      	bx	lr
	...

08002714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
   demo.state = DEMO_IDLE;
 800271a:	4b82      	ldr	r3, [pc, #520]	; (8002924 <main+0x210>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002720:	f000 fca3 	bl	800306a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002724:	f000 f93c 	bl	80029a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002728:	f000 f9ee 	bl	8002b08 <MX_GPIO_Init>
  MX_SPI1_Init();
 800272c:	f000 f97e 	bl	8002a2c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002730:	f000 f9ba 	bl	8002aa8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  e_25LCxx_basic_initialize(E_25LC160x_VARIANT, E_25LCXX_PAGE_SIZE_16_BYTE);
 8002734:	2110      	movs	r1, #16
 8002736:	2002      	movs	r0, #2
 8002738:	f7ff fd40 	bl	80021bc <e_25LCxx_basic_initialize>
  E_25LCxx_info(&e_25LCxxInfo);
 800273c:	487a      	ldr	r0, [pc, #488]	; (8002928 <main+0x214>)
 800273e:	f7ff fcf1 	bl	8002124 <E_25LCxx_info>

  e_25LCxx_interface_debug_print("Chip Name: \t%s\r\n", e_25LCxxInfo.chip_name);
 8002742:	4979      	ldr	r1, [pc, #484]	; (8002928 <main+0x214>)
 8002744:	4879      	ldr	r0, [pc, #484]	; (800292c <main+0x218>)
 8002746:	f7ff ffa4 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Manufacture: \t%s\r\n", e_25LCxxInfo.manufacturer_name);
 800274a:	4979      	ldr	r1, [pc, #484]	; (8002930 <main+0x21c>)
 800274c:	4879      	ldr	r0, [pc, #484]	; (8002934 <main+0x220>)
 800274e:	f7ff ffa0 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Interface: \t%s\r\n", e_25LCxxInfo.interface);
 8002752:	4979      	ldr	r1, [pc, #484]	; (8002938 <main+0x224>)
 8002754:	4879      	ldr	r0, [pc, #484]	; (800293c <main+0x228>)
 8002756:	f7ff ff9c 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Supply Volt Max: \t%.1fV\r\n", e_25LCxxInfo.supply_voltage_max_v);
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <main+0x214>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fef2 	bl	8000548 <__aeabi_f2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4875      	ldr	r0, [pc, #468]	; (8002940 <main+0x22c>)
 800276a:	f7ff ff92 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Supply Volt Min: \t%.1fV\r\n", e_25LCxxInfo.supply_voltage_min_v);
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <main+0x214>)
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fee8 	bl	8000548 <__aeabi_f2d>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4871      	ldr	r0, [pc, #452]	; (8002944 <main+0x230>)
 800277e:	f7ff ff88 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Maximum Current: \t%.1fmA\r\n", e_25LCxxInfo.max_current_ma);
 8002782:	4b69      	ldr	r3, [pc, #420]	; (8002928 <main+0x214>)
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fede 	bl	8000548 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	486d      	ldr	r0, [pc, #436]	; (8002948 <main+0x234>)
 8002792:	f7ff ff7e 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Temperature Max: \t%.1fC\r\n", e_25LCxxInfo.temperature_max);
 8002796:	4b64      	ldr	r3, [pc, #400]	; (8002928 <main+0x214>)
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fed4 	bl	8000548 <__aeabi_f2d>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4869      	ldr	r0, [pc, #420]	; (800294c <main+0x238>)
 80027a6:	f7ff ff74 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Temperature Min: \t%.1fC\r\n", e_25LCxxInfo.temperature_min);
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <main+0x214>)
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd feca 	bl	8000548 <__aeabi_f2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4865      	ldr	r0, [pc, #404]	; (8002950 <main+0x23c>)
 80027ba:	f7ff ff6a 	bl	8002692 <e_25LCxx_interface_debug_print>
  e_25LCxx_interface_debug_print("Driver Version: \tV%.1f.%.2d\r\n", (e_25LCxxInfo.driver_version /1000), (uint8_t)(e_25LCxxInfo.driver_version - (uint8_t)(e_25LCxxInfo.driver_version /100)*100));
 80027be:	4b5a      	ldr	r3, [pc, #360]	; (8002928 <main+0x214>)
 80027c0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80027c4:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002954 <main+0x240>
 80027c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027cc:	ee16 0a90 	vmov	r0, s13
 80027d0:	f7fd feba 	bl	8000548 <__aeabi_f2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4953      	ldr	r1, [pc, #332]	; (8002928 <main+0x214>)
 80027da:	ed91 7a10 	vldr	s14, [r1, #64]	; 0x40
 80027de:	4952      	ldr	r1, [pc, #328]	; (8002928 <main+0x214>)
 80027e0:	edd1 6a10 	vldr	s13, [r1, #64]	; 0x40
 80027e4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8002958 <main+0x244>
 80027e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80027f4:	7939      	ldrb	r1, [r7, #4]
 80027f6:	b2c9      	uxtb	r1, r1
 80027f8:	4608      	mov	r0, r1
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	fb00 f101 	mul.w	r1, r0, r1
 8002800:	ee07 1a90 	vmov	s15, r1
 8002804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002810:	edc7 7a01 	vstr	s15, [r7, #4]
 8002814:	7939      	ldrb	r1, [r7, #4]
 8002816:	b2c9      	uxtb	r1, r1
 8002818:	9100      	str	r1, [sp, #0]
 800281a:	4850      	ldr	r0, [pc, #320]	; (800295c <main+0x248>)
 800281c:	f7ff ff39 	bl	8002692 <e_25LCxx_interface_debug_print>

	dataAddress = 0;          /**< start read operation at eeprom address 0*/
 8002820:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <main+0x24c>)
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]
	numByteRead = 20;		  /**< read 20 bytes */
 8002826:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <main+0x250>)
 8002828:	2214      	movs	r2, #20
 800282a:	701a      	strb	r2, [r3, #0]

  err = e_25LCxx_basic_get_bp_status((uint8_t *)&singleByteDataRead);
 800282c:	484e      	ldr	r0, [pc, #312]	; (8002968 <main+0x254>)
 800282e:	f7ff fe7d 	bl	800252c <e_25LCxx_basic_get_bp_status>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	4b4d      	ldr	r3, [pc, #308]	; (800296c <main+0x258>)
 8002838:	601a      	str	r2, [r3, #0]
	e_25LCxx_interface_debug_print("Block protect status: %d\n", singleByteDataRead);
 800283a:	4b4b      	ldr	r3, [pc, #300]	; (8002968 <main+0x254>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	484b      	ldr	r0, [pc, #300]	; (8002970 <main+0x25c>)
 8002842:	f7ff ff26 	bl	8002692 <e_25LCxx_interface_debug_print>

	err= e_25LCxx_basic_read_byte(dataAddress, (uint8_t *)pDataRead, numByteRead);
 8002846:	4b46      	ldr	r3, [pc, #280]	; (8002960 <main+0x24c>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	4a46      	ldr	r2, [pc, #280]	; (8002964 <main+0x250>)
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	b292      	uxth	r2, r2
 8002850:	4948      	ldr	r1, [pc, #288]	; (8002974 <main+0x260>)
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fd8a 	bl	800236c <e_25LCxx_basic_read_byte>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <main+0x258>)
 800285e:	601a      	str	r2, [r3, #0]
	for (int index = 0; index < numByteRead; index++){
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e00b      	b.n	800287e <main+0x16a>
		e_25LCxx_interface_debug_print("address read: %d Data Read :%x\n",index, pDataRead[index]);
 8002866:	4a43      	ldr	r2, [pc, #268]	; (8002974 <main+0x260>)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4413      	add	r3, r2
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68f9      	ldr	r1, [r7, #12]
 8002872:	4841      	ldr	r0, [pc, #260]	; (8002978 <main+0x264>)
 8002874:	f7ff ff0d 	bl	8002692 <e_25LCxx_interface_debug_print>
	for (int index = 0; index < numByteRead; index++){
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <main+0x250>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4293      	cmp	r3, r2
 8002888:	dbed      	blt.n	8002866 <main+0x152>
		e_25LCxx_interface_debug_print(" add: %d data: 0x%x", index, singleByteDataRead);
		if(index % 10 == 0)
		e_25LCxx_interface_debug_print("\n\r");
	}*/

	e_25LCxx_basic_put_byte(14, (uint32_t *)&dateTime,  sizeof(dateTime));
 800288a:	2204      	movs	r2, #4
 800288c:	493b      	ldr	r1, [pc, #236]	; (800297c <main+0x268>)
 800288e:	200e      	movs	r0, #14
 8002890:	f7ff fd4a 	bl	8002328 <e_25LCxx_basic_put_byte>

	//err = e_25LCxx_basic_update(12,(uint8_t *)pDataWrite, sizeof(pDataWrite));

	err = e_25LCxx_basic_get_byte(14, (uint32_t *)&byteGet, sizeof(byteGet));
 8002894:	2204      	movs	r2, #4
 8002896:	493a      	ldr	r1, [pc, #232]	; (8002980 <main+0x26c>)
 8002898:	200e      	movs	r0, #14
 800289a:	f7ff fd81 	bl	80023a0 <e_25LCxx_basic_get_byte>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <main+0x258>)
 80028a4:	601a      	str	r2, [r3, #0]
	e_25LCxx_interface_debug_print("\nGet date: %lu\n", byteGet);
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <main+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4619      	mov	r1, r3
 80028ac:	4835      	ldr	r0, [pc, #212]	; (8002984 <main+0x270>)
 80028ae:	f7ff fef0 	bl	8002692 <e_25LCxx_interface_debug_print>

	err = e_25LCxx_basic_erase_page(64);											  /**< erasing memory page 64 (address: 1008 - 1023)*/
 80028b2:	2040      	movs	r0, #64	; 0x40
 80028b4:	f7ff fd90 	bl	80023d8 <e_25LCxx_basic_erase_page>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <main+0x258>)
 80028be:	601a      	str	r2, [r3, #0]
	err = e_25LCxx_basic_erase_sector(1532, 1540);									  /**< attempt to erase a protected region */
 80028c0:	f240 6104 	movw	r1, #1540	; 0x604
 80028c4:	f240 50fc 	movw	r0, #1532	; 0x5fc
 80028c8:	f7ff fda4 	bl	8002414 <e_25LCxx_basic_erase_sector>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <main+0x258>)
 80028d2:	601a      	str	r2, [r3, #0]
	err = e_25LCxx_basic_write_byte(2011,(uint8_t *)pDataWrite, sizeof(pDataWrite));  /**< attempt to write block of data bigger than page size, in a protected region*/
 80028d4:	220a      	movs	r2, #10
 80028d6:	492c      	ldr	r1, [pc, #176]	; (8002988 <main+0x274>)
 80028d8:	f240 70db 	movw	r0, #2011	; 0x7db
 80028dc:	f7ff fd02 	bl	80022e4 <e_25LCxx_basic_write_byte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <main+0x258>)
 80028e6:	601a      	str	r2, [r3, #0]

	err = e_25LCxx_basic_get_memory_properties((uint16_t*) &totalSize, (uint16_t *)&freeSpace, (uint16_t *)&usedSpace);
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <main+0x278>)
 80028ea:	4929      	ldr	r1, [pc, #164]	; (8002990 <main+0x27c>)
 80028ec:	4829      	ldr	r0, [pc, #164]	; (8002994 <main+0x280>)
 80028ee:	f7ff fe31 	bl	8002554 <e_25LCxx_basic_get_memory_properties>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <main+0x258>)
 80028f8:	601a      	str	r2, [r3, #0]
	e_25LCxx_interface_debug_print("Total size : %d Bytes\nFree space: %d Bytes\nUsed space: %d Bytes\n", totalSize, freeSpace, usedSpace);
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <main+0x280>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <main+0x27c>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b21      	ldr	r3, [pc, #132]	; (800298c <main+0x278>)
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	4823      	ldr	r0, [pc, #140]	; (8002998 <main+0x284>)
 800290c:	f7ff fec1 	bl	8002692 <e_25LCxx_interface_debug_print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	     HAL_Delay(500);
 8002910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002914:	f000 fc1e 	bl	8003154 <HAL_Delay>
	     HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8002918:	2108      	movs	r1, #8
 800291a:	4820      	ldr	r0, [pc, #128]	; (800299c <main+0x288>)
 800291c:	f000 fea6 	bl	800366c <HAL_GPIO_TogglePin>
	     HAL_Delay(500);
 8002920:	e7f6      	b.n	8002910 <main+0x1fc>
 8002922:	bf00      	nop
 8002924:	20000368 	.word	0x20000368
 8002928:	20000324 	.word	0x20000324
 800292c:	08009afc 	.word	0x08009afc
 8002930:	2000032e 	.word	0x2000032e
 8002934:	08009b10 	.word	0x08009b10
 8002938:	20000347 	.word	0x20000347
 800293c:	08009b24 	.word	0x08009b24
 8002940:	08009b38 	.word	0x08009b38
 8002944:	08009b54 	.word	0x08009b54
 8002948:	08009b70 	.word	0x08009b70
 800294c:	08009b8c 	.word	0x08009b8c
 8002950:	08009ba8 	.word	0x08009ba8
 8002954:	447a0000 	.word	0x447a0000
 8002958:	42c80000 	.word	0x42c80000
 800295c:	08009bc4 	.word	0x08009bc4
 8002960:	20000382 	.word	0x20000382
 8002964:	20000380 	.word	0x20000380
 8002968:	20000381 	.word	0x20000381
 800296c:	20000388 	.word	0x20000388
 8002970:	08009be4 	.word	0x08009be4
 8002974:	2000036c 	.word	0x2000036c
 8002978:	08009c00 	.word	0x08009c00
 800297c:	20000000 	.word	0x20000000
 8002980:	20000384 	.word	0x20000384
 8002984:	08009c20 	.word	0x08009c20
 8002988:	08009c74 	.word	0x08009c74
 800298c:	20000390 	.word	0x20000390
 8002990:	2000038e 	.word	0x2000038e
 8002994:	2000038c 	.word	0x2000038c
 8002998:	08009c30 	.word	0x08009c30
 800299c:	48000400 	.word	0x48000400

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	; 0x58
 80029a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2244      	movs	r2, #68	; 0x44
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f003 fc00 	bl	80061b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029c6:	f000 fe79 	bl	80036bc <HAL_PWREx_ControlVoltageScaling>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029d0:	f000 f95c 	bl	8002c8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80029d4:	2310      	movs	r3, #16
 80029d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 febb 	bl	8003768 <HAL_RCC_OscConfig>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80029f8:	f000 f948 	bl	8002c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029fc:	230f      	movs	r3, #15
 80029fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a10:	463b      	mov	r3, r7
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fabb 	bl	8003f90 <HAL_RCC_ClockConfig>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002a20:	f000 f934 	bl	8002c8c <Error_Handler>
  }
}
 8002a24:	bf00      	nop
 8002a26:	3758      	adds	r7, #88	; 0x58
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a32:	4a1c      	ldr	r2, [pc, #112]	; (8002aa4 <MX_SPI1_Init+0x78>)
 8002a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a62:	2218      	movs	r2, #24
 8002a64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a7a:	2207      	movs	r2, #7
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a86:	2208      	movs	r2, #8
 8002a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_SPI1_Init+0x74>)
 8002a8c:	f001 ff8c 	bl	80049a8 <HAL_SPI_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002a96:	f000 f8f9 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	2000023c 	.word	0x2000023c
 8002aa4:	40013000 	.word	0x40013000

08002aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <MX_USART2_UART_Init+0x5c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aec:	f002 fe6c 	bl	80057c8 <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002af6:	f000 f8c9 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200002a0 	.word	0x200002a0
 8002b04:	40004400 	.word	0x40004400

08002b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	60da      	str	r2, [r3, #12]
 8002b1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_GPIO_Init+0xa4>)
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b58:	f000 fd70 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2108      	movs	r1, #8
 8002b60:	4813      	ldr	r0, [pc, #76]	; (8002bb0 <MX_GPIO_Init+0xa8>)
 8002b62:	f000 fd6b 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8002b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b82:	f000 fbf1 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8002b86:	2308      	movs	r3, #8
 8002b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8002b96:	f107 030c 	add.w	r3, r7, #12
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <MX_GPIO_Init+0xa8>)
 8002b9e:	f000 fbe3 	bl	8003368 <HAL_GPIO_Init>

}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	48000400 	.word	0x48000400

08002bb4 <spi_write>:

/* USER CODE BEGIN 4 */
uint8_t spi_write(uint16_t u16Reg, uint32_t *pBuf, uint16_t u16Len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	6039      	str	r1, [r7, #0]
 8002bbe:	80fb      	strh	r3, [r7, #6]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&u16Reg, 1, 100);   	      /**< user defined spi write function */
 8002bc4:	1db9      	adds	r1, r7, #6
 8002bc6:	2364      	movs	r3, #100	; 0x64
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <spi_write+0x3c>)
 8002bcc:	f001 ff8f 	bl	8004aee <HAL_SPI_Transmit>
	if(u16Len == 0){return 0;}
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <spi_write+0x26>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e006      	b.n	8002be8 <spi_write+0x34>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)pBuf, u16Len, 100);   	          /**< user defined spi write function */
 8002bda:	88ba      	ldrh	r2, [r7, #4]
 8002bdc:	2364      	movs	r3, #100	; 0x64
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <spi_write+0x3c>)
 8002be2:	f001 ff84 	bl	8004aee <HAL_SPI_Transmit>
    return 0;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	2000023c 	.word	0x2000023c

08002bf4 <spi_read>:

uint8_t spi_read(uint16_t u16Reg, uint32_t *pBuf, uint16_t u16Len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	80fb      	strh	r3, [r7, #6]
 8002c00:	4613      	mov	r3, r2
 8002c02:	80bb      	strh	r3, [r7, #4]
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&u16Reg, 1, 100);
 8002c04:	1db9      	adds	r1, r7, #6
 8002c06:	2364      	movs	r3, #100	; 0x64
 8002c08:	2201      	movs	r2, #1
 8002c0a:	480c      	ldr	r0, [pc, #48]	; (8002c3c <spi_read+0x48>)
 8002c0c:	f001 ff6f 	bl	8004aee <HAL_SPI_Transmit>
	if(u16Len == 1)
 8002c10:	88bb      	ldrh	r3, [r7, #4]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d107      	bne.n	8002c26 <spi_read+0x32>
	{
		HAL_SPI_Receive(&hspi1, (uint8_t *)pBuf, 1, 100);
 8002c16:	2364      	movs	r3, #100	; 0x64
 8002c18:	2201      	movs	r2, #1
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	4807      	ldr	r0, [pc, #28]	; (8002c3c <spi_read+0x48>)
 8002c1e:	f002 f8d4 	bl	8004dca <HAL_SPI_Receive>
		return 0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e006      	b.n	8002c34 <spi_read+0x40>
	}
	HAL_SPI_Receive(&hspi1, (uint8_t *)pBuf, u16Len, 100);
 8002c26:	88ba      	ldrh	r2, [r7, #4]
 8002c28:	2364      	movs	r3, #100	; 0x64
 8002c2a:	6839      	ldr	r1, [r7, #0]
 8002c2c:	4803      	ldr	r0, [pc, #12]	; (8002c3c <spi_read+0x48>)
 8002c2e:	f002 f8cc 	bl	8004dca <HAL_SPI_Receive>
return 0;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000023c 	.word	0x2000023c

08002c40 <uart_transmit>:

void uart_transmit(const char *pString, uint8_t u8Length)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, (const char *) pString, u8Length, 100);
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	2364      	movs	r3, #100	; 0x64
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <uart_transmit+0x24>)
 8002c56:	f002 fe05 	bl	8005864 <HAL_UART_Transmit>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200002a0 	.word	0x200002a0

08002c68 <spi_write_gpio_cs>:

 uint8_t spi_write_gpio_cs(uint8_t u8State)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
   HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, u8State);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	461a      	mov	r2, r3
 8002c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c7e:	f000 fcdd 	bl	800363c <HAL_GPIO_WritePin>
   return 0;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c90:	b672      	cpsid	i
}
 8002c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <Error_Handler+0x8>
	...

08002c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_MspInit+0x44>)
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_MspInit+0x44>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_MspInit+0x44>)
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_MspInit+0x44>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <HAL_MspInit+0x44>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_MspInit+0x44>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_SPI_MspInit+0x7c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d128      	bne.n	8002d54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d06:	4a16      	ldr	r2, [pc, #88]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <HAL_SPI_MspInit+0x80>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d32:	23e0      	movs	r3, #224	; 0xe0
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d42:	2305      	movs	r3, #5
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d50:	f000 fb0a 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3728      	adds	r7, #40	; 0x28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40013000 	.word	0x40013000
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b09e      	sub	sp, #120	; 0x78
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	2254      	movs	r2, #84	; 0x54
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f003 fa15 	bl	80061b4 <memset>
  if(huart->Instance==USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <HAL_UART_MspInit+0xa8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d136      	bne.n	8002e02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d94:	2302      	movs	r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d9c:	f107 0310 	add.w	r3, r7, #16
 8002da0:	4618      	mov	r0, r3
 8002da2:	f001 fb19 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dac:	f7ff ff6e 	bl	8002c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dba:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dcc:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_UART_MspInit+0xac>)
 8002dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de0:	230c      	movs	r3, #12
 8002de2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df0:	2307      	movs	r3, #7
 8002df2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dfe:	f000 fab3 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e02:	bf00      	nop
 8002e04:	3778      	adds	r7, #120	; 0x78
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40004400 	.word	0x40004400
 8002e10:	40021000 	.word	0x40021000

08002e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e18:	e7fe      	b.n	8002e18 <NMI_Handler+0x4>

08002e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1e:	e7fe      	b.n	8002e1e <HardFault_Handler+0x4>

08002e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <MemManage_Handler+0x4>

08002e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <BusFault_Handler+0x4>

08002e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <UsageFault_Handler+0x4>

08002e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e60:	f000 f958 	bl	8003114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
	return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <_kill>:

int _kill(int pid, int sig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e82:	f003 f95f 	bl	8006144 <__errno>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2216      	movs	r2, #22
 8002e8a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_exit>:

void _exit (int status)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffe7 	bl	8002e78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eaa:	e7fe      	b.n	8002eaa <_exit+0x12>

08002eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	e00a      	b.n	8002ed4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ebe:	f3af 8000 	nop.w
 8002ec2:	4601      	mov	r1, r0
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	60ba      	str	r2, [r7, #8]
 8002eca:	b2ca      	uxtb	r2, r1
 8002ecc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dbf0      	blt.n	8002ebe <_read+0x12>
	}

return len;
 8002edc:	687b      	ldr	r3, [r7, #4]
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e009      	b.n	8002f0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	60ba      	str	r2, [r7, #8]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbf1      	blt.n	8002ef8 <_write+0x12>
	}
	return len;
 8002f14:	687b      	ldr	r3, [r7, #4]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <_close>:

int _close(int file)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
	return -1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f46:	605a      	str	r2, [r3, #4]
	return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <_isatty>:

int _isatty(int file)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
	return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
	...

08002f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <_sbrk+0x5c>)
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <_sbrk+0x60>)
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <_sbrk+0x64>)
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <_sbrk+0x68>)
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d207      	bcs.n	8002fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb8:	f003 f8c4 	bl	8006144 <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	e009      	b.n	8002fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <_sbrk+0x64>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	4a05      	ldr	r2, [pc, #20]	; (8002fec <_sbrk+0x64>)
 8002fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fda:	68fb      	ldr	r3, [r7, #12]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20010000 	.word	0x20010000
 8002fe8:	00000400 	.word	0x00000400
 8002fec:	20000394 	.word	0x20000394
 8002ff0:	200003b0 	.word	0x200003b0

08002ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <SystemInit+0x20>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <SystemInit+0x20>)
 8003000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <Reset_Handler>:
 8003018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003050 <LoopForever+0x2>
 800301c:	f7ff ffea 	bl	8002ff4 <SystemInit>
 8003020:	480c      	ldr	r0, [pc, #48]	; (8003054 <LoopForever+0x6>)
 8003022:	490d      	ldr	r1, [pc, #52]	; (8003058 <LoopForever+0xa>)
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <LoopForever+0xe>)
 8003026:	2300      	movs	r3, #0
 8003028:	e002      	b.n	8003030 <LoopCopyDataInit>

0800302a <CopyDataInit>:
 800302a:	58d4      	ldr	r4, [r2, r3]
 800302c:	50c4      	str	r4, [r0, r3]
 800302e:	3304      	adds	r3, #4

08003030 <LoopCopyDataInit>:
 8003030:	18c4      	adds	r4, r0, r3
 8003032:	428c      	cmp	r4, r1
 8003034:	d3f9      	bcc.n	800302a <CopyDataInit>
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <LoopForever+0x12>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <LoopForever+0x16>)
 800303a:	2300      	movs	r3, #0
 800303c:	e001      	b.n	8003042 <LoopFillZerobss>

0800303e <FillZerobss>:
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	3204      	adds	r2, #4

08003042 <LoopFillZerobss>:
 8003042:	42a2      	cmp	r2, r4
 8003044:	d3fb      	bcc.n	800303e <FillZerobss>
 8003046:	f003 f883 	bl	8006150 <__libc_init_array>
 800304a:	f7ff fb63 	bl	8002714 <main>

0800304e <LoopForever>:
 800304e:	e7fe      	b.n	800304e <LoopForever>
 8003050:	20010000 	.word	0x20010000
 8003054:	20000000 	.word	0x20000000
 8003058:	200001e0 	.word	0x200001e0
 800305c:	0800a0b4 	.word	0x0800a0b4
 8003060:	200001e0 	.word	0x200001e0
 8003064:	200003ac 	.word	0x200003ac

08003068 <ADC1_IRQHandler>:
 8003068:	e7fe      	b.n	8003068 <ADC1_IRQHandler>

0800306a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003074:	2003      	movs	r0, #3
 8003076:	f000 f943 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307a:	200f      	movs	r0, #15
 800307c:	f000 f80e 	bl	800309c <HAL_InitTick>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d002      	beq.n	800308c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	71fb      	strb	r3, [r7, #7]
 800308a:	e001      	b.n	8003090 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800308c:	f7ff fe04 	bl	8002c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003090:	79fb      	ldrb	r3, [r7, #7]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_InitTick+0x6c>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d023      	beq.n	80030f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_InitTick+0x70>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <HAL_InitTick+0x6c>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030be:	fbb3 f3f1 	udiv	r3, r3, r1
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f941 	bl	800334e <HAL_SYSTICK_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d809      	bhi.n	80030ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d8:	2200      	movs	r2, #0
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	f000 f919 	bl	8003316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030e4:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <HAL_InitTick+0x74>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	e007      	b.n	80030fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
 80030f0:	e004      	b.n	80030fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	73fb      	strb	r3, [r7, #15]
 80030f6:	e001      	b.n	80030fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2000000c 	.word	0x2000000c
 800310c:	20000004 	.word	0x20000004
 8003110:	20000008 	.word	0x20000008

08003114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_IncTick+0x20>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_IncTick+0x24>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4a04      	ldr	r2, [pc, #16]	; (8003138 <HAL_IncTick+0x24>)
 8003126:	6013      	str	r3, [r2, #0]
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	2000000c 	.word	0x2000000c
 8003138:	20000398 	.word	0x20000398

0800313c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  return uwTick;
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_GetTick+0x14>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000398 	.word	0x20000398

08003154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff ffee 	bl	800313c <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d005      	beq.n	800317a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <HAL_Delay+0x44>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800317a:	bf00      	nop
 800317c:	f7ff ffde 	bl	800313c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	429a      	cmp	r2, r3
 800318a:	d8f7      	bhi.n	800317c <HAL_Delay+0x28>
  {
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	2000000c 	.word	0x2000000c

0800319c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ce:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	60d3      	str	r3, [r2, #12]
}
 80031d4:	bf00      	nop
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <__NVIC_GetPriorityGrouping+0x18>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	0a1b      	lsrs	r3, r3, #8
 80031ee:	f003 0307 	and.w	r3, r3, #7
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	; (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
         );
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	; 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032cc:	d301      	bcc.n	80032d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <SysTick_Config+0x40>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032da:	210f      	movs	r1, #15
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f7ff ff8e 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <SysTick_Config+0x40>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <SysTick_Config+0x40>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff47 	bl	800319c <__NVIC_SetPriorityGrouping>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003328:	f7ff ff5c 	bl	80031e4 <__NVIC_GetPriorityGrouping>
 800332c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f7ff ff8e 	bl	8003254 <NVIC_EncodePriority>
 8003338:	4602      	mov	r2, r0
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff5d 	bl	8003200 <__NVIC_SetPriority>
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff ffb0 	bl	80032bc <SysTick_Config>
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	e148      	b.n	800360a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 813a 	beq.w	8003604 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d005      	beq.n	80033a8 <HAL_GPIO_Init+0x40>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d130      	bne.n	800340a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033de:	2201      	movs	r2, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 0201 	and.w	r2, r3, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d017      	beq.n	8003446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d123      	bne.n	800349a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	6939      	ldr	r1, [r7, #16]
 8003496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8094 	beq.w	8003604 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034dc:	4b52      	ldr	r3, [pc, #328]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	4a51      	ldr	r2, [pc, #324]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6613      	str	r3, [r2, #96]	; 0x60
 80034e8:	4b4f      	ldr	r3, [pc, #316]	; (8003628 <HAL_GPIO_Init+0x2c0>)
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034f4:	4a4d      	ldr	r2, [pc, #308]	; (800362c <HAL_GPIO_Init+0x2c4>)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	3302      	adds	r3, #2
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	220f      	movs	r2, #15
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800351e:	d00d      	beq.n	800353c <HAL_GPIO_Init+0x1d4>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a43      	ldr	r2, [pc, #268]	; (8003630 <HAL_GPIO_Init+0x2c8>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d007      	beq.n	8003538 <HAL_GPIO_Init+0x1d0>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a42      	ldr	r2, [pc, #264]	; (8003634 <HAL_GPIO_Init+0x2cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d101      	bne.n	8003534 <HAL_GPIO_Init+0x1cc>
 8003530:	2302      	movs	r3, #2
 8003532:	e004      	b.n	800353e <HAL_GPIO_Init+0x1d6>
 8003534:	2307      	movs	r3, #7
 8003536:	e002      	b.n	800353e <HAL_GPIO_Init+0x1d6>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_GPIO_Init+0x1d6>
 800353c:	2300      	movs	r3, #0
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	f002 0203 	and.w	r2, r2, #3
 8003544:	0092      	lsls	r2, r2, #2
 8003546:	4093      	lsls	r3, r2
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800354e:	4937      	ldr	r1, [pc, #220]	; (800362c <HAL_GPIO_Init+0x2c4>)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003580:	4a2d      	ldr	r2, [pc, #180]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035d4:	4a18      	ldr	r2, [pc, #96]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035da:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_GPIO_Init+0x2d0>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f aeaf 	bne.w	8003378 <HAL_GPIO_Init+0x10>
  }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	371c      	adds	r7, #28
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	40021000 	.word	0x40021000
 800362c:	40010000 	.word	0x40010000
 8003630:	48000400 	.word	0x48000400
 8003634:	48000800 	.word	0x48000800
 8003638:	40010400 	.word	0x40010400

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003658:	e002      	b.n	8003660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	041a      	lsls	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	43d9      	mvns	r1, r3
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	400b      	ands	r3, r1
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ca:	d130      	bne.n	800372e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036cc:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d8:	d038      	beq.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036e2:	4a1e      	ldr	r2, [pc, #120]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036ea:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2232      	movs	r2, #50	; 0x32
 80036f0:	fb02 f303 	mul.w	r3, r2, r3
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	0c9b      	lsrs	r3, r3, #18
 80036fc:	3301      	adds	r3, #1
 80036fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003700:	e002      	b.n	8003708 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	3b01      	subs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003714:	d102      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f2      	bne.n	8003702 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003728:	d110      	bne.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d007      	beq.n	800374c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003744:	4a05      	ldr	r2, [pc, #20]	; (800375c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40007000 	.word	0x40007000
 8003760:	20000004 	.word	0x20000004
 8003764:	431bde83 	.word	0x431bde83

08003768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d102      	bne.n	800377c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f000 bc02 	b.w	8003f80 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377c:	4b96      	ldr	r3, [pc, #600]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003786:	4b94      	ldr	r3, [pc, #592]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80e4 	beq.w	8003966 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4c>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b0c      	cmp	r3, #12
 80037a8:	f040 808b 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	f040 8087 	bne.w	80038c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037b4:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_RCC_OscConfig+0x64>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e3d9      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCC_OscConfig+0x7e>
 80037dc:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	e005      	b.n	80037f2 <HAL_RCC_OscConfig+0x8a>
 80037e6:	4b7c      	ldr	r3, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d223      	bcs.n	800383e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fd8c 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e3ba      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380a:	4b73      	ldr	r3, [pc, #460]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a72      	ldr	r2, [pc, #456]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	496d      	ldr	r1, [pc, #436]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003824:	4313      	orrs	r3, r2
 8003826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003828:	4b6b      	ldr	r3, [pc, #428]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4968      	ldr	r1, [pc, #416]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
 800383c:	e025      	b.n	800388a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383e:	4b66      	ldr	r3, [pc, #408]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a65      	ldr	r2, [pc, #404]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b63      	ldr	r3, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	4960      	ldr	r1, [pc, #384]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385c:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	495b      	ldr	r1, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fd4c 	bl	8004318 <RCC_SetFlashLatencyFromMSIRange>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e37a      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800388a:	f000 fc81 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 800388e:	4602      	mov	r2, r0
 8003890:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	4950      	ldr	r1, [pc, #320]	; (80039dc <HAL_RCC_OscConfig+0x274>)
 800389c:	5ccb      	ldrb	r3, [r1, r3]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a4e      	ldr	r2, [pc, #312]	; (80039e0 <HAL_RCC_OscConfig+0x278>)
 80038a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038aa:	4b4e      	ldr	r3, [pc, #312]	; (80039e4 <HAL_RCC_OscConfig+0x27c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fbf4 	bl	800309c <HAL_InitTick>
 80038b4:	4603      	mov	r3, r0
 80038b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d052      	beq.n	8003964 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	e35e      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d032      	beq.n	8003930 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a42      	ldr	r2, [pc, #264]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038d6:	f7ff fc31 	bl	800313c <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038de:	f7ff fc2d 	bl	800313c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e347      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a35      	ldr	r2, [pc, #212]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003902:	f043 0308 	orr.w	r3, r3, #8
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	4930      	ldr	r1, [pc, #192]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	492b      	ldr	r1, [pc, #172]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
 800392e:	e01a      	b.n	8003966 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003930:	4b29      	ldr	r3, [pc, #164]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800393c:	f7ff fbfe 	bl	800313c <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003944:	f7ff fbfa 	bl	800313c <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e314      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x1dc>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d073      	beq.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d005      	beq.n	8003984 <HAL_RCC_OscConfig+0x21c>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d10e      	bne.n	800399c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d10b      	bne.n	800399c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d063      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d15f      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e2f1      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_OscConfig+0x24c>
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0b      	ldr	r2, [pc, #44]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e025      	b.n	8003a00 <HAL_RCC_OscConfig+0x298>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039bc:	d114      	bne.n	80039e8 <HAL_RCC_OscConfig+0x280>
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a05      	ldr	r2, [pc, #20]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a02      	ldr	r2, [pc, #8]	; (80039d8 <HAL_RCC_OscConfig+0x270>)
 80039d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e013      	b.n	8003a00 <HAL_RCC_OscConfig+0x298>
 80039d8:	40021000 	.word	0x40021000
 80039dc:	08009c80 	.word	0x08009c80
 80039e0:	20000004 	.word	0x20000004
 80039e4:	20000008 	.word	0x20000008
 80039e8:	4ba0      	ldr	r3, [pc, #640]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a9f      	ldr	r2, [pc, #636]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b9d      	ldr	r3, [pc, #628]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a9c      	ldr	r2, [pc, #624]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7ff fb98 	bl	800313c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a10:	f7ff fb94 	bl	800313c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e2ae      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a22:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x2a8>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7ff fb84 	bl	800313c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7ff fb80 	bl	800313c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e29a      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2d0>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d060      	beq.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d005      	beq.n	8003a78 <HAL_RCC_OscConfig+0x310>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d119      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d116      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a78:	4b7c      	ldr	r3, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x328>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e277      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	4973      	ldr	r1, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aa4:	e040      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aae:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6e      	ldr	r2, [pc, #440]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7ff fb3f 	bl	800313c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7ff fb3b 	bl	800313c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e255      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad4:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	495f      	ldr	r1, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
 8003af4:	e018      	b.n	8003b28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b5d      	ldr	r3, [pc, #372]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a5c      	ldr	r2, [pc, #368]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7ff fb1b 	bl	800313c <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7ff fb17 	bl	800313c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e231      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d03c      	beq.n	8003bae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01c      	beq.n	8003b76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b42:	4a4a      	ldr	r2, [pc, #296]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7ff faf6 	bl	800313c <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b54:	f7ff faf2 	bl	800313c <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e20c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0ef      	beq.n	8003b54 <HAL_RCC_OscConfig+0x3ec>
 8003b74:	e01b      	b.n	8003bae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7c:	4a3b      	ldr	r2, [pc, #236]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b86:	f7ff fad9 	bl	800313c <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7ff fad5 	bl	800313c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1ef      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba0:	4b32      	ldr	r3, [pc, #200]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1ef      	bne.n	8003b8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a6 	beq.w	8003d08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10d      	bne.n	8003be8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bcc:	4b27      	ldr	r3, [pc, #156]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be4:	2301      	movs	r3, #1
 8003be6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d118      	bne.n	8003c26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c00:	f7ff fa9c 	bl	800313c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7ff fa98 	bl	800313c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1b2      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_RCC_OscConfig+0x508>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4d8>
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c3e:	e029      	b.n	8003c94 <HAL_RCC_OscConfig+0x52c>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d115      	bne.n	8003c74 <HAL_RCC_OscConfig+0x50c>
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a03      	ldr	r2, [pc, #12]	; (8003c6c <HAL_RCC_OscConfig+0x504>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x52c>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	4b9a      	ldr	r3, [pc, #616]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a99      	ldr	r2, [pc, #612]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c84:	4b96      	ldr	r3, [pc, #600]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	4a95      	ldr	r2, [pc, #596]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d016      	beq.n	8003cca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7ff fa4e 	bl	800313c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7ff fa4a 	bl	800313c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e162      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	4b89      	ldr	r3, [pc, #548]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0ed      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x53c>
 8003cc8:	e015      	b.n	8003cf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7ff fa37 	bl	800313c <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7ff fa33 	bl	800313c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e14b      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	4b7d      	ldr	r3, [pc, #500]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ed      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cfc:	4b78      	ldr	r3, [pc, #480]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	4a77      	ldr	r2, [pc, #476]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0320 	and.w	r3, r3, #32
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d1c:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d22:	4a6f      	ldr	r2, [pc, #444]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7ff fa06 	bl	800313c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d34:	f7ff fa02 	bl	800313c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e11c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d46:	4b66      	ldr	r3, [pc, #408]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <HAL_RCC_OscConfig+0x5cc>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d56:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d5c:	4a60      	ldr	r2, [pc, #384]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7ff f9e9 	bl	800313c <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d6e:	f7ff f9e5 	bl	800313c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0ff      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d80:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80f3 	beq.w	8003f7e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	f040 80c9 	bne.w	8003f34 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003da2:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 0203 	and.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d12c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d123      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d11b      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d113      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d109      	bne.n	8003e10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	085b      	lsrs	r3, r3, #1
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d06b      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d062      	beq.n	8003edc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0ac      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a2d      	ldr	r2, [pc, #180]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e32:	f7ff f983 	bl	800313c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7ff f97f 	bl	800313c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e099      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e4c:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCC_OscConfig+0x77c>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e72:	0212      	lsls	r2, r2, #8
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0552      	lsls	r2, r2, #21
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e86:	0852      	lsrs	r2, r2, #1
 8003e88:	3a01      	subs	r2, #1
 8003e8a:	0652      	lsls	r2, r2, #25
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e92:	06d2      	lsls	r2, r2, #27
 8003e94:	430a      	orrs	r2, r1
 8003e96:	4912      	ldr	r1, [pc, #72]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0f      	ldr	r2, [pc, #60]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eb4:	f7ff f942 	bl	800313c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7ff f93e 	bl	800313c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e058      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <HAL_RCC_OscConfig+0x778>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eda:	e050      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e04f      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee8:	4b27      	ldr	r3, [pc, #156]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d144      	bne.n	8003f7e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f0c:	f7ff f916 	bl	800313c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f14:	f7ff f912 	bl	800313c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e02c      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x7ac>
 8003f32:	e024      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d01f      	beq.n	8003f7a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7ff f8f9 	bl	800313c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7ff f8f5 	bl	800313c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e00f      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f6c:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	4905      	ldr	r1, [pc, #20]	; (8003f88 <HAL_RCC_OscConfig+0x820>)
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_OscConfig+0x824>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	60cb      	str	r3, [r1, #12]
 8003f78:	e001      	b.n	8003f7e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	feeefffc 	.word	0xfeeefffc

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0e7      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b75      	ldr	r3, [pc, #468]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d910      	bls.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b72      	ldr	r3, [pc, #456]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4970      	ldr	r1, [pc, #448]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b6e      	ldr	r3, [pc, #440]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cf      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d010      	beq.n	8004002 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b66      	ldr	r3, [pc, #408]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d908      	bls.n	8004002 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b63      	ldr	r3, [pc, #396]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4960      	ldr	r1, [pc, #384]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04c      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0a6      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d115      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e09a      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004046:	4b4e      	ldr	r3, [pc, #312]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e08e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004056:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e086      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4943      	ldr	r1, [pc, #268]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7ff f860 	bl	800313c <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7ff f85c 	bl	800313c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e06e      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d010      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b31      	ldr	r3, [pc, #196]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d208      	bcs.n	80040d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	492b      	ldr	r1, [pc, #172]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d6:	4b29      	ldr	r3, [pc, #164]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d210      	bcs.n	8004106 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 0207 	bic.w	r2, r3, #7
 80040ec:	4923      	ldr	r1, [pc, #140]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f4:	4b21      	ldr	r3, [pc, #132]	; (800417c <HAL_RCC_ClockConfig+0x1ec>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d001      	beq.n	8004106 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e036      	b.n	8004174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	4918      	ldr	r1, [pc, #96]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4910      	ldr	r1, [pc, #64]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004144:	f000 f824 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <HAL_RCC_ClockConfig+0x1f0>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	490b      	ldr	r1, [pc, #44]	; (8004184 <HAL_RCC_ClockConfig+0x1f4>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	4a09      	ldr	r2, [pc, #36]	; (8004188 <HAL_RCC_ClockConfig+0x1f8>)
 8004162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <HAL_RCC_ClockConfig+0x1fc>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f7fe ff97 	bl	800309c <HAL_InitTick>
 800416e:	4603      	mov	r3, r0
 8004170:	72fb      	strb	r3, [r7, #11]

  return status;
 8004172:	7afb      	ldrb	r3, [r7, #11]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40022000 	.word	0x40022000
 8004180:	40021000 	.word	0x40021000
 8004184:	08009c80 	.word	0x08009c80
 8004188:	20000004 	.word	0x20000004
 800418c:	20000008 	.word	0x20000008

08004190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	; 0x24
 8004194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800419e:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a8:	4b3b      	ldr	r3, [pc, #236]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x34>
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d121      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11e      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041c4:	4b34      	ldr	r3, [pc, #208]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041d0:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	e005      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041ec:	4a2b      	ldr	r2, [pc, #172]	; (800429c <HAL_RCC_GetSysClockFreq+0x10c>)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004200:	e00a      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d102      	bne.n	800420e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800420a:	61bb      	str	r3, [r7, #24]
 800420c:	e004      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d101      	bne.n	8004218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004214:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d134      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d003      	beq.n	8004236 <HAL_RCC_GetSysClockFreq+0xa6>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d003      	beq.n	800423c <HAL_RCC_GetSysClockFreq+0xac>
 8004234:	e005      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004238:	617b      	str	r3, [r7, #20]
      break;
 800423a:	e005      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800423e:	617b      	str	r3, [r7, #20]
      break;
 8004240:	e002      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	617b      	str	r3, [r7, #20]
      break;
 8004246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004248:	4b13      	ldr	r3, [pc, #76]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	091b      	lsrs	r3, r3, #4
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	3301      	adds	r3, #1
 8004254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004256:	4b10      	ldr	r3, [pc, #64]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	0a1b      	lsrs	r3, r3, #8
 800425c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	fb03 f202 	mul.w	r2, r3, r2
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	fbb2 f3f3 	udiv	r3, r2, r3
 800426c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0e5b      	lsrs	r3, r3, #25
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	3301      	adds	r3, #1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	fbb2 f3f3 	udiv	r3, r2, r3
 8004286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004288:	69bb      	ldr	r3, [r7, #24]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000
 800429c:	08009c98 	.word	0x08009c98
 80042a0:	00f42400 	.word	0x00f42400
 80042a4:	007a1200 	.word	0x007a1200

080042a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ac:	4b03      	ldr	r3, [pc, #12]	; (80042bc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	20000004 	.word	0x20000004

080042c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0a1b      	lsrs	r3, r3, #8
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4904      	ldr	r1, [pc, #16]	; (80042e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	08009c90 	.word	0x08009c90

080042ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042f0:	f7ff ffda 	bl	80042a8 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b06      	ldr	r3, [pc, #24]	; (8004310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0adb      	lsrs	r3, r3, #11
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4904      	ldr	r1, [pc, #16]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	08009c90 	.word	0x08009c90

08004318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004324:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d003      	beq.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004330:	f7ff f9b6 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004334:	6178      	str	r0, [r7, #20]
 8004336:	e014      	b.n	8004362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800433c:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6593      	str	r3, [r2, #88]	; 0x58
 8004344:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004350:	f7ff f9a6 	bl	80036a0 <HAL_PWREx_GetVoltageRange>
 8004354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004368:	d10b      	bne.n	8004382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b80      	cmp	r3, #128	; 0x80
 800436e:	d919      	bls.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2ba0      	cmp	r3, #160	; 0xa0
 8004374:	d902      	bls.n	800437c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004376:	2302      	movs	r3, #2
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e013      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800437c:	2301      	movs	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	e010      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d902      	bls.n	800438e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004388:	2303      	movs	r3, #3
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	e00a      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b80      	cmp	r3, #128	; 0x80
 8004392:	d102      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004394:	2302      	movs	r3, #2
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e004      	b.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b70      	cmp	r3, #112	; 0x70
 800439e:	d101      	bne.n	80043a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043a0:	2301      	movs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0207 	bic.w	r2, r3, #7
 80043ac:	4909      	ldr	r1, [pc, #36]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40022000 	.word	0x40022000

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d031      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043fc:	d01a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004402:	d814      	bhi.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800440c:	d10f      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800440e:	4b5d      	ldr	r3, [pc, #372]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800441a:	e00c      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f9ce 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	74fb      	strb	r3, [r7, #19]
      break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004436:	7cfb      	ldrb	r3, [r7, #19]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443c:	4b51      	ldr	r3, [pc, #324]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	494e      	ldr	r1, [pc, #312]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004452:	e001      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 809e 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800446a:	4b46      	ldr	r3, [pc, #280]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800447a:	2300      	movs	r3, #0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004480:	4b40      	ldr	r3, [pc, #256]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4a3f      	ldr	r2, [pc, #252]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448a:	6593      	str	r3, [r2, #88]	; 0x58
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004498:	2301      	movs	r3, #1
 800449a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800449c:	4b3a      	ldr	r3, [pc, #232]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a39      	ldr	r2, [pc, #228]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044a8:	f7fe fe48 	bl	800313c <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ae:	e009      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b0:	f7fe fe44 	bl	800313c <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	74fb      	strb	r3, [r7, #19]
        break;
 80044c2:	e005      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c4:	4b30      	ldr	r3, [pc, #192]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ef      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d15a      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d6:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d019      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800450e:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800451e:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fe fe04 	bl	800313c <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004536:	e00b      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fe fe00 	bl	800313c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d902      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	74fb      	strb	r3, [r7, #19]
            break;
 800454e:	e006      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0ec      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004572:	4904      	ldr	r1, [pc, #16]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800457a:	e009      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800457c:	7cfb      	ldrb	r3, [r7, #19]
 800457e:	74bb      	strb	r3, [r7, #18]
 8004580:	e006      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000
 8004588:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004590:	7c7b      	ldrb	r3, [r7, #17]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d105      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b8a      	ldr	r3, [pc, #552]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4a89      	ldr	r2, [pc, #548]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045ae:	4b84      	ldr	r3, [pc, #528]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f023 0203 	bic.w	r2, r3, #3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	4980      	ldr	r1, [pc, #512]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045d0:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 020c 	bic.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	4978      	ldr	r1, [pc, #480]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f2:	4b73      	ldr	r3, [pc, #460]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	496f      	ldr	r1, [pc, #444]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004614:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	4967      	ldr	r1, [pc, #412]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004636:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	495e      	ldr	r1, [pc, #376]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004658:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4956      	ldr	r1, [pc, #344]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467a:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	494d      	ldr	r1, [pc, #308]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d028      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800469c:	4b48      	ldr	r3, [pc, #288]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4945      	ldr	r1, [pc, #276]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ba:	d106      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a3f      	ldr	r2, [pc, #252]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c6:	60d3      	str	r3, [r2, #12]
 80046c8:	e011      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046d2:	d10c      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f872 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d028      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046fa:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004700:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	492d      	ldr	r1, [pc, #180]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004718:	d106      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004724:	60d3      	str	r3, [r2, #12]
 8004726:	e011      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004730:	d10c      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f000 f843 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004742:	7cfb      	ldrb	r3, [r7, #19]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004748:	7cfb      	ldrb	r3, [r7, #19]
 800474a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01c      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004776:	d10c      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f820 	bl	80047c4 <RCCEx_PLLSAI1_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800479e:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ac:	4904      	ldr	r1, [pc, #16]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000

080047c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047d2:	4b74      	ldr	r3, [pc, #464]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d018      	beq.n	8004810 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047de:	4b71      	ldr	r3, [pc, #452]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0203 	and.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10d      	bne.n	800480a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
       ||
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047f6:	4b6b      	ldr	r3, [pc, #428]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	091b      	lsrs	r3, r3, #4
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
       ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d047      	beq.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e044      	b.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d018      	beq.n	800484a <RCCEx_PLLSAI1_Config+0x86>
 8004818:	2b03      	cmp	r3, #3
 800481a:	d825      	bhi.n	8004868 <RCCEx_PLLSAI1_Config+0xa4>
 800481c:	2b01      	cmp	r3, #1
 800481e:	d002      	beq.n	8004826 <RCCEx_PLLSAI1_Config+0x62>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d009      	beq.n	8004838 <RCCEx_PLLSAI1_Config+0x74>
 8004824:	e020      	b.n	8004868 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004826:	4b5f      	ldr	r3, [pc, #380]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d11d      	bne.n	800486e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004836:	e01a      	b.n	800486e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004838:	4b5a      	ldr	r3, [pc, #360]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004848:	e013      	b.n	8004872 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800484a:	4b56      	ldr	r3, [pc, #344]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10f      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004856:	4b53      	ldr	r3, [pc, #332]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004866:	e006      	b.n	8004876 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      break;
 800486c:	e004      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800486e:	bf00      	nop
 8004870:	e002      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004872:	bf00      	nop
 8004874:	e000      	b.n	8004878 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004876:	bf00      	nop
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800487e:	4b49      	ldr	r3, [pc, #292]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	3b01      	subs	r3, #1
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	430b      	orrs	r3, r1
 8004894:	4943      	ldr	r1, [pc, #268]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004896:	4313      	orrs	r3, r2
 8004898:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d17c      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048a0:	4b40      	ldr	r3, [pc, #256]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a3f      	ldr	r2, [pc, #252]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ac:	f7fe fc46 	bl	800313c <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048b2:	e009      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048b4:	f7fe fc42 	bl	800313c <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d902      	bls.n	80048c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	73fb      	strb	r3, [r7, #15]
        break;
 80048c6:	e005      	b.n	80048d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048c8:	4b36      	ldr	r3, [pc, #216]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ef      	bne.n	80048b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d15f      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d110      	bne.n	8004902 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048e0:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6892      	ldr	r2, [r2, #8]
 80048f0:	0211      	lsls	r1, r2, #8
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68d2      	ldr	r2, [r2, #12]
 80048f6:	06d2      	lsls	r2, r2, #27
 80048f8:	430a      	orrs	r2, r1
 80048fa:	492a      	ldr	r1, [pc, #168]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	610b      	str	r3, [r1, #16]
 8004900:	e027      	b.n	8004952 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d112      	bne.n	800492e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004908:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004910:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	0211      	lsls	r1, r2, #8
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6912      	ldr	r2, [r2, #16]
 800491e:	0852      	lsrs	r2, r2, #1
 8004920:	3a01      	subs	r2, #1
 8004922:	0552      	lsls	r2, r2, #21
 8004924:	430a      	orrs	r2, r1
 8004926:	491f      	ldr	r1, [pc, #124]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004928:	4313      	orrs	r3, r2
 800492a:	610b      	str	r3, [r1, #16]
 800492c:	e011      	b.n	8004952 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004936:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6892      	ldr	r2, [r2, #8]
 800493e:	0211      	lsls	r1, r2, #8
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6952      	ldr	r2, [r2, #20]
 8004944:	0852      	lsrs	r2, r2, #1
 8004946:	3a01      	subs	r2, #1
 8004948:	0652      	lsls	r2, r2, #25
 800494a:	430a      	orrs	r2, r1
 800494c:	4915      	ldr	r1, [pc, #84]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800494e:	4313      	orrs	r3, r2
 8004950:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004958:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800495c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800495e:	f7fe fbed 	bl	800313c <HAL_GetTick>
 8004962:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004964:	e009      	b.n	800497a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004966:	f7fe fbe9 	bl	800313c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d902      	bls.n	800497a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	73fb      	strb	r3, [r7, #15]
          break;
 8004978:	e005      	b.n	8004986 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ef      	beq.n	8004966 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d106      	bne.n	800499a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	4903      	ldr	r1, [pc, #12]	; (80049a4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000

080049a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e095      	b.n	8004ae6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ca:	d009      	beq.n	80049e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	e005      	b.n	80049e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fe f970 	bl	8002ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a20:	d902      	bls.n	8004a28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	e002      	b.n	8004a2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_Init+0xa0>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	ea42 0103 	orr.w	r1, r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	0c1b      	lsrs	r3, r3, #16
 8004aa4:	f003 0204 	and.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b088      	sub	sp, #32
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_SPI_Transmit+0x22>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e158      	b.n	8004dc2 <HAL_SPI_Transmit+0x2d4>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b18:	f7fe fb10 	bl	800313c <HAL_GetTick>
 8004b1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b32:	e13d      	b.n	8004db0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_SPI_Transmit+0x52>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b44:	e134      	b.n	8004db0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2203      	movs	r2, #3
 8004b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	88fa      	ldrh	r2, [r7, #6]
 8004b5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	88fa      	ldrh	r2, [r7, #6]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	d10f      	bne.n	8004bb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b40      	cmp	r3, #64	; 0x40
 8004bbe:	d007      	beq.n	8004bd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bd8:	d94b      	bls.n	8004c72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Transmit+0xfa>
 8004be2:	8afb      	ldrh	r3, [r7, #22]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d13e      	bne.n	8004c66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	881a      	ldrh	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	1c9a      	adds	r2, r3, #2
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c0c:	e02b      	b.n	8004c66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d112      	bne.n	8004c42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c40:	e011      	b.n	8004c66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c42:	f7fe fa7b 	bl	800313c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d803      	bhi.n	8004c5a <HAL_SPI_Transmit+0x16c>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d102      	bne.n	8004c60 <HAL_SPI_Transmit+0x172>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c64:	e0a4      	b.n	8004db0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ce      	bne.n	8004c0e <HAL_SPI_Transmit+0x120>
 8004c70:	e07c      	b.n	8004d6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_Transmit+0x192>
 8004c7a:	8afb      	ldrh	r3, [r7, #22]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d170      	bne.n	8004d62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d912      	bls.n	8004cb0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	1c9a      	adds	r2, r3, #2
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b02      	subs	r3, #2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cae:	e058      	b.n	8004d62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004cd6:	e044      	b.n	8004d62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d12b      	bne.n	8004d3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d912      	bls.n	8004d16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	881a      	ldrh	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	1c9a      	adds	r2, r3, #2
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b02      	subs	r3, #2
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d14:	e025      	b.n	8004d62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	330c      	adds	r3, #12
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d3c:	e011      	b.n	8004d62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3e:	f7fe f9fd 	bl	800313c <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d803      	bhi.n	8004d56 <HAL_SPI_Transmit+0x268>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d102      	bne.n	8004d5c <HAL_SPI_Transmit+0x26e>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d60:	e026      	b.n	8004db0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1b5      	bne.n	8004cd8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fce3 	bl	800573c <SPI_EndRxTxTransaction>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e000      	b.n	8004db0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004dae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b088      	sub	sp, #32
 8004dce:	af02      	add	r7, sp, #8
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de6:	d112      	bne.n	8004e0e <HAL_SPI_Receive+0x44>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10e      	bne.n	8004e0e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2204      	movs	r2, #4
 8004df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	68b9      	ldr	r1, [r7, #8]
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f910 	bl	800502a <HAL_SPI_TransmitReceive>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	e109      	b.n	8005022 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_SPI_Receive+0x52>
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e102      	b.n	8005022 <HAL_SPI_Receive+0x258>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e24:	f7fe f98a 	bl	800313c <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d002      	beq.n	8004e3c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
 8004e38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e3a:	e0e9      	b.n	8005010 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <HAL_SPI_Receive+0x7e>
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e4c:	e0e0      	b.n	8005010 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2204      	movs	r2, #4
 8004e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	88fa      	ldrh	r2, [r7, #6]
 8004e6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e98:	d908      	bls.n	8004eac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e007      	b.n	8004ebc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ee4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d007      	beq.n	8004f04 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f0c:	d867      	bhi.n	8004fde <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f0e:	e030      	b.n	8004f72 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d117      	bne.n	8004f4e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f103 020c 	add.w	r2, r3, #12
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f4c:	e011      	b.n	8004f72 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4e:	f7fe f8f5 	bl	800313c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d803      	bhi.n	8004f66 <HAL_SPI_Receive+0x19c>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d102      	bne.n	8004f6c <HAL_SPI_Receive+0x1a2>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f70:	e04e      	b.n	8005010 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1c8      	bne.n	8004f10 <HAL_SPI_Receive+0x146>
 8004f7e:	e034      	b.n	8004fea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d115      	bne.n	8004fba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	1c9a      	adds	r2, r3, #2
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004fb8:	e011      	b.n	8004fde <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fba:	f7fe f8bf 	bl	800313c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_Receive+0x208>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_Receive+0x20e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fdc:	e018      	b.n	8005010 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ca      	bne.n	8004f80 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fb4c 	bl	800568c <SPI_EndRxTransaction>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
 800500c:	e000      	b.n	8005010 <HAL_SPI_Receive+0x246>
  }

error :
 800500e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08a      	sub	sp, #40	; 0x28
 800502e:	af00      	add	r7, sp, #0
 8005030:	60f8      	str	r0, [r7, #12]
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x26>
 800504c:	2302      	movs	r3, #2
 800504e:	e1fb      	b.n	8005448 <HAL_SPI_TransmitReceive+0x41e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005058:	f7fe f870 	bl	800313c <HAL_GetTick>
 800505c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005064:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005074:	7efb      	ldrb	r3, [r7, #27]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00e      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x6e>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005080:	d106      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d102      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x66>
 800508a:	7efb      	ldrb	r3, [r7, #27]
 800508c:	2b04      	cmp	r3, #4
 800508e:	d003      	beq.n	8005098 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005090:	2302      	movs	r3, #2
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005096:	e1cd      	b.n	8005434 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x80>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x80>
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050b0:	e1c0      	b.n	8005434 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b04      	cmp	r3, #4
 80050bc:	d003      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2205      	movs	r2, #5
 80050c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	887a      	ldrh	r2, [r7, #2]
 80050d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	887a      	ldrh	r2, [r7, #2]
 80050de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	887a      	ldrh	r2, [r7, #2]
 80050f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005108:	d802      	bhi.n	8005110 <HAL_SPI_TransmitReceive+0xe6>
 800510a:	8a3b      	ldrh	r3, [r7, #16]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d908      	bls.n	8005122 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800511e:	605a      	str	r2, [r3, #4]
 8005120:	e007      	b.n	8005132 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005130:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d007      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005158:	d97c      	bls.n	8005254 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x13e>
 8005162:	8a7b      	ldrh	r3, [r7, #18]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d169      	bne.n	800523c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005178:	1c9a      	adds	r2, r3, #2
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800518c:	e056      	b.n	800523c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11b      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x1aa>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d016      	beq.n	80051d4 <HAL_SPI_TransmitReceive+0x1aa>
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d113      	bne.n	80051d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d11c      	bne.n	800521c <HAL_SPI_TransmitReceive+0x1f2>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d016      	beq.n	800521c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	b292      	uxth	r2, r2
 80051fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	1c9a      	adds	r2, r3, #2
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005218:	2301      	movs	r3, #1
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800521c:	f7fd ff8e 	bl	800313c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005228:	429a      	cmp	r2, r3
 800522a:	d807      	bhi.n	800523c <HAL_SPI_TransmitReceive+0x212>
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005232:	d003      	beq.n	800523c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800523a:	e0fb      	b.n	8005434 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1a3      	bne.n	800518e <HAL_SPI_TransmitReceive+0x164>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d19d      	bne.n	800518e <HAL_SPI_TransmitReceive+0x164>
 8005252:	e0df      	b.n	8005414 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x23a>
 800525c:	8a7b      	ldrh	r3, [r7, #18]
 800525e:	2b01      	cmp	r3, #1
 8005260:	f040 80cb 	bne.w	80053fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d912      	bls.n	8005294 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	881a      	ldrh	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	1c9a      	adds	r2, r3, #2
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b02      	subs	r3, #2
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005292:	e0b2      	b.n	80053fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	7812      	ldrb	r2, [r2, #0]
 80052a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ba:	e09e      	b.n	80053fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d134      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x30a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d02f      	beq.n	8005334 <HAL_SPI_TransmitReceive+0x30a>
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d12c      	bne.n	8005334 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d912      	bls.n	800530a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b02      	subs	r3, #2
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005308:	e012      	b.n	8005330 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d148      	bne.n	80053d4 <HAL_SPI_TransmitReceive+0x3aa>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005348:	b29b      	uxth	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d042      	beq.n	80053d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d923      	bls.n	80053a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	b292      	uxth	r2, r2
 8005366:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b02      	subs	r3, #2
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d81f      	bhi.n	80053d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	e016      	b.n	80053d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f103 020c 	add.w	r2, r3, #12
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	3b01      	subs	r3, #1
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053d0:	2301      	movs	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80053d4:	f7fd feb2 	bl	800313c <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d803      	bhi.n	80053ec <HAL_SPI_TransmitReceive+0x3c2>
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d102      	bne.n	80053f2 <HAL_SPI_TransmitReceive+0x3c8>
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80053f8:	e01c      	b.n	8005434 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	f47f af5b 	bne.w	80052bc <HAL_SPI_TransmitReceive+0x292>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	f47f af54 	bne.w	80052bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f98f 	bl	800573c <SPI_EndRxTxTransaction>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
 8005430:	e000      	b.n	8005434 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005432:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005444:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005448:	4618      	mov	r0, r3
 800544a:	3728      	adds	r7, #40	; 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4613      	mov	r3, r2
 800545e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005460:	f7fd fe6c 	bl	800313c <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	4413      	add	r3, r2
 800546e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005470:	f7fd fe64 	bl	800313c <HAL_GetTick>
 8005474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	015b      	lsls	r3, r3, #5
 800547c:	0d1b      	lsrs	r3, r3, #20
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	fb02 f303 	mul.w	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005486:	e054      	b.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548e:	d050      	beq.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005490:	f7fd fe54 	bl	800313c <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	429a      	cmp	r2, r3
 800549e:	d902      	bls.n	80054a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d13d      	bne.n	8005522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d111      	bne.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	d004      	beq.n	80054d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d2:	d107      	bne.n	80054e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ec:	d10f      	bne.n	800550e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e017      	b.n	8005552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3b01      	subs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d19b      	bne.n	8005488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3720      	adds	r7, #32
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000004 	.word	0x20000004

08005560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005572:	f7fd fde3 	bl	800313c <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	4413      	add	r3, r2
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005582:	f7fd fddb 	bl	800313c <HAL_GetTick>
 8005586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005590:	4b3d      	ldr	r3, [pc, #244]	; (8005688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	00da      	lsls	r2, r3, #3
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	0d1b      	lsrs	r3, r3, #20
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055a8:	e060      	b.n	800566c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055b0:	d107      	bne.n	80055c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d050      	beq.n	800566c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ca:	f7fd fdb7 	bl	800313c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d902      	bls.n	80055e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d13d      	bne.n	800565c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f8:	d111      	bne.n	800561e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005602:	d004      	beq.n	800560e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d107      	bne.n	800561e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005626:	d10f      	bne.n	8005648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e010      	b.n	800567e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	3b01      	subs	r3, #1
 800566a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	429a      	cmp	r2, r3
 800567a:	d196      	bne.n	80055aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000004 	.word	0x20000004

0800568c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a0:	d111      	bne.n	80056c6 <SPI_EndRxTransaction+0x3a>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056aa:	d004      	beq.n	80056b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b4:	d107      	bne.n	80056c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2180      	movs	r1, #128	; 0x80
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff febd 	bl	8005450 <SPI_WaitFlagStateUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e023      	b.n	8005734 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f4:	d11d      	bne.n	8005732 <SPI_EndRxTransaction+0xa6>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fe:	d004      	beq.n	800570a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005708:	d113      	bne.n	8005732 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff ff22 	bl	8005560 <SPI_WaitFifoStateUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d007      	beq.n	8005732 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005726:	f043 0220 	orr.w	r2, r3, #32
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e000      	b.n	8005734 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2200      	movs	r2, #0
 8005750:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff03 	bl	8005560 <SPI_WaitFifoStateUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e027      	b.n	80057c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	9300      	str	r3, [sp, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	2180      	movs	r1, #128	; 0x80
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff fe68 	bl	8005450 <SPI_WaitFlagStateUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e014      	b.n	80057c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2200      	movs	r2, #0
 800579e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fedc 	bl	8005560 <SPI_WaitFifoStateUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b2:	f043 0220 	orr.w	r2, r3, #32
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e000      	b.n	80057c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e040      	b.n	800585c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fd faba 	bl	8002d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f022 0201 	bic.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8c0 	bl	800598c <UART_SetConfig>
 800580c:	4603      	mov	r3, r0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e022      	b.n	800585c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fae0 	bl	8005de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fb67 	bl	8005f28 <UART_CheckIdleState>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	; 0x28
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005878:	2b20      	cmp	r3, #32
 800587a:	f040 8082 	bne.w	8005982 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Transmit+0x26>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e07a      	b.n	8005984 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_UART_Transmit+0x38>
 8005898:	2302      	movs	r3, #2
 800589a:	e073      	b.n	8005984 <HAL_UART_Transmit+0x120>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2221      	movs	r2, #33	; 0x21
 80058b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fd fc43 	bl	800313c <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058d0:	d108      	bne.n	80058e4 <HAL_UART_Transmit+0x80>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	e003      	b.n	80058ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80058f4:	e02d      	b.n	8005952 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2200      	movs	r2, #0
 80058fe:	2180      	movs	r1, #128	; 0x80
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fb5a 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d001      	beq.n	8005910 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e039      	b.n	8005984 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10b      	bne.n	800592e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	881a      	ldrh	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005922:	b292      	uxth	r2, r2
 8005924:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	3302      	adds	r3, #2
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	e008      	b.n	8005940 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	b292      	uxth	r2, r2
 8005938:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3301      	adds	r3, #1
 800593e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1cb      	bne.n	80058f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2200      	movs	r2, #0
 8005966:	2140      	movs	r1, #64	; 0x40
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fb26 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e005      	b.n	8005984 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	3720      	adds	r7, #32
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800598c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005990:	b08a      	sub	sp, #40	; 0x28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	4bb4      	ldr	r3, [pc, #720]	; (8005c8c <UART_SetConfig+0x300>)
 80059bc:	4013      	ands	r3, r2
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4aa9      	ldr	r2, [pc, #676]	; (8005c90 <UART_SetConfig+0x304>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f4:	4313      	orrs	r3, r2
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4aa0      	ldr	r2, [pc, #640]	; (8005c94 <UART_SetConfig+0x308>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d126      	bne.n	8005a64 <UART_SetConfig+0xd8>
 8005a16:	4ba0      	ldr	r3, [pc, #640]	; (8005c98 <UART_SetConfig+0x30c>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f003 0303 	and.w	r3, r3, #3
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d81b      	bhi.n	8005a5c <UART_SetConfig+0xd0>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0xa0>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005a3d 	.word	0x08005a3d
 8005a30:	08005a4d 	.word	0x08005a4d
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a55 	.word	0x08005a55
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a42:	e080      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a4a:	e07c      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a52:	e078      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a5a:	e074      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e070      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a8c      	ldr	r2, [pc, #560]	; (8005c9c <UART_SetConfig+0x310>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d138      	bne.n	8005ae0 <UART_SetConfig+0x154>
 8005a6e:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <UART_SetConfig+0x30c>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	2b0c      	cmp	r3, #12
 8005a7a:	d82d      	bhi.n	8005ad8 <UART_SetConfig+0x14c>
 8005a7c:	a201      	add	r2, pc, #4	; (adr r2, 8005a84 <UART_SetConfig+0xf8>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005ab9 	.word	0x08005ab9
 8005a88:	08005ad9 	.word	0x08005ad9
 8005a8c:	08005ad9 	.word	0x08005ad9
 8005a90:	08005ad9 	.word	0x08005ad9
 8005a94:	08005ac9 	.word	0x08005ac9
 8005a98:	08005ad9 	.word	0x08005ad9
 8005a9c:	08005ad9 	.word	0x08005ad9
 8005aa0:	08005ad9 	.word	0x08005ad9
 8005aa4:	08005ac1 	.word	0x08005ac1
 8005aa8:	08005ad9 	.word	0x08005ad9
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ad1 	.word	0x08005ad1
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005abe:	e042      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac6:	e03e      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ace:	e03a      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad6:	e036      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ade:	e032      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a6a      	ldr	r2, [pc, #424]	; (8005c90 <UART_SetConfig+0x304>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d12a      	bne.n	8005b40 <UART_SetConfig+0x1b4>
 8005aea:	4b6b      	ldr	r3, [pc, #428]	; (8005c98 <UART_SetConfig+0x30c>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005af8:	d01a      	beq.n	8005b30 <UART_SetConfig+0x1a4>
 8005afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005afe:	d81b      	bhi.n	8005b38 <UART_SetConfig+0x1ac>
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b04:	d00c      	beq.n	8005b20 <UART_SetConfig+0x194>
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d815      	bhi.n	8005b38 <UART_SetConfig+0x1ac>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d003      	beq.n	8005b18 <UART_SetConfig+0x18c>
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d008      	beq.n	8005b28 <UART_SetConfig+0x19c>
 8005b16:	e00f      	b.n	8005b38 <UART_SetConfig+0x1ac>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e012      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005b20:	2302      	movs	r3, #2
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e00e      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005b28:	2304      	movs	r3, #4
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2e:	e00a      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005b30:	2308      	movs	r3, #8
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b36:	e006      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005b38:	2310      	movs	r3, #16
 8005b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b3e:	e002      	b.n	8005b46 <UART_SetConfig+0x1ba>
 8005b40:	2310      	movs	r3, #16
 8005b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a51      	ldr	r2, [pc, #324]	; (8005c90 <UART_SetConfig+0x304>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d17a      	bne.n	8005c46 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d824      	bhi.n	8005ba2 <UART_SetConfig+0x216>
 8005b58:	a201      	add	r2, pc, #4	; (adr r2, 8005b60 <UART_SetConfig+0x1d4>)
 8005b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5e:	bf00      	nop
 8005b60:	08005b85 	.word	0x08005b85
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b8d 	.word	0x08005b8d
 8005b6c:	08005ba3 	.word	0x08005ba3
 8005b70:	08005b93 	.word	0x08005b93
 8005b74:	08005ba3 	.word	0x08005ba3
 8005b78:	08005ba3 	.word	0x08005ba3
 8005b7c:	08005ba3 	.word	0x08005ba3
 8005b80:	08005b9b 	.word	0x08005b9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b84:	f7fe fb9c 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005b88:	61f8      	str	r0, [r7, #28]
        break;
 8005b8a:	e010      	b.n	8005bae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b8c:	4b44      	ldr	r3, [pc, #272]	; (8005ca0 <UART_SetConfig+0x314>)
 8005b8e:	61fb      	str	r3, [r7, #28]
        break;
 8005b90:	e00d      	b.n	8005bae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b92:	f7fe fafd 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005b96:	61f8      	str	r0, [r7, #28]
        break;
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b9e:	61fb      	str	r3, [r7, #28]
        break;
 8005ba0:	e005      	b.n	8005bae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005bac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8107 	beq.w	8005dc4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d305      	bcc.n	8005bd2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bcc:	69fa      	ldr	r2, [r7, #28]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d903      	bls.n	8005bda <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005bd8:	e0f4      	b.n	8005dc4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	461c      	mov	r4, r3
 8005be0:	4615      	mov	r5, r2
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	022b      	lsls	r3, r5, #8
 8005bec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bf0:	0222      	lsls	r2, r4, #8
 8005bf2:	68f9      	ldr	r1, [r7, #12]
 8005bf4:	6849      	ldr	r1, [r1, #4]
 8005bf6:	0849      	lsrs	r1, r1, #1
 8005bf8:	2000      	movs	r0, #0
 8005bfa:	4688      	mov	r8, r1
 8005bfc:	4681      	mov	r9, r0
 8005bfe:	eb12 0a08 	adds.w	sl, r2, r8
 8005c02:	eb43 0b09 	adc.w	fp, r3, r9
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c14:	4650      	mov	r0, sl
 8005c16:	4659      	mov	r1, fp
 8005c18:	f7fa ffe6 	bl	8000be8 <__aeabi_uldivmod>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4613      	mov	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c2a:	d308      	bcc.n	8005c3e <UART_SetConfig+0x2b2>
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c32:	d204      	bcs.n	8005c3e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	60da      	str	r2, [r3, #12]
 8005c3c:	e0c2      	b.n	8005dc4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c44:	e0be      	b.n	8005dc4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4e:	d16a      	bne.n	8005d26 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d834      	bhi.n	8005cc2 <UART_SetConfig+0x336>
 8005c58:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x2d4>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005c85 	.word	0x08005c85
 8005c64:	08005ca5 	.word	0x08005ca5
 8005c68:	08005cad 	.word	0x08005cad
 8005c6c:	08005cc3 	.word	0x08005cc3
 8005c70:	08005cb3 	.word	0x08005cb3
 8005c74:	08005cc3 	.word	0x08005cc3
 8005c78:	08005cc3 	.word	0x08005cc3
 8005c7c:	08005cc3 	.word	0x08005cc3
 8005c80:	08005cbb 	.word	0x08005cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c84:	f7fe fb1c 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005c88:	61f8      	str	r0, [r7, #28]
        break;
 8005c8a:	e020      	b.n	8005cce <UART_SetConfig+0x342>
 8005c8c:	efff69f3 	.word	0xefff69f3
 8005c90:	40008000 	.word	0x40008000
 8005c94:	40013800 	.word	0x40013800
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40004400 	.word	0x40004400
 8005ca0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca4:	f7fe fb22 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8005ca8:	61f8      	str	r0, [r7, #28]
        break;
 8005caa:	e010      	b.n	8005cce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cac:	4b4c      	ldr	r3, [pc, #304]	; (8005de0 <UART_SetConfig+0x454>)
 8005cae:	61fb      	str	r3, [r7, #28]
        break;
 8005cb0:	e00d      	b.n	8005cce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb2:	f7fe fa6d 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005cb6:	61f8      	str	r0, [r7, #28]
        break;
 8005cb8:	e009      	b.n	8005cce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cbe:	61fb      	str	r3, [r7, #28]
        break;
 8005cc0:	e005      	b.n	8005cce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d077      	beq.n	8005dc4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005a      	lsls	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	441a      	add	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b0f      	cmp	r3, #15
 8005cee:	d916      	bls.n	8005d1e <UART_SetConfig+0x392>
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf6:	d212      	bcs.n	8005d1e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	085b      	lsrs	r3, r3, #1
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	8afb      	ldrh	r3, [r7, #22]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	8afa      	ldrh	r2, [r7, #22]
 8005d1a:	60da      	str	r2, [r3, #12]
 8005d1c:	e052      	b.n	8005dc4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d24:	e04e      	b.n	8005dc4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d827      	bhi.n	8005d7e <UART_SetConfig+0x3f2>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x3a8>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d7f 	.word	0x08005d7f
 8005d44:	08005d6f 	.word	0x08005d6f
 8005d48:	08005d7f 	.word	0x08005d7f
 8005d4c:	08005d7f 	.word	0x08005d7f
 8005d50:	08005d7f 	.word	0x08005d7f
 8005d54:	08005d77 	.word	0x08005d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fe fab2 	bl	80042c0 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	61f8      	str	r0, [r7, #28]
        break;
 8005d5e:	e014      	b.n	8005d8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d60:	f7fe fac4 	bl	80042ec <HAL_RCC_GetPCLK2Freq>
 8005d64:	61f8      	str	r0, [r7, #28]
        break;
 8005d66:	e010      	b.n	8005d8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <UART_SetConfig+0x454>)
 8005d6a:	61fb      	str	r3, [r7, #28]
        break;
 8005d6c:	e00d      	b.n	8005d8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6e:	f7fe fa0f 	bl	8004190 <HAL_RCC_GetSysClockFreq>
 8005d72:	61f8      	str	r0, [r7, #28]
        break;
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	61fb      	str	r3, [r7, #28]
        break;
 8005d7c:	e005      	b.n	8005d8a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d88:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d019      	beq.n	8005dc4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085a      	lsrs	r2, r3, #1
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	441a      	add	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d909      	bls.n	8005dbe <UART_SetConfig+0x432>
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d205      	bcs.n	8005dbe <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e002      	b.n	8005dc4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dd0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3728      	adds	r7, #40	; 0x28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dde:	bf00      	nop
 8005de0:	00f42400 	.word	0x00f42400

08005de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e56:	f003 0308 	and.w	r3, r3, #8
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01a      	beq.n	8005efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee2:	d10a      	bne.n	8005efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f38:	f7fd f900 	bl	800313c <HAL_GetTick>
 8005f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d10e      	bne.n	8005f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f82d 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e023      	b.n	8005fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d10e      	bne.n	8005f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f817 	bl	8005fba <UART_WaitOnFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00d      	b.n	8005fb2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b09c      	sub	sp, #112	; 0x70
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fca:	e0a5      	b.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	f000 80a1 	beq.w	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd6:	f7fd f8b1 	bl	800313c <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d302      	bcc.n	8005fec <UART_WaitOnFlagUntilTimeout+0x32>
 8005fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d13e      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006000:	667b      	str	r3, [r7, #100]	; 0x64
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800600c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006010:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	663b      	str	r3, [r7, #96]	; 0x60
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800603e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006040:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800604c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e5      	bne.n	800601e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e067      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0304 	and.w	r3, r3, #4
 8006074:	2b00      	cmp	r3, #0
 8006076:	d04f      	beq.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006086:	d147      	bne.n	8006118 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006090:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e6      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	613b      	str	r3, [r7, #16]
   return(result);
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f023 0301 	bic.w	r3, r3, #1
 80060da:	66bb      	str	r3, [r7, #104]	; 0x68
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e4:	623a      	str	r2, [r7, #32]
 80060e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	69f9      	ldr	r1, [r7, #28]
 80060ea:	6a3a      	ldr	r2, [r7, #32]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e5      	bne.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e010      	b.n	800613a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	f43f af4a 	beq.w	8005fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3770      	adds	r7, #112	; 0x70
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	; (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000010 	.word	0x20000010

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	4d0d      	ldr	r5, [pc, #52]	; (8006188 <__libc_init_array+0x38>)
 8006154:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006156:	1b64      	subs	r4, r4, r5
 8006158:	10a4      	asrs	r4, r4, #2
 800615a:	2600      	movs	r6, #0
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	4d0b      	ldr	r5, [pc, #44]	; (8006190 <__libc_init_array+0x40>)
 8006162:	4c0c      	ldr	r4, [pc, #48]	; (8006194 <__libc_init_array+0x44>)
 8006164:	f002 ffb4 	bl	80090d0 <_init>
 8006168:	1b64      	subs	r4, r4, r5
 800616a:	10a4      	asrs	r4, r4, #2
 800616c:	2600      	movs	r6, #0
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	0800a0ac 	.word	0x0800a0ac
 800618c:	0800a0ac 	.word	0x0800a0ac
 8006190:	0800a0ac 	.word	0x0800a0ac
 8006194:	0800a0b0 	.word	0x0800a0b0

08006198 <memcpy>:
 8006198:	440a      	add	r2, r1
 800619a:	4291      	cmp	r1, r2
 800619c:	f100 33ff 	add.w	r3, r0, #4294967295
 80061a0:	d100      	bne.n	80061a4 <memcpy+0xc>
 80061a2:	4770      	bx	lr
 80061a4:	b510      	push	{r4, lr}
 80061a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ae:	4291      	cmp	r1, r2
 80061b0:	d1f9      	bne.n	80061a6 <memcpy+0xe>
 80061b2:	bd10      	pop	{r4, pc}

080061b4 <memset>:
 80061b4:	4402      	add	r2, r0
 80061b6:	4603      	mov	r3, r0
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d100      	bne.n	80061be <memset+0xa>
 80061bc:	4770      	bx	lr
 80061be:	f803 1b01 	strb.w	r1, [r3], #1
 80061c2:	e7f9      	b.n	80061b8 <memset+0x4>

080061c4 <__cvt>:
 80061c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c8:	ec55 4b10 	vmov	r4, r5, d0
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	460e      	mov	r6, r1
 80061d0:	4619      	mov	r1, r3
 80061d2:	462b      	mov	r3, r5
 80061d4:	bfbb      	ittet	lt
 80061d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80061da:	461d      	movlt	r5, r3
 80061dc:	2300      	movge	r3, #0
 80061de:	232d      	movlt	r3, #45	; 0x2d
 80061e0:	700b      	strb	r3, [r1, #0]
 80061e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061e8:	4691      	mov	r9, r2
 80061ea:	f023 0820 	bic.w	r8, r3, #32
 80061ee:	bfbc      	itt	lt
 80061f0:	4622      	movlt	r2, r4
 80061f2:	4614      	movlt	r4, r2
 80061f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f8:	d005      	beq.n	8006206 <__cvt+0x42>
 80061fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061fe:	d100      	bne.n	8006202 <__cvt+0x3e>
 8006200:	3601      	adds	r6, #1
 8006202:	2102      	movs	r1, #2
 8006204:	e000      	b.n	8006208 <__cvt+0x44>
 8006206:	2103      	movs	r1, #3
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	ab02      	add	r3, sp, #8
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	ec45 4b10 	vmov	d0, r4, r5
 8006214:	4653      	mov	r3, sl
 8006216:	4632      	mov	r2, r6
 8006218:	f000 fd16 	bl	8006c48 <_dtoa_r>
 800621c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006220:	4607      	mov	r7, r0
 8006222:	d102      	bne.n	800622a <__cvt+0x66>
 8006224:	f019 0f01 	tst.w	r9, #1
 8006228:	d022      	beq.n	8006270 <__cvt+0xac>
 800622a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800622e:	eb07 0906 	add.w	r9, r7, r6
 8006232:	d110      	bne.n	8006256 <__cvt+0x92>
 8006234:	783b      	ldrb	r3, [r7, #0]
 8006236:	2b30      	cmp	r3, #48	; 0x30
 8006238:	d10a      	bne.n	8006250 <__cvt+0x8c>
 800623a:	2200      	movs	r2, #0
 800623c:	2300      	movs	r3, #0
 800623e:	4620      	mov	r0, r4
 8006240:	4629      	mov	r1, r5
 8006242:	f7fa fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006246:	b918      	cbnz	r0, 8006250 <__cvt+0x8c>
 8006248:	f1c6 0601 	rsb	r6, r6, #1
 800624c:	f8ca 6000 	str.w	r6, [sl]
 8006250:	f8da 3000 	ldr.w	r3, [sl]
 8006254:	4499      	add	r9, r3
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	4620      	mov	r0, r4
 800625c:	4629      	mov	r1, r5
 800625e:	f7fa fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006262:	b108      	cbz	r0, 8006268 <__cvt+0xa4>
 8006264:	f8cd 900c 	str.w	r9, [sp, #12]
 8006268:	2230      	movs	r2, #48	; 0x30
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	454b      	cmp	r3, r9
 800626e:	d307      	bcc.n	8006280 <__cvt+0xbc>
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006274:	1bdb      	subs	r3, r3, r7
 8006276:	4638      	mov	r0, r7
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	b004      	add	sp, #16
 800627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006280:	1c59      	adds	r1, r3, #1
 8006282:	9103      	str	r1, [sp, #12]
 8006284:	701a      	strb	r2, [r3, #0]
 8006286:	e7f0      	b.n	800626a <__cvt+0xa6>

08006288 <__exponent>:
 8006288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800628a:	4603      	mov	r3, r0
 800628c:	2900      	cmp	r1, #0
 800628e:	bfb8      	it	lt
 8006290:	4249      	neglt	r1, r1
 8006292:	f803 2b02 	strb.w	r2, [r3], #2
 8006296:	bfb4      	ite	lt
 8006298:	222d      	movlt	r2, #45	; 0x2d
 800629a:	222b      	movge	r2, #43	; 0x2b
 800629c:	2909      	cmp	r1, #9
 800629e:	7042      	strb	r2, [r0, #1]
 80062a0:	dd2a      	ble.n	80062f8 <__exponent+0x70>
 80062a2:	f10d 0407 	add.w	r4, sp, #7
 80062a6:	46a4      	mov	ip, r4
 80062a8:	270a      	movs	r7, #10
 80062aa:	46a6      	mov	lr, r4
 80062ac:	460a      	mov	r2, r1
 80062ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80062b2:	fb07 1516 	mls	r5, r7, r6, r1
 80062b6:	3530      	adds	r5, #48	; 0x30
 80062b8:	2a63      	cmp	r2, #99	; 0x63
 80062ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80062be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062c2:	4631      	mov	r1, r6
 80062c4:	dcf1      	bgt.n	80062aa <__exponent+0x22>
 80062c6:	3130      	adds	r1, #48	; 0x30
 80062c8:	f1ae 0502 	sub.w	r5, lr, #2
 80062cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062d0:	1c44      	adds	r4, r0, #1
 80062d2:	4629      	mov	r1, r5
 80062d4:	4561      	cmp	r1, ip
 80062d6:	d30a      	bcc.n	80062ee <__exponent+0x66>
 80062d8:	f10d 0209 	add.w	r2, sp, #9
 80062dc:	eba2 020e 	sub.w	r2, r2, lr
 80062e0:	4565      	cmp	r5, ip
 80062e2:	bf88      	it	hi
 80062e4:	2200      	movhi	r2, #0
 80062e6:	4413      	add	r3, r2
 80062e8:	1a18      	subs	r0, r3, r0
 80062ea:	b003      	add	sp, #12
 80062ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062f6:	e7ed      	b.n	80062d4 <__exponent+0x4c>
 80062f8:	2330      	movs	r3, #48	; 0x30
 80062fa:	3130      	adds	r1, #48	; 0x30
 80062fc:	7083      	strb	r3, [r0, #2]
 80062fe:	70c1      	strb	r1, [r0, #3]
 8006300:	1d03      	adds	r3, r0, #4
 8006302:	e7f1      	b.n	80062e8 <__exponent+0x60>

08006304 <_printf_float>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	ed2d 8b02 	vpush	{d8}
 800630c:	b08d      	sub	sp, #52	; 0x34
 800630e:	460c      	mov	r4, r1
 8006310:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006314:	4616      	mov	r6, r2
 8006316:	461f      	mov	r7, r3
 8006318:	4605      	mov	r5, r0
 800631a:	f001 fa83 	bl	8007824 <_localeconv_r>
 800631e:	f8d0 a000 	ldr.w	sl, [r0]
 8006322:	4650      	mov	r0, sl
 8006324:	f7f9 ff54 	bl	80001d0 <strlen>
 8006328:	2300      	movs	r3, #0
 800632a:	930a      	str	r3, [sp, #40]	; 0x28
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	9305      	str	r3, [sp, #20]
 8006330:	f8d8 3000 	ldr.w	r3, [r8]
 8006334:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006338:	3307      	adds	r3, #7
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	f103 0208 	add.w	r2, r3, #8
 8006342:	f8c8 2000 	str.w	r2, [r8]
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800634e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006356:	9307      	str	r3, [sp, #28]
 8006358:	f8cd 8018 	str.w	r8, [sp, #24]
 800635c:	ee08 0a10 	vmov	s16, r0
 8006360:	4b9f      	ldr	r3, [pc, #636]	; (80065e0 <_printf_float+0x2dc>)
 8006362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	f7fa fbdf 	bl	8000b2c <__aeabi_dcmpun>
 800636e:	bb88      	cbnz	r0, 80063d4 <_printf_float+0xd0>
 8006370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006374:	4b9a      	ldr	r3, [pc, #616]	; (80065e0 <_printf_float+0x2dc>)
 8006376:	f04f 32ff 	mov.w	r2, #4294967295
 800637a:	f7fa fbb9 	bl	8000af0 <__aeabi_dcmple>
 800637e:	bb48      	cbnz	r0, 80063d4 <_printf_float+0xd0>
 8006380:	2200      	movs	r2, #0
 8006382:	2300      	movs	r3, #0
 8006384:	4640      	mov	r0, r8
 8006386:	4649      	mov	r1, r9
 8006388:	f7fa fba8 	bl	8000adc <__aeabi_dcmplt>
 800638c:	b110      	cbz	r0, 8006394 <_printf_float+0x90>
 800638e:	232d      	movs	r3, #45	; 0x2d
 8006390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006394:	4b93      	ldr	r3, [pc, #588]	; (80065e4 <_printf_float+0x2e0>)
 8006396:	4894      	ldr	r0, [pc, #592]	; (80065e8 <_printf_float+0x2e4>)
 8006398:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800639c:	bf94      	ite	ls
 800639e:	4698      	movls	r8, r3
 80063a0:	4680      	movhi	r8, r0
 80063a2:	2303      	movs	r3, #3
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	9b05      	ldr	r3, [sp, #20]
 80063a8:	f023 0204 	bic.w	r2, r3, #4
 80063ac:	6022      	str	r2, [r4, #0]
 80063ae:	f04f 0900 	mov.w	r9, #0
 80063b2:	9700      	str	r7, [sp, #0]
 80063b4:	4633      	mov	r3, r6
 80063b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063b8:	4621      	mov	r1, r4
 80063ba:	4628      	mov	r0, r5
 80063bc:	f000 f9d8 	bl	8006770 <_printf_common>
 80063c0:	3001      	adds	r0, #1
 80063c2:	f040 8090 	bne.w	80064e6 <_printf_float+0x1e2>
 80063c6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ca:	b00d      	add	sp, #52	; 0x34
 80063cc:	ecbd 8b02 	vpop	{d8}
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	4640      	mov	r0, r8
 80063da:	4649      	mov	r1, r9
 80063dc:	f7fa fba6 	bl	8000b2c <__aeabi_dcmpun>
 80063e0:	b140      	cbz	r0, 80063f4 <_printf_float+0xf0>
 80063e2:	464b      	mov	r3, r9
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bfbc      	itt	lt
 80063e8:	232d      	movlt	r3, #45	; 0x2d
 80063ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ee:	487f      	ldr	r0, [pc, #508]	; (80065ec <_printf_float+0x2e8>)
 80063f0:	4b7f      	ldr	r3, [pc, #508]	; (80065f0 <_printf_float+0x2ec>)
 80063f2:	e7d1      	b.n	8006398 <_printf_float+0x94>
 80063f4:	6863      	ldr	r3, [r4, #4]
 80063f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063fa:	9206      	str	r2, [sp, #24]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	d13f      	bne.n	8006480 <_printf_float+0x17c>
 8006400:	2306      	movs	r3, #6
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	9b05      	ldr	r3, [sp, #20]
 8006406:	6861      	ldr	r1, [r4, #4]
 8006408:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800640c:	2300      	movs	r3, #0
 800640e:	9303      	str	r3, [sp, #12]
 8006410:	ab0a      	add	r3, sp, #40	; 0x28
 8006412:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006416:	ab09      	add	r3, sp, #36	; 0x24
 8006418:	ec49 8b10 	vmov	d0, r8, r9
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6022      	str	r2, [r4, #0]
 8006420:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006424:	4628      	mov	r0, r5
 8006426:	f7ff fecd 	bl	80061c4 <__cvt>
 800642a:	9b06      	ldr	r3, [sp, #24]
 800642c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800642e:	2b47      	cmp	r3, #71	; 0x47
 8006430:	4680      	mov	r8, r0
 8006432:	d108      	bne.n	8006446 <_printf_float+0x142>
 8006434:	1cc8      	adds	r0, r1, #3
 8006436:	db02      	blt.n	800643e <_printf_float+0x13a>
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	4299      	cmp	r1, r3
 800643c:	dd41      	ble.n	80064c2 <_printf_float+0x1be>
 800643e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006442:	fa5f fb8b 	uxtb.w	fp, fp
 8006446:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800644a:	d820      	bhi.n	800648e <_printf_float+0x18a>
 800644c:	3901      	subs	r1, #1
 800644e:	465a      	mov	r2, fp
 8006450:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006454:	9109      	str	r1, [sp, #36]	; 0x24
 8006456:	f7ff ff17 	bl	8006288 <__exponent>
 800645a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800645c:	1813      	adds	r3, r2, r0
 800645e:	2a01      	cmp	r2, #1
 8006460:	4681      	mov	r9, r0
 8006462:	6123      	str	r3, [r4, #16]
 8006464:	dc02      	bgt.n	800646c <_printf_float+0x168>
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	07d2      	lsls	r2, r2, #31
 800646a:	d501      	bpl.n	8006470 <_printf_float+0x16c>
 800646c:	3301      	adds	r3, #1
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006474:	2b00      	cmp	r3, #0
 8006476:	d09c      	beq.n	80063b2 <_printf_float+0xae>
 8006478:	232d      	movs	r3, #45	; 0x2d
 800647a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647e:	e798      	b.n	80063b2 <_printf_float+0xae>
 8006480:	9a06      	ldr	r2, [sp, #24]
 8006482:	2a47      	cmp	r2, #71	; 0x47
 8006484:	d1be      	bne.n	8006404 <_printf_float+0x100>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1bc      	bne.n	8006404 <_printf_float+0x100>
 800648a:	2301      	movs	r3, #1
 800648c:	e7b9      	b.n	8006402 <_printf_float+0xfe>
 800648e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006492:	d118      	bne.n	80064c6 <_printf_float+0x1c2>
 8006494:	2900      	cmp	r1, #0
 8006496:	6863      	ldr	r3, [r4, #4]
 8006498:	dd0b      	ble.n	80064b2 <_printf_float+0x1ae>
 800649a:	6121      	str	r1, [r4, #16]
 800649c:	b913      	cbnz	r3, 80064a4 <_printf_float+0x1a0>
 800649e:	6822      	ldr	r2, [r4, #0]
 80064a0:	07d0      	lsls	r0, r2, #31
 80064a2:	d502      	bpl.n	80064aa <_printf_float+0x1a6>
 80064a4:	3301      	adds	r3, #1
 80064a6:	440b      	add	r3, r1
 80064a8:	6123      	str	r3, [r4, #16]
 80064aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80064ac:	f04f 0900 	mov.w	r9, #0
 80064b0:	e7de      	b.n	8006470 <_printf_float+0x16c>
 80064b2:	b913      	cbnz	r3, 80064ba <_printf_float+0x1b6>
 80064b4:	6822      	ldr	r2, [r4, #0]
 80064b6:	07d2      	lsls	r2, r2, #31
 80064b8:	d501      	bpl.n	80064be <_printf_float+0x1ba>
 80064ba:	3302      	adds	r3, #2
 80064bc:	e7f4      	b.n	80064a8 <_printf_float+0x1a4>
 80064be:	2301      	movs	r3, #1
 80064c0:	e7f2      	b.n	80064a8 <_printf_float+0x1a4>
 80064c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80064c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c8:	4299      	cmp	r1, r3
 80064ca:	db05      	blt.n	80064d8 <_printf_float+0x1d4>
 80064cc:	6823      	ldr	r3, [r4, #0]
 80064ce:	6121      	str	r1, [r4, #16]
 80064d0:	07d8      	lsls	r0, r3, #31
 80064d2:	d5ea      	bpl.n	80064aa <_printf_float+0x1a6>
 80064d4:	1c4b      	adds	r3, r1, #1
 80064d6:	e7e7      	b.n	80064a8 <_printf_float+0x1a4>
 80064d8:	2900      	cmp	r1, #0
 80064da:	bfd4      	ite	le
 80064dc:	f1c1 0202 	rsble	r2, r1, #2
 80064e0:	2201      	movgt	r2, #1
 80064e2:	4413      	add	r3, r2
 80064e4:	e7e0      	b.n	80064a8 <_printf_float+0x1a4>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	055a      	lsls	r2, r3, #21
 80064ea:	d407      	bmi.n	80064fc <_printf_float+0x1f8>
 80064ec:	6923      	ldr	r3, [r4, #16]
 80064ee:	4642      	mov	r2, r8
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	d12c      	bne.n	8006554 <_printf_float+0x250>
 80064fa:	e764      	b.n	80063c6 <_printf_float+0xc2>
 80064fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006500:	f240 80e0 	bls.w	80066c4 <_printf_float+0x3c0>
 8006504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006508:	2200      	movs	r2, #0
 800650a:	2300      	movs	r3, #0
 800650c:	f7fa fadc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006510:	2800      	cmp	r0, #0
 8006512:	d034      	beq.n	800657e <_printf_float+0x27a>
 8006514:	4a37      	ldr	r2, [pc, #220]	; (80065f4 <_printf_float+0x2f0>)
 8006516:	2301      	movs	r3, #1
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f af51 	beq.w	80063c6 <_printf_float+0xc2>
 8006524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006528:	429a      	cmp	r2, r3
 800652a:	db02      	blt.n	8006532 <_printf_float+0x22e>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	07d8      	lsls	r0, r3, #31
 8006530:	d510      	bpl.n	8006554 <_printf_float+0x250>
 8006532:	ee18 3a10 	vmov	r3, s16
 8006536:	4652      	mov	r2, sl
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af41 	beq.w	80063c6 <_printf_float+0xc2>
 8006544:	f04f 0800 	mov.w	r8, #0
 8006548:	f104 091a 	add.w	r9, r4, #26
 800654c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800654e:	3b01      	subs	r3, #1
 8006550:	4543      	cmp	r3, r8
 8006552:	dc09      	bgt.n	8006568 <_printf_float+0x264>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	079b      	lsls	r3, r3, #30
 8006558:	f100 8105 	bmi.w	8006766 <_printf_float+0x462>
 800655c:	68e0      	ldr	r0, [r4, #12]
 800655e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006560:	4298      	cmp	r0, r3
 8006562:	bfb8      	it	lt
 8006564:	4618      	movlt	r0, r3
 8006566:	e730      	b.n	80063ca <_printf_float+0xc6>
 8006568:	2301      	movs	r3, #1
 800656a:	464a      	mov	r2, r9
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af27 	beq.w	80063c6 <_printf_float+0xc2>
 8006578:	f108 0801 	add.w	r8, r8, #1
 800657c:	e7e6      	b.n	800654c <_printf_float+0x248>
 800657e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	dc39      	bgt.n	80065f8 <_printf_float+0x2f4>
 8006584:	4a1b      	ldr	r2, [pc, #108]	; (80065f4 <_printf_float+0x2f0>)
 8006586:	2301      	movs	r3, #1
 8006588:	4631      	mov	r1, r6
 800658a:	4628      	mov	r0, r5
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f af19 	beq.w	80063c6 <_printf_float+0xc2>
 8006594:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006598:	4313      	orrs	r3, r2
 800659a:	d102      	bne.n	80065a2 <_printf_float+0x29e>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07d9      	lsls	r1, r3, #31
 80065a0:	d5d8      	bpl.n	8006554 <_printf_float+0x250>
 80065a2:	ee18 3a10 	vmov	r3, s16
 80065a6:	4652      	mov	r2, sl
 80065a8:	4631      	mov	r1, r6
 80065aa:	4628      	mov	r0, r5
 80065ac:	47b8      	blx	r7
 80065ae:	3001      	adds	r0, #1
 80065b0:	f43f af09 	beq.w	80063c6 <_printf_float+0xc2>
 80065b4:	f04f 0900 	mov.w	r9, #0
 80065b8:	f104 0a1a 	add.w	sl, r4, #26
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	425b      	negs	r3, r3
 80065c0:	454b      	cmp	r3, r9
 80065c2:	dc01      	bgt.n	80065c8 <_printf_float+0x2c4>
 80065c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c6:	e792      	b.n	80064ee <_printf_float+0x1ea>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4652      	mov	r2, sl
 80065cc:	4631      	mov	r1, r6
 80065ce:	4628      	mov	r0, r5
 80065d0:	47b8      	blx	r7
 80065d2:	3001      	adds	r0, #1
 80065d4:	f43f aef7 	beq.w	80063c6 <_printf_float+0xc2>
 80065d8:	f109 0901 	add.w	r9, r9, #1
 80065dc:	e7ee      	b.n	80065bc <_printf_float+0x2b8>
 80065de:	bf00      	nop
 80065e0:	7fefffff 	.word	0x7fefffff
 80065e4:	08009ccc 	.word	0x08009ccc
 80065e8:	08009cd0 	.word	0x08009cd0
 80065ec:	08009cd8 	.word	0x08009cd8
 80065f0:	08009cd4 	.word	0x08009cd4
 80065f4:	08009cdc 	.word	0x08009cdc
 80065f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065fc:	429a      	cmp	r2, r3
 80065fe:	bfa8      	it	ge
 8006600:	461a      	movge	r2, r3
 8006602:	2a00      	cmp	r2, #0
 8006604:	4691      	mov	r9, r2
 8006606:	dc37      	bgt.n	8006678 <_printf_float+0x374>
 8006608:	f04f 0b00 	mov.w	fp, #0
 800660c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006610:	f104 021a 	add.w	r2, r4, #26
 8006614:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006616:	9305      	str	r3, [sp, #20]
 8006618:	eba3 0309 	sub.w	r3, r3, r9
 800661c:	455b      	cmp	r3, fp
 800661e:	dc33      	bgt.n	8006688 <_printf_float+0x384>
 8006620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006624:	429a      	cmp	r2, r3
 8006626:	db3b      	blt.n	80066a0 <_printf_float+0x39c>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	07da      	lsls	r2, r3, #31
 800662c:	d438      	bmi.n	80066a0 <_printf_float+0x39c>
 800662e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006630:	9a05      	ldr	r2, [sp, #20]
 8006632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006634:	1a9a      	subs	r2, r3, r2
 8006636:	eba3 0901 	sub.w	r9, r3, r1
 800663a:	4591      	cmp	r9, r2
 800663c:	bfa8      	it	ge
 800663e:	4691      	movge	r9, r2
 8006640:	f1b9 0f00 	cmp.w	r9, #0
 8006644:	dc35      	bgt.n	80066b2 <_printf_float+0x3ae>
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800664e:	f104 0a1a 	add.w	sl, r4, #26
 8006652:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006656:	1a9b      	subs	r3, r3, r2
 8006658:	eba3 0309 	sub.w	r3, r3, r9
 800665c:	4543      	cmp	r3, r8
 800665e:	f77f af79 	ble.w	8006554 <_printf_float+0x250>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f aeaa 	beq.w	80063c6 <_printf_float+0xc2>
 8006672:	f108 0801 	add.w	r8, r8, #1
 8006676:	e7ec      	b.n	8006652 <_printf_float+0x34e>
 8006678:	4613      	mov	r3, r2
 800667a:	4631      	mov	r1, r6
 800667c:	4642      	mov	r2, r8
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	d1c0      	bne.n	8006608 <_printf_float+0x304>
 8006686:	e69e      	b.n	80063c6 <_printf_float+0xc2>
 8006688:	2301      	movs	r3, #1
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	9205      	str	r2, [sp, #20]
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	f43f ae97 	beq.w	80063c6 <_printf_float+0xc2>
 8006698:	9a05      	ldr	r2, [sp, #20]
 800669a:	f10b 0b01 	add.w	fp, fp, #1
 800669e:	e7b9      	b.n	8006614 <_printf_float+0x310>
 80066a0:	ee18 3a10 	vmov	r3, s16
 80066a4:	4652      	mov	r2, sl
 80066a6:	4631      	mov	r1, r6
 80066a8:	4628      	mov	r0, r5
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	d1be      	bne.n	800662e <_printf_float+0x32a>
 80066b0:	e689      	b.n	80063c6 <_printf_float+0xc2>
 80066b2:	9a05      	ldr	r2, [sp, #20]
 80066b4:	464b      	mov	r3, r9
 80066b6:	4442      	add	r2, r8
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	d1c1      	bne.n	8006646 <_printf_float+0x342>
 80066c2:	e680      	b.n	80063c6 <_printf_float+0xc2>
 80066c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c6:	2a01      	cmp	r2, #1
 80066c8:	dc01      	bgt.n	80066ce <_printf_float+0x3ca>
 80066ca:	07db      	lsls	r3, r3, #31
 80066cc:	d538      	bpl.n	8006740 <_printf_float+0x43c>
 80066ce:	2301      	movs	r3, #1
 80066d0:	4642      	mov	r2, r8
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f ae74 	beq.w	80063c6 <_printf_float+0xc2>
 80066de:	ee18 3a10 	vmov	r3, s16
 80066e2:	4652      	mov	r2, sl
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	47b8      	blx	r7
 80066ea:	3001      	adds	r0, #1
 80066ec:	f43f ae6b 	beq.w	80063c6 <_printf_float+0xc2>
 80066f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066f4:	2200      	movs	r2, #0
 80066f6:	2300      	movs	r3, #0
 80066f8:	f7fa f9e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80066fc:	b9d8      	cbnz	r0, 8006736 <_printf_float+0x432>
 80066fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006700:	f108 0201 	add.w	r2, r8, #1
 8006704:	3b01      	subs	r3, #1
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	d10e      	bne.n	800672e <_printf_float+0x42a>
 8006710:	e659      	b.n	80063c6 <_printf_float+0xc2>
 8006712:	2301      	movs	r3, #1
 8006714:	4652      	mov	r2, sl
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	f43f ae52 	beq.w	80063c6 <_printf_float+0xc2>
 8006722:	f108 0801 	add.w	r8, r8, #1
 8006726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006728:	3b01      	subs	r3, #1
 800672a:	4543      	cmp	r3, r8
 800672c:	dcf1      	bgt.n	8006712 <_printf_float+0x40e>
 800672e:	464b      	mov	r3, r9
 8006730:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006734:	e6dc      	b.n	80064f0 <_printf_float+0x1ec>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	f104 0a1a 	add.w	sl, r4, #26
 800673e:	e7f2      	b.n	8006726 <_printf_float+0x422>
 8006740:	2301      	movs	r3, #1
 8006742:	4642      	mov	r2, r8
 8006744:	e7df      	b.n	8006706 <_printf_float+0x402>
 8006746:	2301      	movs	r3, #1
 8006748:	464a      	mov	r2, r9
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f ae38 	beq.w	80063c6 <_printf_float+0xc2>
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800675e:	1a5b      	subs	r3, r3, r1
 8006760:	4543      	cmp	r3, r8
 8006762:	dcf0      	bgt.n	8006746 <_printf_float+0x442>
 8006764:	e6fa      	b.n	800655c <_printf_float+0x258>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 0919 	add.w	r9, r4, #25
 800676e:	e7f4      	b.n	800675a <_printf_float+0x456>

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4616      	mov	r6, r2
 8006776:	4699      	mov	r9, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006780:	4293      	cmp	r3, r2
 8006782:	bfb8      	it	lt
 8006784:	4613      	movlt	r3, r2
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800678c:	4607      	mov	r7, r0
 800678e:	460c      	mov	r4, r1
 8006790:	b10a      	cbz	r2, 8006796 <_printf_common+0x26>
 8006792:	3301      	adds	r3, #1
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	0699      	lsls	r1, r3, #26
 800679a:	bf42      	ittt	mi
 800679c:	6833      	ldrmi	r3, [r6, #0]
 800679e:	3302      	addmi	r3, #2
 80067a0:	6033      	strmi	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d106      	bne.n	80067b8 <_printf_common+0x48>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	6832      	ldr	r2, [r6, #0]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc26      	bgt.n	8006806 <_printf_common+0x96>
 80067b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067bc:	1e13      	subs	r3, r2, #0
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d42b      	bmi.n	8006820 <_printf_common+0xb0>
 80067c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d01e      	beq.n	8006814 <_printf_common+0xa4>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	68e5      	ldr	r5, [r4, #12]
 80067da:	6832      	ldr	r2, [r6, #0]
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	bf08      	it	eq
 80067e4:	1aad      	subeq	r5, r5, r2
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	bf0c      	ite	eq
 80067ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f0:	2500      	movne	r5, #0
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bfc4      	itt	gt
 80067f6:	1a9b      	subgt	r3, r3, r2
 80067f8:	18ed      	addgt	r5, r5, r3
 80067fa:	2600      	movs	r6, #0
 80067fc:	341a      	adds	r4, #26
 80067fe:	42b5      	cmp	r5, r6
 8006800:	d11a      	bne.n	8006838 <_printf_common+0xc8>
 8006802:	2000      	movs	r0, #0
 8006804:	e008      	b.n	8006818 <_printf_common+0xa8>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4649      	mov	r1, r9
 800680c:	4638      	mov	r0, r7
 800680e:	47c0      	blx	r8
 8006810:	3001      	adds	r0, #1
 8006812:	d103      	bne.n	800681c <_printf_common+0xac>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	3501      	adds	r5, #1
 800681e:	e7c6      	b.n	80067ae <_printf_common+0x3e>
 8006820:	18e1      	adds	r1, r4, r3
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	2030      	movs	r0, #48	; 0x30
 8006826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682a:	4422      	add	r2, r4
 800682c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006834:	3302      	adds	r3, #2
 8006836:	e7c7      	b.n	80067c8 <_printf_common+0x58>
 8006838:	2301      	movs	r3, #1
 800683a:	4622      	mov	r2, r4
 800683c:	4649      	mov	r1, r9
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d0e6      	beq.n	8006814 <_printf_common+0xa4>
 8006846:	3601      	adds	r6, #1
 8006848:	e7d9      	b.n	80067fe <_printf_common+0x8e>
	...

0800684c <_printf_i>:
 800684c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	7e0f      	ldrb	r7, [r1, #24]
 8006852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006854:	2f78      	cmp	r7, #120	; 0x78
 8006856:	4691      	mov	r9, r2
 8006858:	4680      	mov	r8, r0
 800685a:	460c      	mov	r4, r1
 800685c:	469a      	mov	sl, r3
 800685e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006862:	d807      	bhi.n	8006874 <_printf_i+0x28>
 8006864:	2f62      	cmp	r7, #98	; 0x62
 8006866:	d80a      	bhi.n	800687e <_printf_i+0x32>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f000 80d8 	beq.w	8006a1e <_printf_i+0x1d2>
 800686e:	2f58      	cmp	r7, #88	; 0x58
 8006870:	f000 80a3 	beq.w	80069ba <_printf_i+0x16e>
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800687c:	e03a      	b.n	80068f4 <_printf_i+0xa8>
 800687e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006882:	2b15      	cmp	r3, #21
 8006884:	d8f6      	bhi.n	8006874 <_printf_i+0x28>
 8006886:	a101      	add	r1, pc, #4	; (adr r1, 800688c <_printf_i+0x40>)
 8006888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068f9 	.word	0x080068f9
 8006894:	08006875 	.word	0x08006875
 8006898:	08006875 	.word	0x08006875
 800689c:	08006875 	.word	0x08006875
 80068a0:	08006875 	.word	0x08006875
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006875 	.word	0x08006875
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006929 	.word	0x08006929
 80068c0:	080069e7 	.word	0x080069e7
 80068c4:	08006875 	.word	0x08006875
 80068c8:	08006875 	.word	0x08006875
 80068cc:	08006a27 	.word	0x08006a27
 80068d0:	08006875 	.word	0x08006875
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006875 	.word	0x08006875
 80068dc:	08006875 	.word	0x08006875
 80068e0:	080069ef 	.word	0x080069ef
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	602a      	str	r2, [r5, #0]
 80068ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a3      	b.n	8006a40 <_printf_i+0x1f4>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	6829      	ldr	r1, [r5, #0]
 80068fc:	0606      	lsls	r6, r0, #24
 80068fe:	f101 0304 	add.w	r3, r1, #4
 8006902:	d50a      	bpl.n	800691a <_printf_i+0xce>
 8006904:	680e      	ldr	r6, [r1, #0]
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	2e00      	cmp	r6, #0
 800690a:	da03      	bge.n	8006914 <_printf_i+0xc8>
 800690c:	232d      	movs	r3, #45	; 0x2d
 800690e:	4276      	negs	r6, r6
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006914:	485e      	ldr	r0, [pc, #376]	; (8006a90 <_printf_i+0x244>)
 8006916:	230a      	movs	r3, #10
 8006918:	e019      	b.n	800694e <_printf_i+0x102>
 800691a:	680e      	ldr	r6, [r1, #0]
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006922:	bf18      	it	ne
 8006924:	b236      	sxthne	r6, r6
 8006926:	e7ef      	b.n	8006908 <_printf_i+0xbc>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	6029      	str	r1, [r5, #0]
 8006930:	0601      	lsls	r1, r0, #24
 8006932:	d501      	bpl.n	8006938 <_printf_i+0xec>
 8006934:	681e      	ldr	r6, [r3, #0]
 8006936:	e002      	b.n	800693e <_printf_i+0xf2>
 8006938:	0646      	lsls	r6, r0, #25
 800693a:	d5fb      	bpl.n	8006934 <_printf_i+0xe8>
 800693c:	881e      	ldrh	r6, [r3, #0]
 800693e:	4854      	ldr	r0, [pc, #336]	; (8006a90 <_printf_i+0x244>)
 8006940:	2f6f      	cmp	r7, #111	; 0x6f
 8006942:	bf0c      	ite	eq
 8006944:	2308      	moveq	r3, #8
 8006946:	230a      	movne	r3, #10
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694e:	6865      	ldr	r5, [r4, #4]
 8006950:	60a5      	str	r5, [r4, #8]
 8006952:	2d00      	cmp	r5, #0
 8006954:	bfa2      	ittt	ge
 8006956:	6821      	ldrge	r1, [r4, #0]
 8006958:	f021 0104 	bicge.w	r1, r1, #4
 800695c:	6021      	strge	r1, [r4, #0]
 800695e:	b90e      	cbnz	r6, 8006964 <_printf_i+0x118>
 8006960:	2d00      	cmp	r5, #0
 8006962:	d04d      	beq.n	8006a00 <_printf_i+0x1b4>
 8006964:	4615      	mov	r5, r2
 8006966:	fbb6 f1f3 	udiv	r1, r6, r3
 800696a:	fb03 6711 	mls	r7, r3, r1, r6
 800696e:	5dc7      	ldrb	r7, [r0, r7]
 8006970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006974:	4637      	mov	r7, r6
 8006976:	42bb      	cmp	r3, r7
 8006978:	460e      	mov	r6, r1
 800697a:	d9f4      	bls.n	8006966 <_printf_i+0x11a>
 800697c:	2b08      	cmp	r3, #8
 800697e:	d10b      	bne.n	8006998 <_printf_i+0x14c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07de      	lsls	r6, r3, #31
 8006984:	d508      	bpl.n	8006998 <_printf_i+0x14c>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4299      	cmp	r1, r3
 800698c:	bfde      	ittt	le
 800698e:	2330      	movle	r3, #48	; 0x30
 8006990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006998:	1b52      	subs	r2, r2, r5
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	464b      	mov	r3, r9
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fee2 	bl	8006770 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14c      	bne.n	8006a4a <_printf_i+0x1fe>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	4835      	ldr	r0, [pc, #212]	; (8006a90 <_printf_i+0x244>)
 80069bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069c0:	6829      	ldr	r1, [r5, #0]
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80069c8:	6029      	str	r1, [r5, #0]
 80069ca:	061d      	lsls	r5, r3, #24
 80069cc:	d514      	bpl.n	80069f8 <_printf_i+0x1ac>
 80069ce:	07df      	lsls	r7, r3, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f043 0320 	orrmi.w	r3, r3, #32
 80069d6:	6023      	strmi	r3, [r4, #0]
 80069d8:	b91e      	cbnz	r6, 80069e2 <_printf_i+0x196>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	2310      	movs	r3, #16
 80069e4:	e7b0      	b.n	8006948 <_printf_i+0xfc>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f043 0320 	orr.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2378      	movs	r3, #120	; 0x78
 80069f0:	4828      	ldr	r0, [pc, #160]	; (8006a94 <_printf_i+0x248>)
 80069f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f6:	e7e3      	b.n	80069c0 <_printf_i+0x174>
 80069f8:	0659      	lsls	r1, r3, #25
 80069fa:	bf48      	it	mi
 80069fc:	b2b6      	uxthmi	r6, r6
 80069fe:	e7e6      	b.n	80069ce <_printf_i+0x182>
 8006a00:	4615      	mov	r5, r2
 8006a02:	e7bb      	b.n	800697c <_printf_i+0x130>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	6826      	ldr	r6, [r4, #0]
 8006a08:	6961      	ldr	r1, [r4, #20]
 8006a0a:	1d18      	adds	r0, r3, #4
 8006a0c:	6028      	str	r0, [r5, #0]
 8006a0e:	0635      	lsls	r5, r6, #24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0x1cc>
 8006a14:	6019      	str	r1, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <_printf_i+0x1d2>
 8006a18:	0670      	lsls	r0, r6, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0x1c8>
 8006a1c:	8019      	strh	r1, [r3, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	4615      	mov	r5, r2
 8006a24:	e7ba      	b.n	800699c <_printf_i+0x150>
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	602a      	str	r2, [r5, #0]
 8006a2c:	681d      	ldr	r5, [r3, #0]
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7f9 fbd4 	bl	80001e0 <memchr>
 8006a38:	b108      	cbz	r0, 8006a3e <_printf_i+0x1f2>
 8006a3a:	1b40      	subs	r0, r0, r5
 8006a3c:	6060      	str	r0, [r4, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	e7a8      	b.n	800699c <_printf_i+0x150>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0ab      	beq.n	80069b0 <_printf_i+0x164>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	d413      	bmi.n	8006a86 <_printf_i+0x23a>
 8006a5e:	68e0      	ldr	r0, [r4, #12]
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	4298      	cmp	r0, r3
 8006a64:	bfb8      	it	lt
 8006a66:	4618      	movlt	r0, r3
 8006a68:	e7a4      	b.n	80069b4 <_printf_i+0x168>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	47d0      	blx	sl
 8006a74:	3001      	adds	r0, #1
 8006a76:	d09b      	beq.n	80069b0 <_printf_i+0x164>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	9903      	ldr	r1, [sp, #12]
 8006a7e:	1a5b      	subs	r3, r3, r1
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	dcf2      	bgt.n	8006a6a <_printf_i+0x21e>
 8006a84:	e7eb      	b.n	8006a5e <_printf_i+0x212>
 8006a86:	2500      	movs	r5, #0
 8006a88:	f104 0619 	add.w	r6, r4, #25
 8006a8c:	e7f5      	b.n	8006a7a <_printf_i+0x22e>
 8006a8e:	bf00      	nop
 8006a90:	08009cde 	.word	0x08009cde
 8006a94:	08009cef 	.word	0x08009cef

08006a98 <strncpy>:
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	3901      	subs	r1, #1
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	b132      	cbz	r2, 8006aae <strncpy+0x16>
 8006aa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006aa4:	f803 4b01 	strb.w	r4, [r3], #1
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	2c00      	cmp	r4, #0
 8006aac:	d1f7      	bne.n	8006a9e <strncpy+0x6>
 8006aae:	441a      	add	r2, r3
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d100      	bne.n	8006ab8 <strncpy+0x20>
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8006abc:	e7f9      	b.n	8006ab2 <strncpy+0x1a>

08006abe <_vsniprintf_r>:
 8006abe:	b530      	push	{r4, r5, lr}
 8006ac0:	4614      	mov	r4, r2
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	b09b      	sub	sp, #108	; 0x6c
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	da05      	bge.n	8006ad8 <_vsniprintf_r+0x1a>
 8006acc:	238b      	movs	r3, #139	; 0x8b
 8006ace:	6003      	str	r3, [r0, #0]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	b01b      	add	sp, #108	; 0x6c
 8006ad6:	bd30      	pop	{r4, r5, pc}
 8006ad8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006adc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006ae0:	bf14      	ite	ne
 8006ae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ae6:	4623      	moveq	r3, r4
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006af0:	9100      	str	r1, [sp, #0]
 8006af2:	9104      	str	r1, [sp, #16]
 8006af4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006af8:	4669      	mov	r1, sp
 8006afa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006afc:	f001 fb74 	bl	80081e8 <_svfiprintf_r>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	bfbc      	itt	lt
 8006b04:	238b      	movlt	r3, #139	; 0x8b
 8006b06:	602b      	strlt	r3, [r5, #0]
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	d0e3      	beq.n	8006ad4 <_vsniprintf_r+0x16>
 8006b0c:	9b00      	ldr	r3, [sp, #0]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	e7df      	b.n	8006ad4 <_vsniprintf_r+0x16>

08006b14 <vsniprintf>:
 8006b14:	b507      	push	{r0, r1, r2, lr}
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	460a      	mov	r2, r1
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4803      	ldr	r0, [pc, #12]	; (8006b2c <vsniprintf+0x18>)
 8006b20:	6800      	ldr	r0, [r0, #0]
 8006b22:	f7ff ffcc 	bl	8006abe <_vsniprintf_r>
 8006b26:	b003      	add	sp, #12
 8006b28:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b2c:	20000010 	.word	0x20000010

08006b30 <quorem>:
 8006b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	6903      	ldr	r3, [r0, #16]
 8006b36:	690c      	ldr	r4, [r1, #16]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	f2c0 8081 	blt.w	8006c42 <quorem+0x112>
 8006b40:	3c01      	subs	r4, #1
 8006b42:	f101 0814 	add.w	r8, r1, #20
 8006b46:	f100 0514 	add.w	r5, r0, #20
 8006b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006b60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b68:	d331      	bcc.n	8006bce <quorem+0x9e>
 8006b6a:	f04f 0e00 	mov.w	lr, #0
 8006b6e:	4640      	mov	r0, r8
 8006b70:	46ac      	mov	ip, r5
 8006b72:	46f2      	mov	sl, lr
 8006b74:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b78:	b293      	uxth	r3, r2
 8006b7a:	fb06 e303 	mla	r3, r6, r3, lr
 8006b7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	ebaa 0303 	sub.w	r3, sl, r3
 8006b88:	f8dc a000 	ldr.w	sl, [ip]
 8006b8c:	0c12      	lsrs	r2, r2, #16
 8006b8e:	fa13 f38a 	uxtah	r3, r3, sl
 8006b92:	fb06 e202 	mla	r2, r6, r2, lr
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	9b00      	ldr	r3, [sp, #0]
 8006b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b9e:	b292      	uxth	r2, r2
 8006ba0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ba8:	f8bd 3000 	ldrh.w	r3, [sp]
 8006bac:	4581      	cmp	r9, r0
 8006bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bb2:	f84c 3b04 	str.w	r3, [ip], #4
 8006bb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006bba:	d2db      	bcs.n	8006b74 <quorem+0x44>
 8006bbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8006bc0:	b92b      	cbnz	r3, 8006bce <quorem+0x9e>
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	3b04      	subs	r3, #4
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	d32e      	bcc.n	8006c2a <quorem+0xfa>
 8006bcc:	613c      	str	r4, [r7, #16]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f001 f8b6 	bl	8007d40 <__mcmp>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	db24      	blt.n	8006c22 <quorem+0xf2>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f04f 0c00 	mov.w	ip, #0
 8006be0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006be4:	f8d0 e000 	ldr.w	lr, [r0]
 8006be8:	b293      	uxth	r3, r2
 8006bea:	ebac 0303 	sub.w	r3, ip, r3
 8006bee:	0c12      	lsrs	r2, r2, #16
 8006bf0:	fa13 f38e 	uxtah	r3, r3, lr
 8006bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c02:	45c1      	cmp	r9, r8
 8006c04:	f840 3b04 	str.w	r3, [r0], #4
 8006c08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c0c:	d2e8      	bcs.n	8006be0 <quorem+0xb0>
 8006c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c16:	b922      	cbnz	r2, 8006c22 <quorem+0xf2>
 8006c18:	3b04      	subs	r3, #4
 8006c1a:	429d      	cmp	r5, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	d30a      	bcc.n	8006c36 <quorem+0x106>
 8006c20:	613c      	str	r4, [r7, #16]
 8006c22:	4630      	mov	r0, r6
 8006c24:	b003      	add	sp, #12
 8006c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1cc      	bne.n	8006bcc <quorem+0x9c>
 8006c32:	3c01      	subs	r4, #1
 8006c34:	e7c7      	b.n	8006bc6 <quorem+0x96>
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	3b04      	subs	r3, #4
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	d1f0      	bne.n	8006c20 <quorem+0xf0>
 8006c3e:	3c01      	subs	r4, #1
 8006c40:	e7eb      	b.n	8006c1a <quorem+0xea>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7ee      	b.n	8006c24 <quorem+0xf4>
	...

08006c48 <_dtoa_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	ed2d 8b04 	vpush	{d8-d9}
 8006c50:	ec57 6b10 	vmov	r6, r7, d0
 8006c54:	b093      	sub	sp, #76	; 0x4c
 8006c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006c5c:	9106      	str	r1, [sp, #24]
 8006c5e:	ee10 aa10 	vmov	sl, s0
 8006c62:	4604      	mov	r4, r0
 8006c64:	9209      	str	r2, [sp, #36]	; 0x24
 8006c66:	930c      	str	r3, [sp, #48]	; 0x30
 8006c68:	46bb      	mov	fp, r7
 8006c6a:	b975      	cbnz	r5, 8006c8a <_dtoa_r+0x42>
 8006c6c:	2010      	movs	r0, #16
 8006c6e:	f000 fddd 	bl	800782c <malloc>
 8006c72:	4602      	mov	r2, r0
 8006c74:	6260      	str	r0, [r4, #36]	; 0x24
 8006c76:	b920      	cbnz	r0, 8006c82 <_dtoa_r+0x3a>
 8006c78:	4ba7      	ldr	r3, [pc, #668]	; (8006f18 <_dtoa_r+0x2d0>)
 8006c7a:	21ea      	movs	r1, #234	; 0xea
 8006c7c:	48a7      	ldr	r0, [pc, #668]	; (8006f1c <_dtoa_r+0x2d4>)
 8006c7e:	f001 fbc3 	bl	8008408 <__assert_func>
 8006c82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c86:	6005      	str	r5, [r0, #0]
 8006c88:	60c5      	str	r5, [r0, #12]
 8006c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8c:	6819      	ldr	r1, [r3, #0]
 8006c8e:	b151      	cbz	r1, 8006ca6 <_dtoa_r+0x5e>
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	604a      	str	r2, [r1, #4]
 8006c94:	2301      	movs	r3, #1
 8006c96:	4093      	lsls	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fe0e 	bl	80078bc <_Bfree>
 8006ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	1e3b      	subs	r3, r7, #0
 8006ca8:	bfaa      	itet	ge
 8006caa:	2300      	movge	r3, #0
 8006cac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006cb0:	f8c8 3000 	strge.w	r3, [r8]
 8006cb4:	4b9a      	ldr	r3, [pc, #616]	; (8006f20 <_dtoa_r+0x2d8>)
 8006cb6:	bfbc      	itt	lt
 8006cb8:	2201      	movlt	r2, #1
 8006cba:	f8c8 2000 	strlt.w	r2, [r8]
 8006cbe:	ea33 030b 	bics.w	r3, r3, fp
 8006cc2:	d11b      	bne.n	8006cfc <_dtoa_r+0xb4>
 8006cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cd0:	4333      	orrs	r3, r6
 8006cd2:	f000 8592 	beq.w	80077fa <_dtoa_r+0xbb2>
 8006cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cd8:	b963      	cbnz	r3, 8006cf4 <_dtoa_r+0xac>
 8006cda:	4b92      	ldr	r3, [pc, #584]	; (8006f24 <_dtoa_r+0x2dc>)
 8006cdc:	e022      	b.n	8006d24 <_dtoa_r+0xdc>
 8006cde:	4b92      	ldr	r3, [pc, #584]	; (8006f28 <_dtoa_r+0x2e0>)
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	9801      	ldr	r0, [sp, #4]
 8006cea:	b013      	add	sp, #76	; 0x4c
 8006cec:	ecbd 8b04 	vpop	{d8-d9}
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	4b8b      	ldr	r3, [pc, #556]	; (8006f24 <_dtoa_r+0x2dc>)
 8006cf6:	9301      	str	r3, [sp, #4]
 8006cf8:	3303      	adds	r3, #3
 8006cfa:	e7f3      	b.n	8006ce4 <_dtoa_r+0x9c>
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4650      	mov	r0, sl
 8006d02:	4659      	mov	r1, fp
 8006d04:	f7f9 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d08:	ec4b ab19 	vmov	d9, sl, fp
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	b158      	cbz	r0, 8006d28 <_dtoa_r+0xe0>
 8006d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d12:	2301      	movs	r3, #1
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 856b 	beq.w	80077f4 <_dtoa_r+0xbac>
 8006d1e:	4883      	ldr	r0, [pc, #524]	; (8006f2c <_dtoa_r+0x2e4>)
 8006d20:	6018      	str	r0, [r3, #0]
 8006d22:	1e43      	subs	r3, r0, #1
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	e7df      	b.n	8006ce8 <_dtoa_r+0xa0>
 8006d28:	ec4b ab10 	vmov	d0, sl, fp
 8006d2c:	aa10      	add	r2, sp, #64	; 0x40
 8006d2e:	a911      	add	r1, sp, #68	; 0x44
 8006d30:	4620      	mov	r0, r4
 8006d32:	f001 f8ab 	bl	8007e8c <__d2b>
 8006d36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006d3a:	ee08 0a10 	vmov	s16, r0
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	f000 8084 	beq.w	8006e4c <_dtoa_r+0x204>
 8006d44:	ee19 3a90 	vmov	r3, s19
 8006d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006d50:	4656      	mov	r6, sl
 8006d52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006d5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006d5e:	4b74      	ldr	r3, [pc, #464]	; (8006f30 <_dtoa_r+0x2e8>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fa8f 	bl	8000288 <__aeabi_dsub>
 8006d6a:	a365      	add	r3, pc, #404	; (adr r3, 8006f00 <_dtoa_r+0x2b8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	a364      	add	r3, pc, #400	; (adr r3, 8006f08 <_dtoa_r+0x2c0>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fa87 	bl	800028c <__adddf3>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	4628      	mov	r0, r5
 8006d82:	460f      	mov	r7, r1
 8006d84:	f7f9 fbce 	bl	8000524 <__aeabi_i2d>
 8006d88:	a361      	add	r3, pc, #388	; (adr r3, 8006f10 <_dtoa_r+0x2c8>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f7f9 fc33 	bl	80005f8 <__aeabi_dmul>
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4630      	mov	r0, r6
 8006d98:	4639      	mov	r1, r7
 8006d9a:	f7f9 fa77 	bl	800028c <__adddf3>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	460f      	mov	r7, r1
 8006da2:	f7f9 fed9 	bl	8000b58 <__aeabi_d2iz>
 8006da6:	2200      	movs	r2, #0
 8006da8:	9000      	str	r0, [sp, #0]
 8006daa:	2300      	movs	r3, #0
 8006dac:	4630      	mov	r0, r6
 8006dae:	4639      	mov	r1, r7
 8006db0:	f7f9 fe94 	bl	8000adc <__aeabi_dcmplt>
 8006db4:	b150      	cbz	r0, 8006dcc <_dtoa_r+0x184>
 8006db6:	9800      	ldr	r0, [sp, #0]
 8006db8:	f7f9 fbb4 	bl	8000524 <__aeabi_i2d>
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	463b      	mov	r3, r7
 8006dc0:	f7f9 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8006dc4:	b910      	cbnz	r0, 8006dcc <_dtoa_r+0x184>
 8006dc6:	9b00      	ldr	r3, [sp, #0]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	9b00      	ldr	r3, [sp, #0]
 8006dce:	2b16      	cmp	r3, #22
 8006dd0:	d85a      	bhi.n	8006e88 <_dtoa_r+0x240>
 8006dd2:	9a00      	ldr	r2, [sp, #0]
 8006dd4:	4b57      	ldr	r3, [pc, #348]	; (8006f34 <_dtoa_r+0x2ec>)
 8006dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	ec51 0b19 	vmov	r0, r1, d9
 8006de2:	f7f9 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d050      	beq.n	8006e8c <_dtoa_r+0x244>
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006df6:	1b5d      	subs	r5, r3, r5
 8006df8:	1e6b      	subs	r3, r5, #1
 8006dfa:	9305      	str	r3, [sp, #20]
 8006dfc:	bf45      	ittet	mi
 8006dfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e02:	9304      	strmi	r3, [sp, #16]
 8006e04:	2300      	movpl	r3, #0
 8006e06:	2300      	movmi	r3, #0
 8006e08:	bf4c      	ite	mi
 8006e0a:	9305      	strmi	r3, [sp, #20]
 8006e0c:	9304      	strpl	r3, [sp, #16]
 8006e0e:	9b00      	ldr	r3, [sp, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	db3d      	blt.n	8006e90 <_dtoa_r+0x248>
 8006e14:	9b05      	ldr	r3, [sp, #20]
 8006e16:	9a00      	ldr	r2, [sp, #0]
 8006e18:	920a      	str	r2, [sp, #40]	; 0x28
 8006e1a:	4413      	add	r3, r2
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	2300      	movs	r3, #0
 8006e20:	9307      	str	r3, [sp, #28]
 8006e22:	9b06      	ldr	r3, [sp, #24]
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	f200 8089 	bhi.w	8006f3c <_dtoa_r+0x2f4>
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	bfc4      	itt	gt
 8006e2e:	3b04      	subgt	r3, #4
 8006e30:	9306      	strgt	r3, [sp, #24]
 8006e32:	9b06      	ldr	r3, [sp, #24]
 8006e34:	f1a3 0302 	sub.w	r3, r3, #2
 8006e38:	bfcc      	ite	gt
 8006e3a:	2500      	movgt	r5, #0
 8006e3c:	2501      	movle	r5, #1
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	f200 8087 	bhi.w	8006f52 <_dtoa_r+0x30a>
 8006e44:	e8df f003 	tbb	[pc, r3]
 8006e48:	59383a2d 	.word	0x59383a2d
 8006e4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006e50:	441d      	add	r5, r3
 8006e52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006e56:	2b20      	cmp	r3, #32
 8006e58:	bfc1      	itttt	gt
 8006e5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006e5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006e62:	fa0b f303 	lslgt.w	r3, fp, r3
 8006e66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006e6a:	bfda      	itte	le
 8006e6c:	f1c3 0320 	rsble	r3, r3, #32
 8006e70:	fa06 f003 	lslle.w	r0, r6, r3
 8006e74:	4318      	orrgt	r0, r3
 8006e76:	f7f9 fb45 	bl	8000504 <__aeabi_ui2d>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006e82:	3d01      	subs	r5, #1
 8006e84:	930e      	str	r3, [sp, #56]	; 0x38
 8006e86:	e76a      	b.n	8006d5e <_dtoa_r+0x116>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e7b2      	b.n	8006df2 <_dtoa_r+0x1aa>
 8006e8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006e8e:	e7b1      	b.n	8006df4 <_dtoa_r+0x1ac>
 8006e90:	9b04      	ldr	r3, [sp, #16]
 8006e92:	9a00      	ldr	r2, [sp, #0]
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	9304      	str	r3, [sp, #16]
 8006e98:	4253      	negs	r3, r2
 8006e9a:	9307      	str	r3, [sp, #28]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8006ea0:	e7bf      	b.n	8006e22 <_dtoa_r+0x1da>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dc55      	bgt.n	8006f58 <_dtoa_r+0x310>
 8006eac:	2301      	movs	r3, #1
 8006eae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006eb6:	e00c      	b.n	8006ed2 <_dtoa_r+0x28a>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e7f3      	b.n	8006ea4 <_dtoa_r+0x25c>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec0:	9308      	str	r3, [sp, #32]
 8006ec2:	9b00      	ldr	r3, [sp, #0]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	9302      	str	r3, [sp, #8]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	9303      	str	r3, [sp, #12]
 8006ece:	bfb8      	it	lt
 8006ed0:	2301      	movlt	r3, #1
 8006ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	6042      	str	r2, [r0, #4]
 8006ed8:	2204      	movs	r2, #4
 8006eda:	f102 0614 	add.w	r6, r2, #20
 8006ede:	429e      	cmp	r6, r3
 8006ee0:	6841      	ldr	r1, [r0, #4]
 8006ee2:	d93d      	bls.n	8006f60 <_dtoa_r+0x318>
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f000 fca9 	bl	800783c <_Balloc>
 8006eea:	9001      	str	r0, [sp, #4]
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d13b      	bne.n	8006f68 <_dtoa_r+0x320>
 8006ef0:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <_dtoa_r+0x2f0>)
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006ef8:	e6c0      	b.n	8006c7c <_dtoa_r+0x34>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e7df      	b.n	8006ebe <_dtoa_r+0x276>
 8006efe:	bf00      	nop
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	08009d0d 	.word	0x08009d0d
 8006f1c:	08009d24 	.word	0x08009d24
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	08009d09 	.word	0x08009d09
 8006f28:	08009d00 	.word	0x08009d00
 8006f2c:	08009cdd 	.word	0x08009cdd
 8006f30:	3ff80000 	.word	0x3ff80000
 8006f34:	08009e18 	.word	0x08009e18
 8006f38:	08009d7f 	.word	0x08009d7f
 8006f3c:	2501      	movs	r5, #1
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9306      	str	r3, [sp, #24]
 8006f42:	9508      	str	r5, [sp, #32]
 8006f44:	f04f 33ff 	mov.w	r3, #4294967295
 8006f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2312      	movs	r3, #18
 8006f50:	e7b0      	b.n	8006eb4 <_dtoa_r+0x26c>
 8006f52:	2301      	movs	r3, #1
 8006f54:	9308      	str	r3, [sp, #32]
 8006f56:	e7f5      	b.n	8006f44 <_dtoa_r+0x2fc>
 8006f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f5e:	e7b8      	b.n	8006ed2 <_dtoa_r+0x28a>
 8006f60:	3101      	adds	r1, #1
 8006f62:	6041      	str	r1, [r0, #4]
 8006f64:	0052      	lsls	r2, r2, #1
 8006f66:	e7b8      	b.n	8006eda <_dtoa_r+0x292>
 8006f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f6a:	9a01      	ldr	r2, [sp, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	9b03      	ldr	r3, [sp, #12]
 8006f70:	2b0e      	cmp	r3, #14
 8006f72:	f200 809d 	bhi.w	80070b0 <_dtoa_r+0x468>
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	f000 809a 	beq.w	80070b0 <_dtoa_r+0x468>
 8006f7c:	9b00      	ldr	r3, [sp, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dd32      	ble.n	8006fe8 <_dtoa_r+0x3a0>
 8006f82:	4ab7      	ldr	r2, [pc, #732]	; (8007260 <_dtoa_r+0x618>)
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f90:	9b00      	ldr	r3, [sp, #0]
 8006f92:	05d8      	lsls	r0, r3, #23
 8006f94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006f98:	d516      	bpl.n	8006fc8 <_dtoa_r+0x380>
 8006f9a:	4bb2      	ldr	r3, [pc, #712]	; (8007264 <_dtoa_r+0x61c>)
 8006f9c:	ec51 0b19 	vmov	r0, r1, d9
 8006fa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa4:	f7f9 fc52 	bl	800084c <__aeabi_ddiv>
 8006fa8:	f007 070f 	and.w	r7, r7, #15
 8006fac:	4682      	mov	sl, r0
 8006fae:	468b      	mov	fp, r1
 8006fb0:	2503      	movs	r5, #3
 8006fb2:	4eac      	ldr	r6, [pc, #688]	; (8007264 <_dtoa_r+0x61c>)
 8006fb4:	b957      	cbnz	r7, 8006fcc <_dtoa_r+0x384>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	4650      	mov	r0, sl
 8006fbc:	4659      	mov	r1, fp
 8006fbe:	f7f9 fc45 	bl	800084c <__aeabi_ddiv>
 8006fc2:	4682      	mov	sl, r0
 8006fc4:	468b      	mov	fp, r1
 8006fc6:	e028      	b.n	800701a <_dtoa_r+0x3d2>
 8006fc8:	2502      	movs	r5, #2
 8006fca:	e7f2      	b.n	8006fb2 <_dtoa_r+0x36a>
 8006fcc:	07f9      	lsls	r1, r7, #31
 8006fce:	d508      	bpl.n	8006fe2 <_dtoa_r+0x39a>
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006fd8:	f7f9 fb0e 	bl	80005f8 <__aeabi_dmul>
 8006fdc:	3501      	adds	r5, #1
 8006fde:	4680      	mov	r8, r0
 8006fe0:	4689      	mov	r9, r1
 8006fe2:	107f      	asrs	r7, r7, #1
 8006fe4:	3608      	adds	r6, #8
 8006fe6:	e7e5      	b.n	8006fb4 <_dtoa_r+0x36c>
 8006fe8:	f000 809b 	beq.w	8007122 <_dtoa_r+0x4da>
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	4f9d      	ldr	r7, [pc, #628]	; (8007264 <_dtoa_r+0x61c>)
 8006ff0:	425e      	negs	r6, r3
 8006ff2:	4b9b      	ldr	r3, [pc, #620]	; (8007260 <_dtoa_r+0x618>)
 8006ff4:	f006 020f 	and.w	r2, r6, #15
 8006ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	ec51 0b19 	vmov	r0, r1, d9
 8007004:	f7f9 faf8 	bl	80005f8 <__aeabi_dmul>
 8007008:	1136      	asrs	r6, r6, #4
 800700a:	4682      	mov	sl, r0
 800700c:	468b      	mov	fp, r1
 800700e:	2300      	movs	r3, #0
 8007010:	2502      	movs	r5, #2
 8007012:	2e00      	cmp	r6, #0
 8007014:	d17a      	bne.n	800710c <_dtoa_r+0x4c4>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1d3      	bne.n	8006fc2 <_dtoa_r+0x37a>
 800701a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 8082 	beq.w	8007126 <_dtoa_r+0x4de>
 8007022:	4b91      	ldr	r3, [pc, #580]	; (8007268 <_dtoa_r+0x620>)
 8007024:	2200      	movs	r2, #0
 8007026:	4650      	mov	r0, sl
 8007028:	4659      	mov	r1, fp
 800702a:	f7f9 fd57 	bl	8000adc <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	d079      	beq.n	8007126 <_dtoa_r+0x4de>
 8007032:	9b03      	ldr	r3, [sp, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d076      	beq.n	8007126 <_dtoa_r+0x4de>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dd36      	ble.n	80070ac <_dtoa_r+0x464>
 800703e:	9b00      	ldr	r3, [sp, #0]
 8007040:	4650      	mov	r0, sl
 8007042:	4659      	mov	r1, fp
 8007044:	1e5f      	subs	r7, r3, #1
 8007046:	2200      	movs	r2, #0
 8007048:	4b88      	ldr	r3, [pc, #544]	; (800726c <_dtoa_r+0x624>)
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	9e02      	ldr	r6, [sp, #8]
 8007050:	4682      	mov	sl, r0
 8007052:	468b      	mov	fp, r1
 8007054:	3501      	adds	r5, #1
 8007056:	4628      	mov	r0, r5
 8007058:	f7f9 fa64 	bl	8000524 <__aeabi_i2d>
 800705c:	4652      	mov	r2, sl
 800705e:	465b      	mov	r3, fp
 8007060:	f7f9 faca 	bl	80005f8 <__aeabi_dmul>
 8007064:	4b82      	ldr	r3, [pc, #520]	; (8007270 <_dtoa_r+0x628>)
 8007066:	2200      	movs	r2, #0
 8007068:	f7f9 f910 	bl	800028c <__adddf3>
 800706c:	46d0      	mov	r8, sl
 800706e:	46d9      	mov	r9, fp
 8007070:	4682      	mov	sl, r0
 8007072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007076:	2e00      	cmp	r6, #0
 8007078:	d158      	bne.n	800712c <_dtoa_r+0x4e4>
 800707a:	4b7e      	ldr	r3, [pc, #504]	; (8007274 <_dtoa_r+0x62c>)
 800707c:	2200      	movs	r2, #0
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	f7f9 f901 	bl	8000288 <__aeabi_dsub>
 8007086:	4652      	mov	r2, sl
 8007088:	465b      	mov	r3, fp
 800708a:	4680      	mov	r8, r0
 800708c:	4689      	mov	r9, r1
 800708e:	f7f9 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 8007092:	2800      	cmp	r0, #0
 8007094:	f040 8295 	bne.w	80075c2 <_dtoa_r+0x97a>
 8007098:	4652      	mov	r2, sl
 800709a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800709e:	4640      	mov	r0, r8
 80070a0:	4649      	mov	r1, r9
 80070a2:	f7f9 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f040 8289 	bne.w	80075be <_dtoa_r+0x976>
 80070ac:	ec5b ab19 	vmov	sl, fp, d9
 80070b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f2c0 8148 	blt.w	8007348 <_dtoa_r+0x700>
 80070b8:	9a00      	ldr	r2, [sp, #0]
 80070ba:	2a0e      	cmp	r2, #14
 80070bc:	f300 8144 	bgt.w	8007348 <_dtoa_r+0x700>
 80070c0:	4b67      	ldr	r3, [pc, #412]	; (8007260 <_dtoa_r+0x618>)
 80070c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f280 80d5 	bge.w	800727c <_dtoa_r+0x634>
 80070d2:	9b03      	ldr	r3, [sp, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f300 80d1 	bgt.w	800727c <_dtoa_r+0x634>
 80070da:	f040 826f 	bne.w	80075bc <_dtoa_r+0x974>
 80070de:	4b65      	ldr	r3, [pc, #404]	; (8007274 <_dtoa_r+0x62c>)
 80070e0:	2200      	movs	r2, #0
 80070e2:	4640      	mov	r0, r8
 80070e4:	4649      	mov	r1, r9
 80070e6:	f7f9 fa87 	bl	80005f8 <__aeabi_dmul>
 80070ea:	4652      	mov	r2, sl
 80070ec:	465b      	mov	r3, fp
 80070ee:	f7f9 fd09 	bl	8000b04 <__aeabi_dcmpge>
 80070f2:	9e03      	ldr	r6, [sp, #12]
 80070f4:	4637      	mov	r7, r6
 80070f6:	2800      	cmp	r0, #0
 80070f8:	f040 8245 	bne.w	8007586 <_dtoa_r+0x93e>
 80070fc:	9d01      	ldr	r5, [sp, #4]
 80070fe:	2331      	movs	r3, #49	; 0x31
 8007100:	f805 3b01 	strb.w	r3, [r5], #1
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	e240      	b.n	800758e <_dtoa_r+0x946>
 800710c:	07f2      	lsls	r2, r6, #31
 800710e:	d505      	bpl.n	800711c <_dtoa_r+0x4d4>
 8007110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007114:	f7f9 fa70 	bl	80005f8 <__aeabi_dmul>
 8007118:	3501      	adds	r5, #1
 800711a:	2301      	movs	r3, #1
 800711c:	1076      	asrs	r6, r6, #1
 800711e:	3708      	adds	r7, #8
 8007120:	e777      	b.n	8007012 <_dtoa_r+0x3ca>
 8007122:	2502      	movs	r5, #2
 8007124:	e779      	b.n	800701a <_dtoa_r+0x3d2>
 8007126:	9f00      	ldr	r7, [sp, #0]
 8007128:	9e03      	ldr	r6, [sp, #12]
 800712a:	e794      	b.n	8007056 <_dtoa_r+0x40e>
 800712c:	9901      	ldr	r1, [sp, #4]
 800712e:	4b4c      	ldr	r3, [pc, #304]	; (8007260 <_dtoa_r+0x618>)
 8007130:	4431      	add	r1, r6
 8007132:	910d      	str	r1, [sp, #52]	; 0x34
 8007134:	9908      	ldr	r1, [sp, #32]
 8007136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800713a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800713e:	2900      	cmp	r1, #0
 8007140:	d043      	beq.n	80071ca <_dtoa_r+0x582>
 8007142:	494d      	ldr	r1, [pc, #308]	; (8007278 <_dtoa_r+0x630>)
 8007144:	2000      	movs	r0, #0
 8007146:	f7f9 fb81 	bl	800084c <__aeabi_ddiv>
 800714a:	4652      	mov	r2, sl
 800714c:	465b      	mov	r3, fp
 800714e:	f7f9 f89b 	bl	8000288 <__aeabi_dsub>
 8007152:	9d01      	ldr	r5, [sp, #4]
 8007154:	4682      	mov	sl, r0
 8007156:	468b      	mov	fp, r1
 8007158:	4649      	mov	r1, r9
 800715a:	4640      	mov	r0, r8
 800715c:	f7f9 fcfc 	bl	8000b58 <__aeabi_d2iz>
 8007160:	4606      	mov	r6, r0
 8007162:	f7f9 f9df 	bl	8000524 <__aeabi_i2d>
 8007166:	4602      	mov	r2, r0
 8007168:	460b      	mov	r3, r1
 800716a:	4640      	mov	r0, r8
 800716c:	4649      	mov	r1, r9
 800716e:	f7f9 f88b 	bl	8000288 <__aeabi_dsub>
 8007172:	3630      	adds	r6, #48	; 0x30
 8007174:	f805 6b01 	strb.w	r6, [r5], #1
 8007178:	4652      	mov	r2, sl
 800717a:	465b      	mov	r3, fp
 800717c:	4680      	mov	r8, r0
 800717e:	4689      	mov	r9, r1
 8007180:	f7f9 fcac 	bl	8000adc <__aeabi_dcmplt>
 8007184:	2800      	cmp	r0, #0
 8007186:	d163      	bne.n	8007250 <_dtoa_r+0x608>
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	4936      	ldr	r1, [pc, #216]	; (8007268 <_dtoa_r+0x620>)
 800718e:	2000      	movs	r0, #0
 8007190:	f7f9 f87a 	bl	8000288 <__aeabi_dsub>
 8007194:	4652      	mov	r2, sl
 8007196:	465b      	mov	r3, fp
 8007198:	f7f9 fca0 	bl	8000adc <__aeabi_dcmplt>
 800719c:	2800      	cmp	r0, #0
 800719e:	f040 80b5 	bne.w	800730c <_dtoa_r+0x6c4>
 80071a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071a4:	429d      	cmp	r5, r3
 80071a6:	d081      	beq.n	80070ac <_dtoa_r+0x464>
 80071a8:	4b30      	ldr	r3, [pc, #192]	; (800726c <_dtoa_r+0x624>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	4650      	mov	r0, sl
 80071ae:	4659      	mov	r1, fp
 80071b0:	f7f9 fa22 	bl	80005f8 <__aeabi_dmul>
 80071b4:	4b2d      	ldr	r3, [pc, #180]	; (800726c <_dtoa_r+0x624>)
 80071b6:	4682      	mov	sl, r0
 80071b8:	468b      	mov	fp, r1
 80071ba:	4640      	mov	r0, r8
 80071bc:	4649      	mov	r1, r9
 80071be:	2200      	movs	r2, #0
 80071c0:	f7f9 fa1a 	bl	80005f8 <__aeabi_dmul>
 80071c4:	4680      	mov	r8, r0
 80071c6:	4689      	mov	r9, r1
 80071c8:	e7c6      	b.n	8007158 <_dtoa_r+0x510>
 80071ca:	4650      	mov	r0, sl
 80071cc:	4659      	mov	r1, fp
 80071ce:	f7f9 fa13 	bl	80005f8 <__aeabi_dmul>
 80071d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d4:	9d01      	ldr	r5, [sp, #4]
 80071d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80071d8:	4682      	mov	sl, r0
 80071da:	468b      	mov	fp, r1
 80071dc:	4649      	mov	r1, r9
 80071de:	4640      	mov	r0, r8
 80071e0:	f7f9 fcba 	bl	8000b58 <__aeabi_d2iz>
 80071e4:	4606      	mov	r6, r0
 80071e6:	f7f9 f99d 	bl	8000524 <__aeabi_i2d>
 80071ea:	3630      	adds	r6, #48	; 0x30
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	f7f9 f848 	bl	8000288 <__aeabi_dsub>
 80071f8:	f805 6b01 	strb.w	r6, [r5], #1
 80071fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fe:	429d      	cmp	r5, r3
 8007200:	4680      	mov	r8, r0
 8007202:	4689      	mov	r9, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	d124      	bne.n	8007254 <_dtoa_r+0x60c>
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <_dtoa_r+0x630>)
 800720c:	4650      	mov	r0, sl
 800720e:	4659      	mov	r1, fp
 8007210:	f7f9 f83c 	bl	800028c <__adddf3>
 8007214:	4602      	mov	r2, r0
 8007216:	460b      	mov	r3, r1
 8007218:	4640      	mov	r0, r8
 800721a:	4649      	mov	r1, r9
 800721c:	f7f9 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8007220:	2800      	cmp	r0, #0
 8007222:	d173      	bne.n	800730c <_dtoa_r+0x6c4>
 8007224:	4652      	mov	r2, sl
 8007226:	465b      	mov	r3, fp
 8007228:	4913      	ldr	r1, [pc, #76]	; (8007278 <_dtoa_r+0x630>)
 800722a:	2000      	movs	r0, #0
 800722c:	f7f9 f82c 	bl	8000288 <__aeabi_dsub>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4640      	mov	r0, r8
 8007236:	4649      	mov	r1, r9
 8007238:	f7f9 fc50 	bl	8000adc <__aeabi_dcmplt>
 800723c:	2800      	cmp	r0, #0
 800723e:	f43f af35 	beq.w	80070ac <_dtoa_r+0x464>
 8007242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007244:	1e6b      	subs	r3, r5, #1
 8007246:	930f      	str	r3, [sp, #60]	; 0x3c
 8007248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d0f8      	beq.n	8007242 <_dtoa_r+0x5fa>
 8007250:	9700      	str	r7, [sp, #0]
 8007252:	e049      	b.n	80072e8 <_dtoa_r+0x6a0>
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <_dtoa_r+0x624>)
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	4680      	mov	r8, r0
 800725c:	4689      	mov	r9, r1
 800725e:	e7bd      	b.n	80071dc <_dtoa_r+0x594>
 8007260:	08009e18 	.word	0x08009e18
 8007264:	08009df0 	.word	0x08009df0
 8007268:	3ff00000 	.word	0x3ff00000
 800726c:	40240000 	.word	0x40240000
 8007270:	401c0000 	.word	0x401c0000
 8007274:	40140000 	.word	0x40140000
 8007278:	3fe00000 	.word	0x3fe00000
 800727c:	9d01      	ldr	r5, [sp, #4]
 800727e:	4656      	mov	r6, sl
 8007280:	465f      	mov	r7, fp
 8007282:	4642      	mov	r2, r8
 8007284:	464b      	mov	r3, r9
 8007286:	4630      	mov	r0, r6
 8007288:	4639      	mov	r1, r7
 800728a:	f7f9 fadf 	bl	800084c <__aeabi_ddiv>
 800728e:	f7f9 fc63 	bl	8000b58 <__aeabi_d2iz>
 8007292:	4682      	mov	sl, r0
 8007294:	f7f9 f946 	bl	8000524 <__aeabi_i2d>
 8007298:	4642      	mov	r2, r8
 800729a:	464b      	mov	r3, r9
 800729c:	f7f9 f9ac 	bl	80005f8 <__aeabi_dmul>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4630      	mov	r0, r6
 80072a6:	4639      	mov	r1, r7
 80072a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80072ac:	f7f8 ffec 	bl	8000288 <__aeabi_dsub>
 80072b0:	f805 6b01 	strb.w	r6, [r5], #1
 80072b4:	9e01      	ldr	r6, [sp, #4]
 80072b6:	9f03      	ldr	r7, [sp, #12]
 80072b8:	1bae      	subs	r6, r5, r6
 80072ba:	42b7      	cmp	r7, r6
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	d135      	bne.n	800732e <_dtoa_r+0x6e6>
 80072c2:	f7f8 ffe3 	bl	800028c <__adddf3>
 80072c6:	4642      	mov	r2, r8
 80072c8:	464b      	mov	r3, r9
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	f7f9 fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80072d2:	b9d0      	cbnz	r0, 800730a <_dtoa_r+0x6c2>
 80072d4:	4642      	mov	r2, r8
 80072d6:	464b      	mov	r3, r9
 80072d8:	4630      	mov	r0, r6
 80072da:	4639      	mov	r1, r7
 80072dc:	f7f9 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80072e0:	b110      	cbz	r0, 80072e8 <_dtoa_r+0x6a0>
 80072e2:	f01a 0f01 	tst.w	sl, #1
 80072e6:	d110      	bne.n	800730a <_dtoa_r+0x6c2>
 80072e8:	4620      	mov	r0, r4
 80072ea:	ee18 1a10 	vmov	r1, s16
 80072ee:	f000 fae5 	bl	80078bc <_Bfree>
 80072f2:	2300      	movs	r3, #0
 80072f4:	9800      	ldr	r0, [sp, #0]
 80072f6:	702b      	strb	r3, [r5, #0]
 80072f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072fa:	3001      	adds	r0, #1
 80072fc:	6018      	str	r0, [r3, #0]
 80072fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007300:	2b00      	cmp	r3, #0
 8007302:	f43f acf1 	beq.w	8006ce8 <_dtoa_r+0xa0>
 8007306:	601d      	str	r5, [r3, #0]
 8007308:	e4ee      	b.n	8006ce8 <_dtoa_r+0xa0>
 800730a:	9f00      	ldr	r7, [sp, #0]
 800730c:	462b      	mov	r3, r5
 800730e:	461d      	mov	r5, r3
 8007310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007314:	2a39      	cmp	r2, #57	; 0x39
 8007316:	d106      	bne.n	8007326 <_dtoa_r+0x6de>
 8007318:	9a01      	ldr	r2, [sp, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d1f7      	bne.n	800730e <_dtoa_r+0x6c6>
 800731e:	9901      	ldr	r1, [sp, #4]
 8007320:	2230      	movs	r2, #48	; 0x30
 8007322:	3701      	adds	r7, #1
 8007324:	700a      	strb	r2, [r1, #0]
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	3201      	adds	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	e790      	b.n	8007250 <_dtoa_r+0x608>
 800732e:	4ba6      	ldr	r3, [pc, #664]	; (80075c8 <_dtoa_r+0x980>)
 8007330:	2200      	movs	r2, #0
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	2200      	movs	r2, #0
 8007338:	2300      	movs	r3, #0
 800733a:	4606      	mov	r6, r0
 800733c:	460f      	mov	r7, r1
 800733e:	f7f9 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007342:	2800      	cmp	r0, #0
 8007344:	d09d      	beq.n	8007282 <_dtoa_r+0x63a>
 8007346:	e7cf      	b.n	80072e8 <_dtoa_r+0x6a0>
 8007348:	9a08      	ldr	r2, [sp, #32]
 800734a:	2a00      	cmp	r2, #0
 800734c:	f000 80d7 	beq.w	80074fe <_dtoa_r+0x8b6>
 8007350:	9a06      	ldr	r2, [sp, #24]
 8007352:	2a01      	cmp	r2, #1
 8007354:	f300 80ba 	bgt.w	80074cc <_dtoa_r+0x884>
 8007358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800735a:	2a00      	cmp	r2, #0
 800735c:	f000 80b2 	beq.w	80074c4 <_dtoa_r+0x87c>
 8007360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007364:	9e07      	ldr	r6, [sp, #28]
 8007366:	9d04      	ldr	r5, [sp, #16]
 8007368:	9a04      	ldr	r2, [sp, #16]
 800736a:	441a      	add	r2, r3
 800736c:	9204      	str	r2, [sp, #16]
 800736e:	9a05      	ldr	r2, [sp, #20]
 8007370:	2101      	movs	r1, #1
 8007372:	441a      	add	r2, r3
 8007374:	4620      	mov	r0, r4
 8007376:	9205      	str	r2, [sp, #20]
 8007378:	f000 fb58 	bl	8007a2c <__i2b>
 800737c:	4607      	mov	r7, r0
 800737e:	2d00      	cmp	r5, #0
 8007380:	dd0c      	ble.n	800739c <_dtoa_r+0x754>
 8007382:	9b05      	ldr	r3, [sp, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd09      	ble.n	800739c <_dtoa_r+0x754>
 8007388:	42ab      	cmp	r3, r5
 800738a:	9a04      	ldr	r2, [sp, #16]
 800738c:	bfa8      	it	ge
 800738e:	462b      	movge	r3, r5
 8007390:	1ad2      	subs	r2, r2, r3
 8007392:	9204      	str	r2, [sp, #16]
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	1aed      	subs	r5, r5, r3
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	9b07      	ldr	r3, [sp, #28]
 800739e:	b31b      	cbz	r3, 80073e8 <_dtoa_r+0x7a0>
 80073a0:	9b08      	ldr	r3, [sp, #32]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 80af 	beq.w	8007506 <_dtoa_r+0x8be>
 80073a8:	2e00      	cmp	r6, #0
 80073aa:	dd13      	ble.n	80073d4 <_dtoa_r+0x78c>
 80073ac:	4639      	mov	r1, r7
 80073ae:	4632      	mov	r2, r6
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fbfb 	bl	8007bac <__pow5mult>
 80073b6:	ee18 2a10 	vmov	r2, s16
 80073ba:	4601      	mov	r1, r0
 80073bc:	4607      	mov	r7, r0
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 fb4a 	bl	8007a58 <__multiply>
 80073c4:	ee18 1a10 	vmov	r1, s16
 80073c8:	4680      	mov	r8, r0
 80073ca:	4620      	mov	r0, r4
 80073cc:	f000 fa76 	bl	80078bc <_Bfree>
 80073d0:	ee08 8a10 	vmov	s16, r8
 80073d4:	9b07      	ldr	r3, [sp, #28]
 80073d6:	1b9a      	subs	r2, r3, r6
 80073d8:	d006      	beq.n	80073e8 <_dtoa_r+0x7a0>
 80073da:	ee18 1a10 	vmov	r1, s16
 80073de:	4620      	mov	r0, r4
 80073e0:	f000 fbe4 	bl	8007bac <__pow5mult>
 80073e4:	ee08 0a10 	vmov	s16, r0
 80073e8:	2101      	movs	r1, #1
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fb1e 	bl	8007a2c <__i2b>
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	4606      	mov	r6, r0
 80073f6:	f340 8088 	ble.w	800750a <_dtoa_r+0x8c2>
 80073fa:	461a      	mov	r2, r3
 80073fc:	4601      	mov	r1, r0
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 fbd4 	bl	8007bac <__pow5mult>
 8007404:	9b06      	ldr	r3, [sp, #24]
 8007406:	2b01      	cmp	r3, #1
 8007408:	4606      	mov	r6, r0
 800740a:	f340 8081 	ble.w	8007510 <_dtoa_r+0x8c8>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	6933      	ldr	r3, [r6, #16]
 8007414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007418:	6918      	ldr	r0, [r3, #16]
 800741a:	f000 fab7 	bl	800798c <__hi0bits>
 800741e:	f1c0 0020 	rsb	r0, r0, #32
 8007422:	9b05      	ldr	r3, [sp, #20]
 8007424:	4418      	add	r0, r3
 8007426:	f010 001f 	ands.w	r0, r0, #31
 800742a:	f000 8092 	beq.w	8007552 <_dtoa_r+0x90a>
 800742e:	f1c0 0320 	rsb	r3, r0, #32
 8007432:	2b04      	cmp	r3, #4
 8007434:	f340 808a 	ble.w	800754c <_dtoa_r+0x904>
 8007438:	f1c0 001c 	rsb	r0, r0, #28
 800743c:	9b04      	ldr	r3, [sp, #16]
 800743e:	4403      	add	r3, r0
 8007440:	9304      	str	r3, [sp, #16]
 8007442:	9b05      	ldr	r3, [sp, #20]
 8007444:	4403      	add	r3, r0
 8007446:	4405      	add	r5, r0
 8007448:	9305      	str	r3, [sp, #20]
 800744a:	9b04      	ldr	r3, [sp, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd07      	ble.n	8007460 <_dtoa_r+0x818>
 8007450:	ee18 1a10 	vmov	r1, s16
 8007454:	461a      	mov	r2, r3
 8007456:	4620      	mov	r0, r4
 8007458:	f000 fc02 	bl	8007c60 <__lshift>
 800745c:	ee08 0a10 	vmov	s16, r0
 8007460:	9b05      	ldr	r3, [sp, #20]
 8007462:	2b00      	cmp	r3, #0
 8007464:	dd05      	ble.n	8007472 <_dtoa_r+0x82a>
 8007466:	4631      	mov	r1, r6
 8007468:	461a      	mov	r2, r3
 800746a:	4620      	mov	r0, r4
 800746c:	f000 fbf8 	bl	8007c60 <__lshift>
 8007470:	4606      	mov	r6, r0
 8007472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d06e      	beq.n	8007556 <_dtoa_r+0x90e>
 8007478:	ee18 0a10 	vmov	r0, s16
 800747c:	4631      	mov	r1, r6
 800747e:	f000 fc5f 	bl	8007d40 <__mcmp>
 8007482:	2800      	cmp	r0, #0
 8007484:	da67      	bge.n	8007556 <_dtoa_r+0x90e>
 8007486:	9b00      	ldr	r3, [sp, #0]
 8007488:	3b01      	subs	r3, #1
 800748a:	ee18 1a10 	vmov	r1, s16
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	220a      	movs	r2, #10
 8007492:	2300      	movs	r3, #0
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fa33 	bl	8007900 <__multadd>
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	ee08 0a10 	vmov	s16, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 81b1 	beq.w	8007808 <_dtoa_r+0xbc0>
 80074a6:	2300      	movs	r3, #0
 80074a8:	4639      	mov	r1, r7
 80074aa:	220a      	movs	r2, #10
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fa27 	bl	8007900 <__multadd>
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	4607      	mov	r7, r0
 80074b8:	f300 808e 	bgt.w	80075d8 <_dtoa_r+0x990>
 80074bc:	9b06      	ldr	r3, [sp, #24]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dc51      	bgt.n	8007566 <_dtoa_r+0x91e>
 80074c2:	e089      	b.n	80075d8 <_dtoa_r+0x990>
 80074c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074ca:	e74b      	b.n	8007364 <_dtoa_r+0x71c>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	1e5e      	subs	r6, r3, #1
 80074d0:	9b07      	ldr	r3, [sp, #28]
 80074d2:	42b3      	cmp	r3, r6
 80074d4:	bfbf      	itttt	lt
 80074d6:	9b07      	ldrlt	r3, [sp, #28]
 80074d8:	9607      	strlt	r6, [sp, #28]
 80074da:	1af2      	sublt	r2, r6, r3
 80074dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80074de:	bfb6      	itet	lt
 80074e0:	189b      	addlt	r3, r3, r2
 80074e2:	1b9e      	subge	r6, r3, r6
 80074e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	bfb8      	it	lt
 80074ea:	2600      	movlt	r6, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb7      	itett	lt
 80074f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80074f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80074f8:	1a9d      	sublt	r5, r3, r2
 80074fa:	2300      	movlt	r3, #0
 80074fc:	e734      	b.n	8007368 <_dtoa_r+0x720>
 80074fe:	9e07      	ldr	r6, [sp, #28]
 8007500:	9d04      	ldr	r5, [sp, #16]
 8007502:	9f08      	ldr	r7, [sp, #32]
 8007504:	e73b      	b.n	800737e <_dtoa_r+0x736>
 8007506:	9a07      	ldr	r2, [sp, #28]
 8007508:	e767      	b.n	80073da <_dtoa_r+0x792>
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	2b01      	cmp	r3, #1
 800750e:	dc18      	bgt.n	8007542 <_dtoa_r+0x8fa>
 8007510:	f1ba 0f00 	cmp.w	sl, #0
 8007514:	d115      	bne.n	8007542 <_dtoa_r+0x8fa>
 8007516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800751a:	b993      	cbnz	r3, 8007542 <_dtoa_r+0x8fa>
 800751c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007520:	0d1b      	lsrs	r3, r3, #20
 8007522:	051b      	lsls	r3, r3, #20
 8007524:	b183      	cbz	r3, 8007548 <_dtoa_r+0x900>
 8007526:	9b04      	ldr	r3, [sp, #16]
 8007528:	3301      	adds	r3, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	9b05      	ldr	r3, [sp, #20]
 800752e:	3301      	adds	r3, #1
 8007530:	9305      	str	r3, [sp, #20]
 8007532:	f04f 0801 	mov.w	r8, #1
 8007536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007538:	2b00      	cmp	r3, #0
 800753a:	f47f af6a 	bne.w	8007412 <_dtoa_r+0x7ca>
 800753e:	2001      	movs	r0, #1
 8007540:	e76f      	b.n	8007422 <_dtoa_r+0x7da>
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	e7f6      	b.n	8007536 <_dtoa_r+0x8ee>
 8007548:	4698      	mov	r8, r3
 800754a:	e7f4      	b.n	8007536 <_dtoa_r+0x8ee>
 800754c:	f43f af7d 	beq.w	800744a <_dtoa_r+0x802>
 8007550:	4618      	mov	r0, r3
 8007552:	301c      	adds	r0, #28
 8007554:	e772      	b.n	800743c <_dtoa_r+0x7f4>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	dc37      	bgt.n	80075cc <_dtoa_r+0x984>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	2b02      	cmp	r3, #2
 8007560:	dd34      	ble.n	80075cc <_dtoa_r+0x984>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	9302      	str	r3, [sp, #8]
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	b96b      	cbnz	r3, 8007586 <_dtoa_r+0x93e>
 800756a:	4631      	mov	r1, r6
 800756c:	2205      	movs	r2, #5
 800756e:	4620      	mov	r0, r4
 8007570:	f000 f9c6 	bl	8007900 <__multadd>
 8007574:	4601      	mov	r1, r0
 8007576:	4606      	mov	r6, r0
 8007578:	ee18 0a10 	vmov	r0, s16
 800757c:	f000 fbe0 	bl	8007d40 <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	f73f adbb 	bgt.w	80070fc <_dtoa_r+0x4b4>
 8007586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007588:	9d01      	ldr	r5, [sp, #4]
 800758a:	43db      	mvns	r3, r3
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	4631      	mov	r1, r6
 8007594:	4620      	mov	r0, r4
 8007596:	f000 f991 	bl	80078bc <_Bfree>
 800759a:	2f00      	cmp	r7, #0
 800759c:	f43f aea4 	beq.w	80072e8 <_dtoa_r+0x6a0>
 80075a0:	f1b8 0f00 	cmp.w	r8, #0
 80075a4:	d005      	beq.n	80075b2 <_dtoa_r+0x96a>
 80075a6:	45b8      	cmp	r8, r7
 80075a8:	d003      	beq.n	80075b2 <_dtoa_r+0x96a>
 80075aa:	4641      	mov	r1, r8
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 f985 	bl	80078bc <_Bfree>
 80075b2:	4639      	mov	r1, r7
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 f981 	bl	80078bc <_Bfree>
 80075ba:	e695      	b.n	80072e8 <_dtoa_r+0x6a0>
 80075bc:	2600      	movs	r6, #0
 80075be:	4637      	mov	r7, r6
 80075c0:	e7e1      	b.n	8007586 <_dtoa_r+0x93e>
 80075c2:	9700      	str	r7, [sp, #0]
 80075c4:	4637      	mov	r7, r6
 80075c6:	e599      	b.n	80070fc <_dtoa_r+0x4b4>
 80075c8:	40240000 	.word	0x40240000
 80075cc:	9b08      	ldr	r3, [sp, #32]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80ca 	beq.w	8007768 <_dtoa_r+0xb20>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	9302      	str	r3, [sp, #8]
 80075d8:	2d00      	cmp	r5, #0
 80075da:	dd05      	ble.n	80075e8 <_dtoa_r+0x9a0>
 80075dc:	4639      	mov	r1, r7
 80075de:	462a      	mov	r2, r5
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fb3d 	bl	8007c60 <__lshift>
 80075e6:	4607      	mov	r7, r0
 80075e8:	f1b8 0f00 	cmp.w	r8, #0
 80075ec:	d05b      	beq.n	80076a6 <_dtoa_r+0xa5e>
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4620      	mov	r0, r4
 80075f2:	f000 f923 	bl	800783c <_Balloc>
 80075f6:	4605      	mov	r5, r0
 80075f8:	b928      	cbnz	r0, 8007606 <_dtoa_r+0x9be>
 80075fa:	4b87      	ldr	r3, [pc, #540]	; (8007818 <_dtoa_r+0xbd0>)
 80075fc:	4602      	mov	r2, r0
 80075fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007602:	f7ff bb3b 	b.w	8006c7c <_dtoa_r+0x34>
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	3202      	adds	r2, #2
 800760a:	0092      	lsls	r2, r2, #2
 800760c:	f107 010c 	add.w	r1, r7, #12
 8007610:	300c      	adds	r0, #12
 8007612:	f7fe fdc1 	bl	8006198 <memcpy>
 8007616:	2201      	movs	r2, #1
 8007618:	4629      	mov	r1, r5
 800761a:	4620      	mov	r0, r4
 800761c:	f000 fb20 	bl	8007c60 <__lshift>
 8007620:	9b01      	ldr	r3, [sp, #4]
 8007622:	f103 0901 	add.w	r9, r3, #1
 8007626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800762a:	4413      	add	r3, r2
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	f00a 0301 	and.w	r3, sl, #1
 8007632:	46b8      	mov	r8, r7
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	4607      	mov	r7, r0
 8007638:	4631      	mov	r1, r6
 800763a:	ee18 0a10 	vmov	r0, s16
 800763e:	f7ff fa77 	bl	8006b30 <quorem>
 8007642:	4641      	mov	r1, r8
 8007644:	9002      	str	r0, [sp, #8]
 8007646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800764a:	ee18 0a10 	vmov	r0, s16
 800764e:	f000 fb77 	bl	8007d40 <__mcmp>
 8007652:	463a      	mov	r2, r7
 8007654:	9003      	str	r0, [sp, #12]
 8007656:	4631      	mov	r1, r6
 8007658:	4620      	mov	r0, r4
 800765a:	f000 fb8d 	bl	8007d78 <__mdiff>
 800765e:	68c2      	ldr	r2, [r0, #12]
 8007660:	f109 3bff 	add.w	fp, r9, #4294967295
 8007664:	4605      	mov	r5, r0
 8007666:	bb02      	cbnz	r2, 80076aa <_dtoa_r+0xa62>
 8007668:	4601      	mov	r1, r0
 800766a:	ee18 0a10 	vmov	r0, s16
 800766e:	f000 fb67 	bl	8007d40 <__mcmp>
 8007672:	4602      	mov	r2, r0
 8007674:	4629      	mov	r1, r5
 8007676:	4620      	mov	r0, r4
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	f000 f91f 	bl	80078bc <_Bfree>
 800767e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007682:	ea43 0102 	orr.w	r1, r3, r2
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	430b      	orrs	r3, r1
 800768a:	464d      	mov	r5, r9
 800768c:	d10f      	bne.n	80076ae <_dtoa_r+0xa66>
 800768e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007692:	d02a      	beq.n	80076ea <_dtoa_r+0xaa2>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd02      	ble.n	80076a0 <_dtoa_r+0xa58>
 800769a:	9b02      	ldr	r3, [sp, #8]
 800769c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80076a0:	f88b a000 	strb.w	sl, [fp]
 80076a4:	e775      	b.n	8007592 <_dtoa_r+0x94a>
 80076a6:	4638      	mov	r0, r7
 80076a8:	e7ba      	b.n	8007620 <_dtoa_r+0x9d8>
 80076aa:	2201      	movs	r2, #1
 80076ac:	e7e2      	b.n	8007674 <_dtoa_r+0xa2c>
 80076ae:	9b03      	ldr	r3, [sp, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	db04      	blt.n	80076be <_dtoa_r+0xa76>
 80076b4:	9906      	ldr	r1, [sp, #24]
 80076b6:	430b      	orrs	r3, r1
 80076b8:	9904      	ldr	r1, [sp, #16]
 80076ba:	430b      	orrs	r3, r1
 80076bc:	d122      	bne.n	8007704 <_dtoa_r+0xabc>
 80076be:	2a00      	cmp	r2, #0
 80076c0:	ddee      	ble.n	80076a0 <_dtoa_r+0xa58>
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	2201      	movs	r2, #1
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fac9 	bl	8007c60 <__lshift>
 80076ce:	4631      	mov	r1, r6
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	f000 fb34 	bl	8007d40 <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	dc03      	bgt.n	80076e4 <_dtoa_r+0xa9c>
 80076dc:	d1e0      	bne.n	80076a0 <_dtoa_r+0xa58>
 80076de:	f01a 0f01 	tst.w	sl, #1
 80076e2:	d0dd      	beq.n	80076a0 <_dtoa_r+0xa58>
 80076e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80076e8:	d1d7      	bne.n	800769a <_dtoa_r+0xa52>
 80076ea:	2339      	movs	r3, #57	; 0x39
 80076ec:	f88b 3000 	strb.w	r3, [fp]
 80076f0:	462b      	mov	r3, r5
 80076f2:	461d      	mov	r5, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076fa:	2a39      	cmp	r2, #57	; 0x39
 80076fc:	d071      	beq.n	80077e2 <_dtoa_r+0xb9a>
 80076fe:	3201      	adds	r2, #1
 8007700:	701a      	strb	r2, [r3, #0]
 8007702:	e746      	b.n	8007592 <_dtoa_r+0x94a>
 8007704:	2a00      	cmp	r2, #0
 8007706:	dd07      	ble.n	8007718 <_dtoa_r+0xad0>
 8007708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800770c:	d0ed      	beq.n	80076ea <_dtoa_r+0xaa2>
 800770e:	f10a 0301 	add.w	r3, sl, #1
 8007712:	f88b 3000 	strb.w	r3, [fp]
 8007716:	e73c      	b.n	8007592 <_dtoa_r+0x94a>
 8007718:	9b05      	ldr	r3, [sp, #20]
 800771a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800771e:	4599      	cmp	r9, r3
 8007720:	d047      	beq.n	80077b2 <_dtoa_r+0xb6a>
 8007722:	ee18 1a10 	vmov	r1, s16
 8007726:	2300      	movs	r3, #0
 8007728:	220a      	movs	r2, #10
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f8e8 	bl	8007900 <__multadd>
 8007730:	45b8      	cmp	r8, r7
 8007732:	ee08 0a10 	vmov	s16, r0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	f04f 020a 	mov.w	r2, #10
 800773e:	4641      	mov	r1, r8
 8007740:	4620      	mov	r0, r4
 8007742:	d106      	bne.n	8007752 <_dtoa_r+0xb0a>
 8007744:	f000 f8dc 	bl	8007900 <__multadd>
 8007748:	4680      	mov	r8, r0
 800774a:	4607      	mov	r7, r0
 800774c:	f109 0901 	add.w	r9, r9, #1
 8007750:	e772      	b.n	8007638 <_dtoa_r+0x9f0>
 8007752:	f000 f8d5 	bl	8007900 <__multadd>
 8007756:	4639      	mov	r1, r7
 8007758:	4680      	mov	r8, r0
 800775a:	2300      	movs	r3, #0
 800775c:	220a      	movs	r2, #10
 800775e:	4620      	mov	r0, r4
 8007760:	f000 f8ce 	bl	8007900 <__multadd>
 8007764:	4607      	mov	r7, r0
 8007766:	e7f1      	b.n	800774c <_dtoa_r+0xb04>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	9302      	str	r3, [sp, #8]
 800776c:	9d01      	ldr	r5, [sp, #4]
 800776e:	ee18 0a10 	vmov	r0, s16
 8007772:	4631      	mov	r1, r6
 8007774:	f7ff f9dc 	bl	8006b30 <quorem>
 8007778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	f805 ab01 	strb.w	sl, [r5], #1
 8007782:	1aea      	subs	r2, r5, r3
 8007784:	9b02      	ldr	r3, [sp, #8]
 8007786:	4293      	cmp	r3, r2
 8007788:	dd09      	ble.n	800779e <_dtoa_r+0xb56>
 800778a:	ee18 1a10 	vmov	r1, s16
 800778e:	2300      	movs	r3, #0
 8007790:	220a      	movs	r2, #10
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f8b4 	bl	8007900 <__multadd>
 8007798:	ee08 0a10 	vmov	s16, r0
 800779c:	e7e7      	b.n	800776e <_dtoa_r+0xb26>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bfc8      	it	gt
 80077a4:	461d      	movgt	r5, r3
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	bfd8      	it	le
 80077aa:	2501      	movle	r5, #1
 80077ac:	441d      	add	r5, r3
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	ee18 1a10 	vmov	r1, s16
 80077b6:	2201      	movs	r2, #1
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fa51 	bl	8007c60 <__lshift>
 80077be:	4631      	mov	r1, r6
 80077c0:	ee08 0a10 	vmov	s16, r0
 80077c4:	f000 fabc 	bl	8007d40 <__mcmp>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	dc91      	bgt.n	80076f0 <_dtoa_r+0xaa8>
 80077cc:	d102      	bne.n	80077d4 <_dtoa_r+0xb8c>
 80077ce:	f01a 0f01 	tst.w	sl, #1
 80077d2:	d18d      	bne.n	80076f0 <_dtoa_r+0xaa8>
 80077d4:	462b      	mov	r3, r5
 80077d6:	461d      	mov	r5, r3
 80077d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077dc:	2a30      	cmp	r2, #48	; 0x30
 80077de:	d0fa      	beq.n	80077d6 <_dtoa_r+0xb8e>
 80077e0:	e6d7      	b.n	8007592 <_dtoa_r+0x94a>
 80077e2:	9a01      	ldr	r2, [sp, #4]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d184      	bne.n	80076f2 <_dtoa_r+0xaaa>
 80077e8:	9b00      	ldr	r3, [sp, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2331      	movs	r3, #49	; 0x31
 80077f0:	7013      	strb	r3, [r2, #0]
 80077f2:	e6ce      	b.n	8007592 <_dtoa_r+0x94a>
 80077f4:	4b09      	ldr	r3, [pc, #36]	; (800781c <_dtoa_r+0xbd4>)
 80077f6:	f7ff ba95 	b.w	8006d24 <_dtoa_r+0xdc>
 80077fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f47f aa6e 	bne.w	8006cde <_dtoa_r+0x96>
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <_dtoa_r+0xbd8>)
 8007804:	f7ff ba8e 	b.w	8006d24 <_dtoa_r+0xdc>
 8007808:	9b02      	ldr	r3, [sp, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dcae      	bgt.n	800776c <_dtoa_r+0xb24>
 800780e:	9b06      	ldr	r3, [sp, #24]
 8007810:	2b02      	cmp	r3, #2
 8007812:	f73f aea8 	bgt.w	8007566 <_dtoa_r+0x91e>
 8007816:	e7a9      	b.n	800776c <_dtoa_r+0xb24>
 8007818:	08009d7f 	.word	0x08009d7f
 800781c:	08009cdc 	.word	0x08009cdc
 8007820:	08009d00 	.word	0x08009d00

08007824 <_localeconv_r>:
 8007824:	4800      	ldr	r0, [pc, #0]	; (8007828 <_localeconv_r+0x4>)
 8007826:	4770      	bx	lr
 8007828:	20000164 	.word	0x20000164

0800782c <malloc>:
 800782c:	4b02      	ldr	r3, [pc, #8]	; (8007838 <malloc+0xc>)
 800782e:	4601      	mov	r1, r0
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	f000 bc09 	b.w	8008048 <_malloc_r>
 8007836:	bf00      	nop
 8007838:	20000010 	.word	0x20000010

0800783c <_Balloc>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007840:	4604      	mov	r4, r0
 8007842:	460d      	mov	r5, r1
 8007844:	b976      	cbnz	r6, 8007864 <_Balloc+0x28>
 8007846:	2010      	movs	r0, #16
 8007848:	f7ff fff0 	bl	800782c <malloc>
 800784c:	4602      	mov	r2, r0
 800784e:	6260      	str	r0, [r4, #36]	; 0x24
 8007850:	b920      	cbnz	r0, 800785c <_Balloc+0x20>
 8007852:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <_Balloc+0x78>)
 8007854:	4818      	ldr	r0, [pc, #96]	; (80078b8 <_Balloc+0x7c>)
 8007856:	2166      	movs	r1, #102	; 0x66
 8007858:	f000 fdd6 	bl	8008408 <__assert_func>
 800785c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007860:	6006      	str	r6, [r0, #0]
 8007862:	60c6      	str	r6, [r0, #12]
 8007864:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007866:	68f3      	ldr	r3, [r6, #12]
 8007868:	b183      	cbz	r3, 800788c <_Balloc+0x50>
 800786a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007872:	b9b8      	cbnz	r0, 80078a4 <_Balloc+0x68>
 8007874:	2101      	movs	r1, #1
 8007876:	fa01 f605 	lsl.w	r6, r1, r5
 800787a:	1d72      	adds	r2, r6, #5
 800787c:	0092      	lsls	r2, r2, #2
 800787e:	4620      	mov	r0, r4
 8007880:	f000 fb60 	bl	8007f44 <_calloc_r>
 8007884:	b160      	cbz	r0, 80078a0 <_Balloc+0x64>
 8007886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800788a:	e00e      	b.n	80078aa <_Balloc+0x6e>
 800788c:	2221      	movs	r2, #33	; 0x21
 800788e:	2104      	movs	r1, #4
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fb57 	bl	8007f44 <_calloc_r>
 8007896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007898:	60f0      	str	r0, [r6, #12]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e4      	bne.n	800786a <_Balloc+0x2e>
 80078a0:	2000      	movs	r0, #0
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	6802      	ldr	r2, [r0, #0]
 80078a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078aa:	2300      	movs	r3, #0
 80078ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078b0:	e7f7      	b.n	80078a2 <_Balloc+0x66>
 80078b2:	bf00      	nop
 80078b4:	08009d0d 	.word	0x08009d0d
 80078b8:	08009d90 	.word	0x08009d90

080078bc <_Bfree>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80078c0:	4605      	mov	r5, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	b976      	cbnz	r6, 80078e4 <_Bfree+0x28>
 80078c6:	2010      	movs	r0, #16
 80078c8:	f7ff ffb0 	bl	800782c <malloc>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6268      	str	r0, [r5, #36]	; 0x24
 80078d0:	b920      	cbnz	r0, 80078dc <_Bfree+0x20>
 80078d2:	4b09      	ldr	r3, [pc, #36]	; (80078f8 <_Bfree+0x3c>)
 80078d4:	4809      	ldr	r0, [pc, #36]	; (80078fc <_Bfree+0x40>)
 80078d6:	218a      	movs	r1, #138	; 0x8a
 80078d8:	f000 fd96 	bl	8008408 <__assert_func>
 80078dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078e0:	6006      	str	r6, [r0, #0]
 80078e2:	60c6      	str	r6, [r0, #12]
 80078e4:	b13c      	cbz	r4, 80078f6 <_Bfree+0x3a>
 80078e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078e8:	6862      	ldr	r2, [r4, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078f0:	6021      	str	r1, [r4, #0]
 80078f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	08009d0d 	.word	0x08009d0d
 80078fc:	08009d90 	.word	0x08009d90

08007900 <__multadd>:
 8007900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	690d      	ldr	r5, [r1, #16]
 8007906:	4607      	mov	r7, r0
 8007908:	460c      	mov	r4, r1
 800790a:	461e      	mov	r6, r3
 800790c:	f101 0c14 	add.w	ip, r1, #20
 8007910:	2000      	movs	r0, #0
 8007912:	f8dc 3000 	ldr.w	r3, [ip]
 8007916:	b299      	uxth	r1, r3
 8007918:	fb02 6101 	mla	r1, r2, r1, r6
 800791c:	0c1e      	lsrs	r6, r3, #16
 800791e:	0c0b      	lsrs	r3, r1, #16
 8007920:	fb02 3306 	mla	r3, r2, r6, r3
 8007924:	b289      	uxth	r1, r1
 8007926:	3001      	adds	r0, #1
 8007928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800792c:	4285      	cmp	r5, r0
 800792e:	f84c 1b04 	str.w	r1, [ip], #4
 8007932:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007936:	dcec      	bgt.n	8007912 <__multadd+0x12>
 8007938:	b30e      	cbz	r6, 800797e <__multadd+0x7e>
 800793a:	68a3      	ldr	r3, [r4, #8]
 800793c:	42ab      	cmp	r3, r5
 800793e:	dc19      	bgt.n	8007974 <__multadd+0x74>
 8007940:	6861      	ldr	r1, [r4, #4]
 8007942:	4638      	mov	r0, r7
 8007944:	3101      	adds	r1, #1
 8007946:	f7ff ff79 	bl	800783c <_Balloc>
 800794a:	4680      	mov	r8, r0
 800794c:	b928      	cbnz	r0, 800795a <__multadd+0x5a>
 800794e:	4602      	mov	r2, r0
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <__multadd+0x84>)
 8007952:	480d      	ldr	r0, [pc, #52]	; (8007988 <__multadd+0x88>)
 8007954:	21b5      	movs	r1, #181	; 0xb5
 8007956:	f000 fd57 	bl	8008408 <__assert_func>
 800795a:	6922      	ldr	r2, [r4, #16]
 800795c:	3202      	adds	r2, #2
 800795e:	f104 010c 	add.w	r1, r4, #12
 8007962:	0092      	lsls	r2, r2, #2
 8007964:	300c      	adds	r0, #12
 8007966:	f7fe fc17 	bl	8006198 <memcpy>
 800796a:	4621      	mov	r1, r4
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff ffa5 	bl	80078bc <_Bfree>
 8007972:	4644      	mov	r4, r8
 8007974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007978:	3501      	adds	r5, #1
 800797a:	615e      	str	r6, [r3, #20]
 800797c:	6125      	str	r5, [r4, #16]
 800797e:	4620      	mov	r0, r4
 8007980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007984:	08009d7f 	.word	0x08009d7f
 8007988:	08009d90 	.word	0x08009d90

0800798c <__hi0bits>:
 800798c:	0c03      	lsrs	r3, r0, #16
 800798e:	041b      	lsls	r3, r3, #16
 8007990:	b9d3      	cbnz	r3, 80079c8 <__hi0bits+0x3c>
 8007992:	0400      	lsls	r0, r0, #16
 8007994:	2310      	movs	r3, #16
 8007996:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800799a:	bf04      	itt	eq
 800799c:	0200      	lsleq	r0, r0, #8
 800799e:	3308      	addeq	r3, #8
 80079a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80079a4:	bf04      	itt	eq
 80079a6:	0100      	lsleq	r0, r0, #4
 80079a8:	3304      	addeq	r3, #4
 80079aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80079ae:	bf04      	itt	eq
 80079b0:	0080      	lsleq	r0, r0, #2
 80079b2:	3302      	addeq	r3, #2
 80079b4:	2800      	cmp	r0, #0
 80079b6:	db05      	blt.n	80079c4 <__hi0bits+0x38>
 80079b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80079bc:	f103 0301 	add.w	r3, r3, #1
 80079c0:	bf08      	it	eq
 80079c2:	2320      	moveq	r3, #32
 80079c4:	4618      	mov	r0, r3
 80079c6:	4770      	bx	lr
 80079c8:	2300      	movs	r3, #0
 80079ca:	e7e4      	b.n	8007996 <__hi0bits+0xa>

080079cc <__lo0bits>:
 80079cc:	6803      	ldr	r3, [r0, #0]
 80079ce:	f013 0207 	ands.w	r2, r3, #7
 80079d2:	4601      	mov	r1, r0
 80079d4:	d00b      	beq.n	80079ee <__lo0bits+0x22>
 80079d6:	07da      	lsls	r2, r3, #31
 80079d8:	d423      	bmi.n	8007a22 <__lo0bits+0x56>
 80079da:	0798      	lsls	r0, r3, #30
 80079dc:	bf49      	itett	mi
 80079de:	085b      	lsrmi	r3, r3, #1
 80079e0:	089b      	lsrpl	r3, r3, #2
 80079e2:	2001      	movmi	r0, #1
 80079e4:	600b      	strmi	r3, [r1, #0]
 80079e6:	bf5c      	itt	pl
 80079e8:	600b      	strpl	r3, [r1, #0]
 80079ea:	2002      	movpl	r0, #2
 80079ec:	4770      	bx	lr
 80079ee:	b298      	uxth	r0, r3
 80079f0:	b9a8      	cbnz	r0, 8007a1e <__lo0bits+0x52>
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	2010      	movs	r0, #16
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	b90a      	cbnz	r2, 80079fe <__lo0bits+0x32>
 80079fa:	3008      	adds	r0, #8
 80079fc:	0a1b      	lsrs	r3, r3, #8
 80079fe:	071a      	lsls	r2, r3, #28
 8007a00:	bf04      	itt	eq
 8007a02:	091b      	lsreq	r3, r3, #4
 8007a04:	3004      	addeq	r0, #4
 8007a06:	079a      	lsls	r2, r3, #30
 8007a08:	bf04      	itt	eq
 8007a0a:	089b      	lsreq	r3, r3, #2
 8007a0c:	3002      	addeq	r0, #2
 8007a0e:	07da      	lsls	r2, r3, #31
 8007a10:	d403      	bmi.n	8007a1a <__lo0bits+0x4e>
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	f100 0001 	add.w	r0, r0, #1
 8007a18:	d005      	beq.n	8007a26 <__lo0bits+0x5a>
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	4770      	bx	lr
 8007a1e:	4610      	mov	r0, r2
 8007a20:	e7e9      	b.n	80079f6 <__lo0bits+0x2a>
 8007a22:	2000      	movs	r0, #0
 8007a24:	4770      	bx	lr
 8007a26:	2020      	movs	r0, #32
 8007a28:	4770      	bx	lr
	...

08007a2c <__i2b>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2101      	movs	r1, #1
 8007a32:	f7ff ff03 	bl	800783c <_Balloc>
 8007a36:	4602      	mov	r2, r0
 8007a38:	b928      	cbnz	r0, 8007a46 <__i2b+0x1a>
 8007a3a:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <__i2b+0x24>)
 8007a3c:	4805      	ldr	r0, [pc, #20]	; (8007a54 <__i2b+0x28>)
 8007a3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a42:	f000 fce1 	bl	8008408 <__assert_func>
 8007a46:	2301      	movs	r3, #1
 8007a48:	6144      	str	r4, [r0, #20]
 8007a4a:	6103      	str	r3, [r0, #16]
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	bf00      	nop
 8007a50:	08009d7f 	.word	0x08009d7f
 8007a54:	08009d90 	.word	0x08009d90

08007a58 <__multiply>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	4691      	mov	r9, r2
 8007a5e:	690a      	ldr	r2, [r1, #16]
 8007a60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bfb8      	it	lt
 8007a68:	460b      	movlt	r3, r1
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	bfbc      	itt	lt
 8007a6e:	464c      	movlt	r4, r9
 8007a70:	4699      	movlt	r9, r3
 8007a72:	6927      	ldr	r7, [r4, #16]
 8007a74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a78:	68a3      	ldr	r3, [r4, #8]
 8007a7a:	6861      	ldr	r1, [r4, #4]
 8007a7c:	eb07 060a 	add.w	r6, r7, sl
 8007a80:	42b3      	cmp	r3, r6
 8007a82:	b085      	sub	sp, #20
 8007a84:	bfb8      	it	lt
 8007a86:	3101      	addlt	r1, #1
 8007a88:	f7ff fed8 	bl	800783c <_Balloc>
 8007a8c:	b930      	cbnz	r0, 8007a9c <__multiply+0x44>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4b44      	ldr	r3, [pc, #272]	; (8007ba4 <__multiply+0x14c>)
 8007a92:	4845      	ldr	r0, [pc, #276]	; (8007ba8 <__multiply+0x150>)
 8007a94:	f240 115d 	movw	r1, #349	; 0x15d
 8007a98:	f000 fcb6 	bl	8008408 <__assert_func>
 8007a9c:	f100 0514 	add.w	r5, r0, #20
 8007aa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007aa4:	462b      	mov	r3, r5
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4543      	cmp	r3, r8
 8007aaa:	d321      	bcc.n	8007af0 <__multiply+0x98>
 8007aac:	f104 0314 	add.w	r3, r4, #20
 8007ab0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ab4:	f109 0314 	add.w	r3, r9, #20
 8007ab8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007abc:	9202      	str	r2, [sp, #8]
 8007abe:	1b3a      	subs	r2, r7, r4
 8007ac0:	3a15      	subs	r2, #21
 8007ac2:	f022 0203 	bic.w	r2, r2, #3
 8007ac6:	3204      	adds	r2, #4
 8007ac8:	f104 0115 	add.w	r1, r4, #21
 8007acc:	428f      	cmp	r7, r1
 8007ace:	bf38      	it	cc
 8007ad0:	2204      	movcc	r2, #4
 8007ad2:	9201      	str	r2, [sp, #4]
 8007ad4:	9a02      	ldr	r2, [sp, #8]
 8007ad6:	9303      	str	r3, [sp, #12]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d80c      	bhi.n	8007af6 <__multiply+0x9e>
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	dd03      	ble.n	8007ae8 <__multiply+0x90>
 8007ae0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d05a      	beq.n	8007b9e <__multiply+0x146>
 8007ae8:	6106      	str	r6, [r0, #16]
 8007aea:	b005      	add	sp, #20
 8007aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af0:	f843 2b04 	str.w	r2, [r3], #4
 8007af4:	e7d8      	b.n	8007aa8 <__multiply+0x50>
 8007af6:	f8b3 a000 	ldrh.w	sl, [r3]
 8007afa:	f1ba 0f00 	cmp.w	sl, #0
 8007afe:	d024      	beq.n	8007b4a <__multiply+0xf2>
 8007b00:	f104 0e14 	add.w	lr, r4, #20
 8007b04:	46a9      	mov	r9, r5
 8007b06:	f04f 0c00 	mov.w	ip, #0
 8007b0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b0e:	f8d9 1000 	ldr.w	r1, [r9]
 8007b12:	fa1f fb82 	uxth.w	fp, r2
 8007b16:	b289      	uxth	r1, r1
 8007b18:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007b20:	f8d9 2000 	ldr.w	r2, [r9]
 8007b24:	4461      	add	r1, ip
 8007b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b2a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007b2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b32:	b289      	uxth	r1, r1
 8007b34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b38:	4577      	cmp	r7, lr
 8007b3a:	f849 1b04 	str.w	r1, [r9], #4
 8007b3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b42:	d8e2      	bhi.n	8007b0a <__multiply+0xb2>
 8007b44:	9a01      	ldr	r2, [sp, #4]
 8007b46:	f845 c002 	str.w	ip, [r5, r2]
 8007b4a:	9a03      	ldr	r2, [sp, #12]
 8007b4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b50:	3304      	adds	r3, #4
 8007b52:	f1b9 0f00 	cmp.w	r9, #0
 8007b56:	d020      	beq.n	8007b9a <__multiply+0x142>
 8007b58:	6829      	ldr	r1, [r5, #0]
 8007b5a:	f104 0c14 	add.w	ip, r4, #20
 8007b5e:	46ae      	mov	lr, r5
 8007b60:	f04f 0a00 	mov.w	sl, #0
 8007b64:	f8bc b000 	ldrh.w	fp, [ip]
 8007b68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b6c:	fb09 220b 	mla	r2, r9, fp, r2
 8007b70:	4492      	add	sl, r2
 8007b72:	b289      	uxth	r1, r1
 8007b74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007b78:	f84e 1b04 	str.w	r1, [lr], #4
 8007b7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b80:	f8be 1000 	ldrh.w	r1, [lr]
 8007b84:	0c12      	lsrs	r2, r2, #16
 8007b86:	fb09 1102 	mla	r1, r9, r2, r1
 8007b8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007b8e:	4567      	cmp	r7, ip
 8007b90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b94:	d8e6      	bhi.n	8007b64 <__multiply+0x10c>
 8007b96:	9a01      	ldr	r2, [sp, #4]
 8007b98:	50a9      	str	r1, [r5, r2]
 8007b9a:	3504      	adds	r5, #4
 8007b9c:	e79a      	b.n	8007ad4 <__multiply+0x7c>
 8007b9e:	3e01      	subs	r6, #1
 8007ba0:	e79c      	b.n	8007adc <__multiply+0x84>
 8007ba2:	bf00      	nop
 8007ba4:	08009d7f 	.word	0x08009d7f
 8007ba8:	08009d90 	.word	0x08009d90

08007bac <__pow5mult>:
 8007bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	f012 0203 	ands.w	r2, r2, #3
 8007bb6:	4606      	mov	r6, r0
 8007bb8:	460f      	mov	r7, r1
 8007bba:	d007      	beq.n	8007bcc <__pow5mult+0x20>
 8007bbc:	4c25      	ldr	r4, [pc, #148]	; (8007c54 <__pow5mult+0xa8>)
 8007bbe:	3a01      	subs	r2, #1
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bc6:	f7ff fe9b 	bl	8007900 <__multadd>
 8007bca:	4607      	mov	r7, r0
 8007bcc:	10ad      	asrs	r5, r5, #2
 8007bce:	d03d      	beq.n	8007c4c <__pow5mult+0xa0>
 8007bd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bd2:	b97c      	cbnz	r4, 8007bf4 <__pow5mult+0x48>
 8007bd4:	2010      	movs	r0, #16
 8007bd6:	f7ff fe29 	bl	800782c <malloc>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	6270      	str	r0, [r6, #36]	; 0x24
 8007bde:	b928      	cbnz	r0, 8007bec <__pow5mult+0x40>
 8007be0:	4b1d      	ldr	r3, [pc, #116]	; (8007c58 <__pow5mult+0xac>)
 8007be2:	481e      	ldr	r0, [pc, #120]	; (8007c5c <__pow5mult+0xb0>)
 8007be4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007be8:	f000 fc0e 	bl	8008408 <__assert_func>
 8007bec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bf0:	6004      	str	r4, [r0, #0]
 8007bf2:	60c4      	str	r4, [r0, #12]
 8007bf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007bf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bfc:	b94c      	cbnz	r4, 8007c12 <__pow5mult+0x66>
 8007bfe:	f240 2171 	movw	r1, #625	; 0x271
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7ff ff12 	bl	8007a2c <__i2b>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c0e:	4604      	mov	r4, r0
 8007c10:	6003      	str	r3, [r0, #0]
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	07eb      	lsls	r3, r5, #31
 8007c18:	d50a      	bpl.n	8007c30 <__pow5mult+0x84>
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4622      	mov	r2, r4
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff ff1a 	bl	8007a58 <__multiply>
 8007c24:	4639      	mov	r1, r7
 8007c26:	4680      	mov	r8, r0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff fe47 	bl	80078bc <_Bfree>
 8007c2e:	4647      	mov	r7, r8
 8007c30:	106d      	asrs	r5, r5, #1
 8007c32:	d00b      	beq.n	8007c4c <__pow5mult+0xa0>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	b938      	cbnz	r0, 8007c48 <__pow5mult+0x9c>
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ff0b 	bl	8007a58 <__multiply>
 8007c42:	6020      	str	r0, [r4, #0]
 8007c44:	f8c0 9000 	str.w	r9, [r0]
 8007c48:	4604      	mov	r4, r0
 8007c4a:	e7e4      	b.n	8007c16 <__pow5mult+0x6a>
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c52:	bf00      	nop
 8007c54:	08009ee0 	.word	0x08009ee0
 8007c58:	08009d0d 	.word	0x08009d0d
 8007c5c:	08009d90 	.word	0x08009d90

08007c60 <__lshift>:
 8007c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	6849      	ldr	r1, [r1, #4]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c6e:	68a3      	ldr	r3, [r4, #8]
 8007c70:	4607      	mov	r7, r0
 8007c72:	4691      	mov	r9, r2
 8007c74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c78:	f108 0601 	add.w	r6, r8, #1
 8007c7c:	42b3      	cmp	r3, r6
 8007c7e:	db0b      	blt.n	8007c98 <__lshift+0x38>
 8007c80:	4638      	mov	r0, r7
 8007c82:	f7ff fddb 	bl	800783c <_Balloc>
 8007c86:	4605      	mov	r5, r0
 8007c88:	b948      	cbnz	r0, 8007c9e <__lshift+0x3e>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b2a      	ldr	r3, [pc, #168]	; (8007d38 <__lshift+0xd8>)
 8007c8e:	482b      	ldr	r0, [pc, #172]	; (8007d3c <__lshift+0xdc>)
 8007c90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c94:	f000 fbb8 	bl	8008408 <__assert_func>
 8007c98:	3101      	adds	r1, #1
 8007c9a:	005b      	lsls	r3, r3, #1
 8007c9c:	e7ee      	b.n	8007c7c <__lshift+0x1c>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f100 0114 	add.w	r1, r0, #20
 8007ca4:	f100 0210 	add.w	r2, r0, #16
 8007ca8:	4618      	mov	r0, r3
 8007caa:	4553      	cmp	r3, sl
 8007cac:	db37      	blt.n	8007d1e <__lshift+0xbe>
 8007cae:	6920      	ldr	r0, [r4, #16]
 8007cb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cb4:	f104 0314 	add.w	r3, r4, #20
 8007cb8:	f019 091f 	ands.w	r9, r9, #31
 8007cbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cc0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007cc4:	d02f      	beq.n	8007d26 <__lshift+0xc6>
 8007cc6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cca:	468a      	mov	sl, r1
 8007ccc:	f04f 0c00 	mov.w	ip, #0
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	fa02 f209 	lsl.w	r2, r2, r9
 8007cd6:	ea42 020c 	orr.w	r2, r2, ip
 8007cda:	f84a 2b04 	str.w	r2, [sl], #4
 8007cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce2:	4298      	cmp	r0, r3
 8007ce4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ce8:	d8f2      	bhi.n	8007cd0 <__lshift+0x70>
 8007cea:	1b03      	subs	r3, r0, r4
 8007cec:	3b15      	subs	r3, #21
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	f104 0215 	add.w	r2, r4, #21
 8007cf8:	4290      	cmp	r0, r2
 8007cfa:	bf38      	it	cc
 8007cfc:	2304      	movcc	r3, #4
 8007cfe:	f841 c003 	str.w	ip, [r1, r3]
 8007d02:	f1bc 0f00 	cmp.w	ip, #0
 8007d06:	d001      	beq.n	8007d0c <__lshift+0xac>
 8007d08:	f108 0602 	add.w	r6, r8, #2
 8007d0c:	3e01      	subs	r6, #1
 8007d0e:	4638      	mov	r0, r7
 8007d10:	612e      	str	r6, [r5, #16]
 8007d12:	4621      	mov	r1, r4
 8007d14:	f7ff fdd2 	bl	80078bc <_Bfree>
 8007d18:	4628      	mov	r0, r5
 8007d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d22:	3301      	adds	r3, #1
 8007d24:	e7c1      	b.n	8007caa <__lshift+0x4a>
 8007d26:	3904      	subs	r1, #4
 8007d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d30:	4298      	cmp	r0, r3
 8007d32:	d8f9      	bhi.n	8007d28 <__lshift+0xc8>
 8007d34:	e7ea      	b.n	8007d0c <__lshift+0xac>
 8007d36:	bf00      	nop
 8007d38:	08009d7f 	.word	0x08009d7f
 8007d3c:	08009d90 	.word	0x08009d90

08007d40 <__mcmp>:
 8007d40:	b530      	push	{r4, r5, lr}
 8007d42:	6902      	ldr	r2, [r0, #16]
 8007d44:	690c      	ldr	r4, [r1, #16]
 8007d46:	1b12      	subs	r2, r2, r4
 8007d48:	d10e      	bne.n	8007d68 <__mcmp+0x28>
 8007d4a:	f100 0314 	add.w	r3, r0, #20
 8007d4e:	3114      	adds	r1, #20
 8007d50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007d54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007d58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007d5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007d60:	42a5      	cmp	r5, r4
 8007d62:	d003      	beq.n	8007d6c <__mcmp+0x2c>
 8007d64:	d305      	bcc.n	8007d72 <__mcmp+0x32>
 8007d66:	2201      	movs	r2, #1
 8007d68:	4610      	mov	r0, r2
 8007d6a:	bd30      	pop	{r4, r5, pc}
 8007d6c:	4283      	cmp	r3, r0
 8007d6e:	d3f3      	bcc.n	8007d58 <__mcmp+0x18>
 8007d70:	e7fa      	b.n	8007d68 <__mcmp+0x28>
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	e7f7      	b.n	8007d68 <__mcmp+0x28>

08007d78 <__mdiff>:
 8007d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	4611      	mov	r1, r2
 8007d82:	4620      	mov	r0, r4
 8007d84:	4690      	mov	r8, r2
 8007d86:	f7ff ffdb 	bl	8007d40 <__mcmp>
 8007d8a:	1e05      	subs	r5, r0, #0
 8007d8c:	d110      	bne.n	8007db0 <__mdiff+0x38>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	f7ff fd53 	bl	800783c <_Balloc>
 8007d96:	b930      	cbnz	r0, 8007da6 <__mdiff+0x2e>
 8007d98:	4b3a      	ldr	r3, [pc, #232]	; (8007e84 <__mdiff+0x10c>)
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	f240 2132 	movw	r1, #562	; 0x232
 8007da0:	4839      	ldr	r0, [pc, #228]	; (8007e88 <__mdiff+0x110>)
 8007da2:	f000 fb31 	bl	8008408 <__assert_func>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db0:	bfa4      	itt	ge
 8007db2:	4643      	movge	r3, r8
 8007db4:	46a0      	movge	r8, r4
 8007db6:	4630      	mov	r0, r6
 8007db8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007dbc:	bfa6      	itte	ge
 8007dbe:	461c      	movge	r4, r3
 8007dc0:	2500      	movge	r5, #0
 8007dc2:	2501      	movlt	r5, #1
 8007dc4:	f7ff fd3a 	bl	800783c <_Balloc>
 8007dc8:	b920      	cbnz	r0, 8007dd4 <__mdiff+0x5c>
 8007dca:	4b2e      	ldr	r3, [pc, #184]	; (8007e84 <__mdiff+0x10c>)
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007dd2:	e7e5      	b.n	8007da0 <__mdiff+0x28>
 8007dd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007dd8:	6926      	ldr	r6, [r4, #16]
 8007dda:	60c5      	str	r5, [r0, #12]
 8007ddc:	f104 0914 	add.w	r9, r4, #20
 8007de0:	f108 0514 	add.w	r5, r8, #20
 8007de4:	f100 0e14 	add.w	lr, r0, #20
 8007de8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007dec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007df0:	f108 0210 	add.w	r2, r8, #16
 8007df4:	46f2      	mov	sl, lr
 8007df6:	2100      	movs	r1, #0
 8007df8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dfc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007e00:	fa1f f883 	uxth.w	r8, r3
 8007e04:	fa11 f18b 	uxtah	r1, r1, fp
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	eba1 0808 	sub.w	r8, r1, r8
 8007e0e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e12:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007e16:	fa1f f888 	uxth.w	r8, r8
 8007e1a:	1419      	asrs	r1, r3, #16
 8007e1c:	454e      	cmp	r6, r9
 8007e1e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007e22:	f84a 3b04 	str.w	r3, [sl], #4
 8007e26:	d8e7      	bhi.n	8007df8 <__mdiff+0x80>
 8007e28:	1b33      	subs	r3, r6, r4
 8007e2a:	3b15      	subs	r3, #21
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	3304      	adds	r3, #4
 8007e32:	3415      	adds	r4, #21
 8007e34:	42a6      	cmp	r6, r4
 8007e36:	bf38      	it	cc
 8007e38:	2304      	movcc	r3, #4
 8007e3a:	441d      	add	r5, r3
 8007e3c:	4473      	add	r3, lr
 8007e3e:	469e      	mov	lr, r3
 8007e40:	462e      	mov	r6, r5
 8007e42:	4566      	cmp	r6, ip
 8007e44:	d30e      	bcc.n	8007e64 <__mdiff+0xec>
 8007e46:	f10c 0203 	add.w	r2, ip, #3
 8007e4a:	1b52      	subs	r2, r2, r5
 8007e4c:	f022 0203 	bic.w	r2, r2, #3
 8007e50:	3d03      	subs	r5, #3
 8007e52:	45ac      	cmp	ip, r5
 8007e54:	bf38      	it	cc
 8007e56:	2200      	movcc	r2, #0
 8007e58:	441a      	add	r2, r3
 8007e5a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007e5e:	b17b      	cbz	r3, 8007e80 <__mdiff+0x108>
 8007e60:	6107      	str	r7, [r0, #16]
 8007e62:	e7a3      	b.n	8007dac <__mdiff+0x34>
 8007e64:	f856 8b04 	ldr.w	r8, [r6], #4
 8007e68:	fa11 f288 	uxtah	r2, r1, r8
 8007e6c:	1414      	asrs	r4, r2, #16
 8007e6e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e72:	b292      	uxth	r2, r2
 8007e74:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007e78:	f84e 2b04 	str.w	r2, [lr], #4
 8007e7c:	1421      	asrs	r1, r4, #16
 8007e7e:	e7e0      	b.n	8007e42 <__mdiff+0xca>
 8007e80:	3f01      	subs	r7, #1
 8007e82:	e7ea      	b.n	8007e5a <__mdiff+0xe2>
 8007e84:	08009d7f 	.word	0x08009d7f
 8007e88:	08009d90 	.word	0x08009d90

08007e8c <__d2b>:
 8007e8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e90:	4689      	mov	r9, r1
 8007e92:	2101      	movs	r1, #1
 8007e94:	ec57 6b10 	vmov	r6, r7, d0
 8007e98:	4690      	mov	r8, r2
 8007e9a:	f7ff fccf 	bl	800783c <_Balloc>
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b930      	cbnz	r0, 8007eb0 <__d2b+0x24>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <__d2b+0xb0>)
 8007ea6:	4826      	ldr	r0, [pc, #152]	; (8007f40 <__d2b+0xb4>)
 8007ea8:	f240 310a 	movw	r1, #778	; 0x30a
 8007eac:	f000 faac 	bl	8008408 <__assert_func>
 8007eb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007eb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eb8:	bb35      	cbnz	r5, 8007f08 <__d2b+0x7c>
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	d028      	beq.n	8007f12 <__d2b+0x86>
 8007ec0:	4668      	mov	r0, sp
 8007ec2:	9600      	str	r6, [sp, #0]
 8007ec4:	f7ff fd82 	bl	80079cc <__lo0bits>
 8007ec8:	9900      	ldr	r1, [sp, #0]
 8007eca:	b300      	cbz	r0, 8007f0e <__d2b+0x82>
 8007ecc:	9a01      	ldr	r2, [sp, #4]
 8007ece:	f1c0 0320 	rsb	r3, r0, #32
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	40c2      	lsrs	r2, r0
 8007eda:	6163      	str	r3, [r4, #20]
 8007edc:	9201      	str	r2, [sp, #4]
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	61a3      	str	r3, [r4, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf14      	ite	ne
 8007ee6:	2202      	movne	r2, #2
 8007ee8:	2201      	moveq	r2, #1
 8007eea:	6122      	str	r2, [r4, #16]
 8007eec:	b1d5      	cbz	r5, 8007f24 <__d2b+0x98>
 8007eee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ef2:	4405      	add	r5, r0
 8007ef4:	f8c9 5000 	str.w	r5, [r9]
 8007ef8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007efc:	f8c8 0000 	str.w	r0, [r8]
 8007f00:	4620      	mov	r0, r4
 8007f02:	b003      	add	sp, #12
 8007f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f0c:	e7d5      	b.n	8007eba <__d2b+0x2e>
 8007f0e:	6161      	str	r1, [r4, #20]
 8007f10:	e7e5      	b.n	8007ede <__d2b+0x52>
 8007f12:	a801      	add	r0, sp, #4
 8007f14:	f7ff fd5a 	bl	80079cc <__lo0bits>
 8007f18:	9b01      	ldr	r3, [sp, #4]
 8007f1a:	6163      	str	r3, [r4, #20]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	6122      	str	r2, [r4, #16]
 8007f20:	3020      	adds	r0, #32
 8007f22:	e7e3      	b.n	8007eec <__d2b+0x60>
 8007f24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f2c:	f8c9 0000 	str.w	r0, [r9]
 8007f30:	6918      	ldr	r0, [r3, #16]
 8007f32:	f7ff fd2b 	bl	800798c <__hi0bits>
 8007f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f3a:	e7df      	b.n	8007efc <__d2b+0x70>
 8007f3c:	08009d7f 	.word	0x08009d7f
 8007f40:	08009d90 	.word	0x08009d90

08007f44 <_calloc_r>:
 8007f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f46:	fba1 2402 	umull	r2, r4, r1, r2
 8007f4a:	b94c      	cbnz	r4, 8007f60 <_calloc_r+0x1c>
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	9201      	str	r2, [sp, #4]
 8007f50:	f000 f87a 	bl	8008048 <_malloc_r>
 8007f54:	9a01      	ldr	r2, [sp, #4]
 8007f56:	4605      	mov	r5, r0
 8007f58:	b930      	cbnz	r0, 8007f68 <_calloc_r+0x24>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	b003      	add	sp, #12
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	220c      	movs	r2, #12
 8007f62:	6002      	str	r2, [r0, #0]
 8007f64:	2500      	movs	r5, #0
 8007f66:	e7f8      	b.n	8007f5a <_calloc_r+0x16>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	f7fe f923 	bl	80061b4 <memset>
 8007f6e:	e7f4      	b.n	8007f5a <_calloc_r+0x16>

08007f70 <_free_r>:
 8007f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f72:	2900      	cmp	r1, #0
 8007f74:	d044      	beq.n	8008000 <_free_r+0x90>
 8007f76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7a:	9001      	str	r0, [sp, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f82:	bfb8      	it	lt
 8007f84:	18e4      	addlt	r4, r4, r3
 8007f86:	f000 fa9b 	bl	80084c0 <__malloc_lock>
 8007f8a:	4a1e      	ldr	r2, [pc, #120]	; (8008004 <_free_r+0x94>)
 8007f8c:	9801      	ldr	r0, [sp, #4]
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	b933      	cbnz	r3, 8007fa0 <_free_r+0x30>
 8007f92:	6063      	str	r3, [r4, #4]
 8007f94:	6014      	str	r4, [r2, #0]
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f9c:	f000 ba96 	b.w	80084cc <__malloc_unlock>
 8007fa0:	42a3      	cmp	r3, r4
 8007fa2:	d908      	bls.n	8007fb6 <_free_r+0x46>
 8007fa4:	6825      	ldr	r5, [r4, #0]
 8007fa6:	1961      	adds	r1, r4, r5
 8007fa8:	428b      	cmp	r3, r1
 8007faa:	bf01      	itttt	eq
 8007fac:	6819      	ldreq	r1, [r3, #0]
 8007fae:	685b      	ldreq	r3, [r3, #4]
 8007fb0:	1949      	addeq	r1, r1, r5
 8007fb2:	6021      	streq	r1, [r4, #0]
 8007fb4:	e7ed      	b.n	8007f92 <_free_r+0x22>
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	b10b      	cbz	r3, 8007fc0 <_free_r+0x50>
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	d9fa      	bls.n	8007fb6 <_free_r+0x46>
 8007fc0:	6811      	ldr	r1, [r2, #0]
 8007fc2:	1855      	adds	r5, r2, r1
 8007fc4:	42a5      	cmp	r5, r4
 8007fc6:	d10b      	bne.n	8007fe0 <_free_r+0x70>
 8007fc8:	6824      	ldr	r4, [r4, #0]
 8007fca:	4421      	add	r1, r4
 8007fcc:	1854      	adds	r4, r2, r1
 8007fce:	42a3      	cmp	r3, r4
 8007fd0:	6011      	str	r1, [r2, #0]
 8007fd2:	d1e0      	bne.n	8007f96 <_free_r+0x26>
 8007fd4:	681c      	ldr	r4, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	6053      	str	r3, [r2, #4]
 8007fda:	4421      	add	r1, r4
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	e7da      	b.n	8007f96 <_free_r+0x26>
 8007fe0:	d902      	bls.n	8007fe8 <_free_r+0x78>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	e7d6      	b.n	8007f96 <_free_r+0x26>
 8007fe8:	6825      	ldr	r5, [r4, #0]
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	428b      	cmp	r3, r1
 8007fee:	bf04      	itt	eq
 8007ff0:	6819      	ldreq	r1, [r3, #0]
 8007ff2:	685b      	ldreq	r3, [r3, #4]
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	bf04      	itt	eq
 8007ff8:	1949      	addeq	r1, r1, r5
 8007ffa:	6021      	streq	r1, [r4, #0]
 8007ffc:	6054      	str	r4, [r2, #4]
 8007ffe:	e7ca      	b.n	8007f96 <_free_r+0x26>
 8008000:	b003      	add	sp, #12
 8008002:	bd30      	pop	{r4, r5, pc}
 8008004:	2000039c 	.word	0x2000039c

08008008 <sbrk_aligned>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4e0e      	ldr	r6, [pc, #56]	; (8008044 <sbrk_aligned+0x3c>)
 800800c:	460c      	mov	r4, r1
 800800e:	6831      	ldr	r1, [r6, #0]
 8008010:	4605      	mov	r5, r0
 8008012:	b911      	cbnz	r1, 800801a <sbrk_aligned+0x12>
 8008014:	f000 f9e8 	bl	80083e8 <_sbrk_r>
 8008018:	6030      	str	r0, [r6, #0]
 800801a:	4621      	mov	r1, r4
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f9e3 	bl	80083e8 <_sbrk_r>
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	d00a      	beq.n	800803c <sbrk_aligned+0x34>
 8008026:	1cc4      	adds	r4, r0, #3
 8008028:	f024 0403 	bic.w	r4, r4, #3
 800802c:	42a0      	cmp	r0, r4
 800802e:	d007      	beq.n	8008040 <sbrk_aligned+0x38>
 8008030:	1a21      	subs	r1, r4, r0
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f9d8 	bl	80083e8 <_sbrk_r>
 8008038:	3001      	adds	r0, #1
 800803a:	d101      	bne.n	8008040 <sbrk_aligned+0x38>
 800803c:	f04f 34ff 	mov.w	r4, #4294967295
 8008040:	4620      	mov	r0, r4
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	200003a0 	.word	0x200003a0

08008048 <_malloc_r>:
 8008048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804c:	1ccd      	adds	r5, r1, #3
 800804e:	f025 0503 	bic.w	r5, r5, #3
 8008052:	3508      	adds	r5, #8
 8008054:	2d0c      	cmp	r5, #12
 8008056:	bf38      	it	cc
 8008058:	250c      	movcc	r5, #12
 800805a:	2d00      	cmp	r5, #0
 800805c:	4607      	mov	r7, r0
 800805e:	db01      	blt.n	8008064 <_malloc_r+0x1c>
 8008060:	42a9      	cmp	r1, r5
 8008062:	d905      	bls.n	8008070 <_malloc_r+0x28>
 8008064:	230c      	movs	r3, #12
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	2600      	movs	r6, #0
 800806a:	4630      	mov	r0, r6
 800806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008070:	4e2e      	ldr	r6, [pc, #184]	; (800812c <_malloc_r+0xe4>)
 8008072:	f000 fa25 	bl	80084c0 <__malloc_lock>
 8008076:	6833      	ldr	r3, [r6, #0]
 8008078:	461c      	mov	r4, r3
 800807a:	bb34      	cbnz	r4, 80080ca <_malloc_r+0x82>
 800807c:	4629      	mov	r1, r5
 800807e:	4638      	mov	r0, r7
 8008080:	f7ff ffc2 	bl	8008008 <sbrk_aligned>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	4604      	mov	r4, r0
 8008088:	d14d      	bne.n	8008126 <_malloc_r+0xde>
 800808a:	6834      	ldr	r4, [r6, #0]
 800808c:	4626      	mov	r6, r4
 800808e:	2e00      	cmp	r6, #0
 8008090:	d140      	bne.n	8008114 <_malloc_r+0xcc>
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	4631      	mov	r1, r6
 8008096:	4638      	mov	r0, r7
 8008098:	eb04 0803 	add.w	r8, r4, r3
 800809c:	f000 f9a4 	bl	80083e8 <_sbrk_r>
 80080a0:	4580      	cmp	r8, r0
 80080a2:	d13a      	bne.n	800811a <_malloc_r+0xd2>
 80080a4:	6821      	ldr	r1, [r4, #0]
 80080a6:	3503      	adds	r5, #3
 80080a8:	1a6d      	subs	r5, r5, r1
 80080aa:	f025 0503 	bic.w	r5, r5, #3
 80080ae:	3508      	adds	r5, #8
 80080b0:	2d0c      	cmp	r5, #12
 80080b2:	bf38      	it	cc
 80080b4:	250c      	movcc	r5, #12
 80080b6:	4629      	mov	r1, r5
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff ffa5 	bl	8008008 <sbrk_aligned>
 80080be:	3001      	adds	r0, #1
 80080c0:	d02b      	beq.n	800811a <_malloc_r+0xd2>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	442b      	add	r3, r5
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	e00e      	b.n	80080e8 <_malloc_r+0xa0>
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	1b52      	subs	r2, r2, r5
 80080ce:	d41e      	bmi.n	800810e <_malloc_r+0xc6>
 80080d0:	2a0b      	cmp	r2, #11
 80080d2:	d916      	bls.n	8008102 <_malloc_r+0xba>
 80080d4:	1961      	adds	r1, r4, r5
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	6025      	str	r5, [r4, #0]
 80080da:	bf18      	it	ne
 80080dc:	6059      	strne	r1, [r3, #4]
 80080de:	6863      	ldr	r3, [r4, #4]
 80080e0:	bf08      	it	eq
 80080e2:	6031      	streq	r1, [r6, #0]
 80080e4:	5162      	str	r2, [r4, r5]
 80080e6:	604b      	str	r3, [r1, #4]
 80080e8:	4638      	mov	r0, r7
 80080ea:	f104 060b 	add.w	r6, r4, #11
 80080ee:	f000 f9ed 	bl	80084cc <__malloc_unlock>
 80080f2:	f026 0607 	bic.w	r6, r6, #7
 80080f6:	1d23      	adds	r3, r4, #4
 80080f8:	1af2      	subs	r2, r6, r3
 80080fa:	d0b6      	beq.n	800806a <_malloc_r+0x22>
 80080fc:	1b9b      	subs	r3, r3, r6
 80080fe:	50a3      	str	r3, [r4, r2]
 8008100:	e7b3      	b.n	800806a <_malloc_r+0x22>
 8008102:	6862      	ldr	r2, [r4, #4]
 8008104:	42a3      	cmp	r3, r4
 8008106:	bf0c      	ite	eq
 8008108:	6032      	streq	r2, [r6, #0]
 800810a:	605a      	strne	r2, [r3, #4]
 800810c:	e7ec      	b.n	80080e8 <_malloc_r+0xa0>
 800810e:	4623      	mov	r3, r4
 8008110:	6864      	ldr	r4, [r4, #4]
 8008112:	e7b2      	b.n	800807a <_malloc_r+0x32>
 8008114:	4634      	mov	r4, r6
 8008116:	6876      	ldr	r6, [r6, #4]
 8008118:	e7b9      	b.n	800808e <_malloc_r+0x46>
 800811a:	230c      	movs	r3, #12
 800811c:	603b      	str	r3, [r7, #0]
 800811e:	4638      	mov	r0, r7
 8008120:	f000 f9d4 	bl	80084cc <__malloc_unlock>
 8008124:	e7a1      	b.n	800806a <_malloc_r+0x22>
 8008126:	6025      	str	r5, [r4, #0]
 8008128:	e7de      	b.n	80080e8 <_malloc_r+0xa0>
 800812a:	bf00      	nop
 800812c:	2000039c 	.word	0x2000039c

08008130 <__ssputs_r>:
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	688e      	ldr	r6, [r1, #8]
 8008136:	429e      	cmp	r6, r3
 8008138:	4682      	mov	sl, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4690      	mov	r8, r2
 800813e:	461f      	mov	r7, r3
 8008140:	d838      	bhi.n	80081b4 <__ssputs_r+0x84>
 8008142:	898a      	ldrh	r2, [r1, #12]
 8008144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008148:	d032      	beq.n	80081b0 <__ssputs_r+0x80>
 800814a:	6825      	ldr	r5, [r4, #0]
 800814c:	6909      	ldr	r1, [r1, #16]
 800814e:	eba5 0901 	sub.w	r9, r5, r1
 8008152:	6965      	ldr	r5, [r4, #20]
 8008154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800815c:	3301      	adds	r3, #1
 800815e:	444b      	add	r3, r9
 8008160:	106d      	asrs	r5, r5, #1
 8008162:	429d      	cmp	r5, r3
 8008164:	bf38      	it	cc
 8008166:	461d      	movcc	r5, r3
 8008168:	0553      	lsls	r3, r2, #21
 800816a:	d531      	bpl.n	80081d0 <__ssputs_r+0xa0>
 800816c:	4629      	mov	r1, r5
 800816e:	f7ff ff6b 	bl	8008048 <_malloc_r>
 8008172:	4606      	mov	r6, r0
 8008174:	b950      	cbnz	r0, 800818c <__ssputs_r+0x5c>
 8008176:	230c      	movs	r3, #12
 8008178:	f8ca 3000 	str.w	r3, [sl]
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008182:	81a3      	strh	r3, [r4, #12]
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	6921      	ldr	r1, [r4, #16]
 800818e:	464a      	mov	r2, r9
 8008190:	f7fe f802 	bl	8006198 <memcpy>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800819a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	6126      	str	r6, [r4, #16]
 80081a2:	6165      	str	r5, [r4, #20]
 80081a4:	444e      	add	r6, r9
 80081a6:	eba5 0509 	sub.w	r5, r5, r9
 80081aa:	6026      	str	r6, [r4, #0]
 80081ac:	60a5      	str	r5, [r4, #8]
 80081ae:	463e      	mov	r6, r7
 80081b0:	42be      	cmp	r6, r7
 80081b2:	d900      	bls.n	80081b6 <__ssputs_r+0x86>
 80081b4:	463e      	mov	r6, r7
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	4632      	mov	r2, r6
 80081ba:	4641      	mov	r1, r8
 80081bc:	f000 f966 	bl	800848c <memmove>
 80081c0:	68a3      	ldr	r3, [r4, #8]
 80081c2:	1b9b      	subs	r3, r3, r6
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	4433      	add	r3, r6
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	2000      	movs	r0, #0
 80081ce:	e7db      	b.n	8008188 <__ssputs_r+0x58>
 80081d0:	462a      	mov	r2, r5
 80081d2:	f000 f981 	bl	80084d8 <_realloc_r>
 80081d6:	4606      	mov	r6, r0
 80081d8:	2800      	cmp	r0, #0
 80081da:	d1e1      	bne.n	80081a0 <__ssputs_r+0x70>
 80081dc:	6921      	ldr	r1, [r4, #16]
 80081de:	4650      	mov	r0, sl
 80081e0:	f7ff fec6 	bl	8007f70 <_free_r>
 80081e4:	e7c7      	b.n	8008176 <__ssputs_r+0x46>
	...

080081e8 <_svfiprintf_r>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	4698      	mov	r8, r3
 80081ee:	898b      	ldrh	r3, [r1, #12]
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	b09d      	sub	sp, #116	; 0x74
 80081f4:	4607      	mov	r7, r0
 80081f6:	460d      	mov	r5, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	d50e      	bpl.n	800821a <_svfiprintf_r+0x32>
 80081fc:	690b      	ldr	r3, [r1, #16]
 80081fe:	b963      	cbnz	r3, 800821a <_svfiprintf_r+0x32>
 8008200:	2140      	movs	r1, #64	; 0x40
 8008202:	f7ff ff21 	bl	8008048 <_malloc_r>
 8008206:	6028      	str	r0, [r5, #0]
 8008208:	6128      	str	r0, [r5, #16]
 800820a:	b920      	cbnz	r0, 8008216 <_svfiprintf_r+0x2e>
 800820c:	230c      	movs	r3, #12
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	e0d1      	b.n	80083ba <_svfiprintf_r+0x1d2>
 8008216:	2340      	movs	r3, #64	; 0x40
 8008218:	616b      	str	r3, [r5, #20]
 800821a:	2300      	movs	r3, #0
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	2320      	movs	r3, #32
 8008220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008224:	f8cd 800c 	str.w	r8, [sp, #12]
 8008228:	2330      	movs	r3, #48	; 0x30
 800822a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80083d4 <_svfiprintf_r+0x1ec>
 800822e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008232:	f04f 0901 	mov.w	r9, #1
 8008236:	4623      	mov	r3, r4
 8008238:	469a      	mov	sl, r3
 800823a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823e:	b10a      	cbz	r2, 8008244 <_svfiprintf_r+0x5c>
 8008240:	2a25      	cmp	r2, #37	; 0x25
 8008242:	d1f9      	bne.n	8008238 <_svfiprintf_r+0x50>
 8008244:	ebba 0b04 	subs.w	fp, sl, r4
 8008248:	d00b      	beq.n	8008262 <_svfiprintf_r+0x7a>
 800824a:	465b      	mov	r3, fp
 800824c:	4622      	mov	r2, r4
 800824e:	4629      	mov	r1, r5
 8008250:	4638      	mov	r0, r7
 8008252:	f7ff ff6d 	bl	8008130 <__ssputs_r>
 8008256:	3001      	adds	r0, #1
 8008258:	f000 80aa 	beq.w	80083b0 <_svfiprintf_r+0x1c8>
 800825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825e:	445a      	add	r2, fp
 8008260:	9209      	str	r2, [sp, #36]	; 0x24
 8008262:	f89a 3000 	ldrb.w	r3, [sl]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80a2 	beq.w	80083b0 <_svfiprintf_r+0x1c8>
 800826c:	2300      	movs	r3, #0
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008276:	f10a 0a01 	add.w	sl, sl, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008282:	931a      	str	r3, [sp, #104]	; 0x68
 8008284:	4654      	mov	r4, sl
 8008286:	2205      	movs	r2, #5
 8008288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828c:	4851      	ldr	r0, [pc, #324]	; (80083d4 <_svfiprintf_r+0x1ec>)
 800828e:	f7f7 ffa7 	bl	80001e0 <memchr>
 8008292:	9a04      	ldr	r2, [sp, #16]
 8008294:	b9d8      	cbnz	r0, 80082ce <_svfiprintf_r+0xe6>
 8008296:	06d0      	lsls	r0, r2, #27
 8008298:	bf44      	itt	mi
 800829a:	2320      	movmi	r3, #32
 800829c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a0:	0711      	lsls	r1, r2, #28
 80082a2:	bf44      	itt	mi
 80082a4:	232b      	movmi	r3, #43	; 0x2b
 80082a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082aa:	f89a 3000 	ldrb.w	r3, [sl]
 80082ae:	2b2a      	cmp	r3, #42	; 0x2a
 80082b0:	d015      	beq.n	80082de <_svfiprintf_r+0xf6>
 80082b2:	9a07      	ldr	r2, [sp, #28]
 80082b4:	4654      	mov	r4, sl
 80082b6:	2000      	movs	r0, #0
 80082b8:	f04f 0c0a 	mov.w	ip, #10
 80082bc:	4621      	mov	r1, r4
 80082be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c2:	3b30      	subs	r3, #48	; 0x30
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d94e      	bls.n	8008366 <_svfiprintf_r+0x17e>
 80082c8:	b1b0      	cbz	r0, 80082f8 <_svfiprintf_r+0x110>
 80082ca:	9207      	str	r2, [sp, #28]
 80082cc:	e014      	b.n	80082f8 <_svfiprintf_r+0x110>
 80082ce:	eba0 0308 	sub.w	r3, r0, r8
 80082d2:	fa09 f303 	lsl.w	r3, r9, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	46a2      	mov	sl, r4
 80082dc:	e7d2      	b.n	8008284 <_svfiprintf_r+0x9c>
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	1d19      	adds	r1, r3, #4
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	9103      	str	r1, [sp, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	bfbb      	ittet	lt
 80082ea:	425b      	neglt	r3, r3
 80082ec:	f042 0202 	orrlt.w	r2, r2, #2
 80082f0:	9307      	strge	r3, [sp, #28]
 80082f2:	9307      	strlt	r3, [sp, #28]
 80082f4:	bfb8      	it	lt
 80082f6:	9204      	strlt	r2, [sp, #16]
 80082f8:	7823      	ldrb	r3, [r4, #0]
 80082fa:	2b2e      	cmp	r3, #46	; 0x2e
 80082fc:	d10c      	bne.n	8008318 <_svfiprintf_r+0x130>
 80082fe:	7863      	ldrb	r3, [r4, #1]
 8008300:	2b2a      	cmp	r3, #42	; 0x2a
 8008302:	d135      	bne.n	8008370 <_svfiprintf_r+0x188>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1d1a      	adds	r2, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	9203      	str	r2, [sp, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfb8      	it	lt
 8008310:	f04f 33ff 	movlt.w	r3, #4294967295
 8008314:	3402      	adds	r4, #2
 8008316:	9305      	str	r3, [sp, #20]
 8008318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80083e4 <_svfiprintf_r+0x1fc>
 800831c:	7821      	ldrb	r1, [r4, #0]
 800831e:	2203      	movs	r2, #3
 8008320:	4650      	mov	r0, sl
 8008322:	f7f7 ff5d 	bl	80001e0 <memchr>
 8008326:	b140      	cbz	r0, 800833a <_svfiprintf_r+0x152>
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	eba0 000a 	sub.w	r0, r0, sl
 800832e:	fa03 f000 	lsl.w	r0, r3, r0
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	4303      	orrs	r3, r0
 8008336:	3401      	adds	r4, #1
 8008338:	9304      	str	r3, [sp, #16]
 800833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833e:	4826      	ldr	r0, [pc, #152]	; (80083d8 <_svfiprintf_r+0x1f0>)
 8008340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008344:	2206      	movs	r2, #6
 8008346:	f7f7 ff4b 	bl	80001e0 <memchr>
 800834a:	2800      	cmp	r0, #0
 800834c:	d038      	beq.n	80083c0 <_svfiprintf_r+0x1d8>
 800834e:	4b23      	ldr	r3, [pc, #140]	; (80083dc <_svfiprintf_r+0x1f4>)
 8008350:	bb1b      	cbnz	r3, 800839a <_svfiprintf_r+0x1b2>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	3307      	adds	r3, #7
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	3308      	adds	r3, #8
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	4433      	add	r3, r6
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	e767      	b.n	8008236 <_svfiprintf_r+0x4e>
 8008366:	fb0c 3202 	mla	r2, ip, r2, r3
 800836a:	460c      	mov	r4, r1
 800836c:	2001      	movs	r0, #1
 800836e:	e7a5      	b.n	80082bc <_svfiprintf_r+0xd4>
 8008370:	2300      	movs	r3, #0
 8008372:	3401      	adds	r4, #1
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	4619      	mov	r1, r3
 8008378:	f04f 0c0a 	mov.w	ip, #10
 800837c:	4620      	mov	r0, r4
 800837e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008382:	3a30      	subs	r2, #48	; 0x30
 8008384:	2a09      	cmp	r2, #9
 8008386:	d903      	bls.n	8008390 <_svfiprintf_r+0x1a8>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0c5      	beq.n	8008318 <_svfiprintf_r+0x130>
 800838c:	9105      	str	r1, [sp, #20]
 800838e:	e7c3      	b.n	8008318 <_svfiprintf_r+0x130>
 8008390:	fb0c 2101 	mla	r1, ip, r1, r2
 8008394:	4604      	mov	r4, r0
 8008396:	2301      	movs	r3, #1
 8008398:	e7f0      	b.n	800837c <_svfiprintf_r+0x194>
 800839a:	ab03      	add	r3, sp, #12
 800839c:	9300      	str	r3, [sp, #0]
 800839e:	462a      	mov	r2, r5
 80083a0:	4b0f      	ldr	r3, [pc, #60]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083a2:	a904      	add	r1, sp, #16
 80083a4:	4638      	mov	r0, r7
 80083a6:	f7fd ffad 	bl	8006304 <_printf_float>
 80083aa:	1c42      	adds	r2, r0, #1
 80083ac:	4606      	mov	r6, r0
 80083ae:	d1d6      	bne.n	800835e <_svfiprintf_r+0x176>
 80083b0:	89ab      	ldrh	r3, [r5, #12]
 80083b2:	065b      	lsls	r3, r3, #25
 80083b4:	f53f af2c 	bmi.w	8008210 <_svfiprintf_r+0x28>
 80083b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ba:	b01d      	add	sp, #116	; 0x74
 80083bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c0:	ab03      	add	r3, sp, #12
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	462a      	mov	r2, r5
 80083c6:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <_svfiprintf_r+0x1f8>)
 80083c8:	a904      	add	r1, sp, #16
 80083ca:	4638      	mov	r0, r7
 80083cc:	f7fe fa3e 	bl	800684c <_printf_i>
 80083d0:	e7eb      	b.n	80083aa <_svfiprintf_r+0x1c2>
 80083d2:	bf00      	nop
 80083d4:	08009eec 	.word	0x08009eec
 80083d8:	08009ef6 	.word	0x08009ef6
 80083dc:	08006305 	.word	0x08006305
 80083e0:	08008131 	.word	0x08008131
 80083e4:	08009ef2 	.word	0x08009ef2

080083e8 <_sbrk_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	4d06      	ldr	r5, [pc, #24]	; (8008404 <_sbrk_r+0x1c>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7fa fdc8 	bl	8002f88 <_sbrk>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_sbrk_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_sbrk_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	200003a4 	.word	0x200003a4

08008408 <__assert_func>:
 8008408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800840a:	4614      	mov	r4, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4b09      	ldr	r3, [pc, #36]	; (8008434 <__assert_func+0x2c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4605      	mov	r5, r0
 8008414:	68d8      	ldr	r0, [r3, #12]
 8008416:	b14c      	cbz	r4, 800842c <__assert_func+0x24>
 8008418:	4b07      	ldr	r3, [pc, #28]	; (8008438 <__assert_func+0x30>)
 800841a:	9100      	str	r1, [sp, #0]
 800841c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008420:	4906      	ldr	r1, [pc, #24]	; (800843c <__assert_func+0x34>)
 8008422:	462b      	mov	r3, r5
 8008424:	f000 f80e 	bl	8008444 <fiprintf>
 8008428:	f000 faac 	bl	8008984 <abort>
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <__assert_func+0x38>)
 800842e:	461c      	mov	r4, r3
 8008430:	e7f3      	b.n	800841a <__assert_func+0x12>
 8008432:	bf00      	nop
 8008434:	20000010 	.word	0x20000010
 8008438:	08009efd 	.word	0x08009efd
 800843c:	08009f0a 	.word	0x08009f0a
 8008440:	08009f38 	.word	0x08009f38

08008444 <fiprintf>:
 8008444:	b40e      	push	{r1, r2, r3}
 8008446:	b503      	push	{r0, r1, lr}
 8008448:	4601      	mov	r1, r0
 800844a:	ab03      	add	r3, sp, #12
 800844c:	4805      	ldr	r0, [pc, #20]	; (8008464 <fiprintf+0x20>)
 800844e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008452:	6800      	ldr	r0, [r0, #0]
 8008454:	9301      	str	r3, [sp, #4]
 8008456:	f000 f897 	bl	8008588 <_vfiprintf_r>
 800845a:	b002      	add	sp, #8
 800845c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008460:	b003      	add	sp, #12
 8008462:	4770      	bx	lr
 8008464:	20000010 	.word	0x20000010

08008468 <__ascii_mbtowc>:
 8008468:	b082      	sub	sp, #8
 800846a:	b901      	cbnz	r1, 800846e <__ascii_mbtowc+0x6>
 800846c:	a901      	add	r1, sp, #4
 800846e:	b142      	cbz	r2, 8008482 <__ascii_mbtowc+0x1a>
 8008470:	b14b      	cbz	r3, 8008486 <__ascii_mbtowc+0x1e>
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	1e10      	subs	r0, r2, #0
 800847a:	bf18      	it	ne
 800847c:	2001      	movne	r0, #1
 800847e:	b002      	add	sp, #8
 8008480:	4770      	bx	lr
 8008482:	4610      	mov	r0, r2
 8008484:	e7fb      	b.n	800847e <__ascii_mbtowc+0x16>
 8008486:	f06f 0001 	mvn.w	r0, #1
 800848a:	e7f8      	b.n	800847e <__ascii_mbtowc+0x16>

0800848c <memmove>:
 800848c:	4288      	cmp	r0, r1
 800848e:	b510      	push	{r4, lr}
 8008490:	eb01 0402 	add.w	r4, r1, r2
 8008494:	d902      	bls.n	800849c <memmove+0x10>
 8008496:	4284      	cmp	r4, r0
 8008498:	4623      	mov	r3, r4
 800849a:	d807      	bhi.n	80084ac <memmove+0x20>
 800849c:	1e43      	subs	r3, r0, #1
 800849e:	42a1      	cmp	r1, r4
 80084a0:	d008      	beq.n	80084b4 <memmove+0x28>
 80084a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084aa:	e7f8      	b.n	800849e <memmove+0x12>
 80084ac:	4402      	add	r2, r0
 80084ae:	4601      	mov	r1, r0
 80084b0:	428a      	cmp	r2, r1
 80084b2:	d100      	bne.n	80084b6 <memmove+0x2a>
 80084b4:	bd10      	pop	{r4, pc}
 80084b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084be:	e7f7      	b.n	80084b0 <memmove+0x24>

080084c0 <__malloc_lock>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__malloc_lock+0x8>)
 80084c2:	f000 bc1f 	b.w	8008d04 <__retarget_lock_acquire_recursive>
 80084c6:	bf00      	nop
 80084c8:	200003a8 	.word	0x200003a8

080084cc <__malloc_unlock>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__malloc_unlock+0x8>)
 80084ce:	f000 bc1a 	b.w	8008d06 <__retarget_lock_release_recursive>
 80084d2:	bf00      	nop
 80084d4:	200003a8 	.word	0x200003a8

080084d8 <_realloc_r>:
 80084d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084dc:	4680      	mov	r8, r0
 80084de:	4614      	mov	r4, r2
 80084e0:	460e      	mov	r6, r1
 80084e2:	b921      	cbnz	r1, 80084ee <_realloc_r+0x16>
 80084e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	4611      	mov	r1, r2
 80084ea:	f7ff bdad 	b.w	8008048 <_malloc_r>
 80084ee:	b92a      	cbnz	r2, 80084fc <_realloc_r+0x24>
 80084f0:	f7ff fd3e 	bl	8007f70 <_free_r>
 80084f4:	4625      	mov	r5, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084fc:	f000 fc6a 	bl	8008dd4 <_malloc_usable_size_r>
 8008500:	4284      	cmp	r4, r0
 8008502:	4607      	mov	r7, r0
 8008504:	d802      	bhi.n	800850c <_realloc_r+0x34>
 8008506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800850a:	d812      	bhi.n	8008532 <_realloc_r+0x5a>
 800850c:	4621      	mov	r1, r4
 800850e:	4640      	mov	r0, r8
 8008510:	f7ff fd9a 	bl	8008048 <_malloc_r>
 8008514:	4605      	mov	r5, r0
 8008516:	2800      	cmp	r0, #0
 8008518:	d0ed      	beq.n	80084f6 <_realloc_r+0x1e>
 800851a:	42bc      	cmp	r4, r7
 800851c:	4622      	mov	r2, r4
 800851e:	4631      	mov	r1, r6
 8008520:	bf28      	it	cs
 8008522:	463a      	movcs	r2, r7
 8008524:	f7fd fe38 	bl	8006198 <memcpy>
 8008528:	4631      	mov	r1, r6
 800852a:	4640      	mov	r0, r8
 800852c:	f7ff fd20 	bl	8007f70 <_free_r>
 8008530:	e7e1      	b.n	80084f6 <_realloc_r+0x1e>
 8008532:	4635      	mov	r5, r6
 8008534:	e7df      	b.n	80084f6 <_realloc_r+0x1e>

08008536 <__sfputc_r>:
 8008536:	6893      	ldr	r3, [r2, #8]
 8008538:	3b01      	subs	r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	b410      	push	{r4}
 800853e:	6093      	str	r3, [r2, #8]
 8008540:	da08      	bge.n	8008554 <__sfputc_r+0x1e>
 8008542:	6994      	ldr	r4, [r2, #24]
 8008544:	42a3      	cmp	r3, r4
 8008546:	db01      	blt.n	800854c <__sfputc_r+0x16>
 8008548:	290a      	cmp	r1, #10
 800854a:	d103      	bne.n	8008554 <__sfputc_r+0x1e>
 800854c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008550:	f000 b94a 	b.w	80087e8 <__swbuf_r>
 8008554:	6813      	ldr	r3, [r2, #0]
 8008556:	1c58      	adds	r0, r3, #1
 8008558:	6010      	str	r0, [r2, #0]
 800855a:	7019      	strb	r1, [r3, #0]
 800855c:	4608      	mov	r0, r1
 800855e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008562:	4770      	bx	lr

08008564 <__sfputs_r>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	4606      	mov	r6, r0
 8008568:	460f      	mov	r7, r1
 800856a:	4614      	mov	r4, r2
 800856c:	18d5      	adds	r5, r2, r3
 800856e:	42ac      	cmp	r4, r5
 8008570:	d101      	bne.n	8008576 <__sfputs_r+0x12>
 8008572:	2000      	movs	r0, #0
 8008574:	e007      	b.n	8008586 <__sfputs_r+0x22>
 8008576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857a:	463a      	mov	r2, r7
 800857c:	4630      	mov	r0, r6
 800857e:	f7ff ffda 	bl	8008536 <__sfputc_r>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d1f3      	bne.n	800856e <__sfputs_r+0xa>
 8008586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008588 <_vfiprintf_r>:
 8008588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	460d      	mov	r5, r1
 800858e:	b09d      	sub	sp, #116	; 0x74
 8008590:	4614      	mov	r4, r2
 8008592:	4698      	mov	r8, r3
 8008594:	4606      	mov	r6, r0
 8008596:	b118      	cbz	r0, 80085a0 <_vfiprintf_r+0x18>
 8008598:	6983      	ldr	r3, [r0, #24]
 800859a:	b90b      	cbnz	r3, 80085a0 <_vfiprintf_r+0x18>
 800859c:	f000 fb14 	bl	8008bc8 <__sinit>
 80085a0:	4b89      	ldr	r3, [pc, #548]	; (80087c8 <_vfiprintf_r+0x240>)
 80085a2:	429d      	cmp	r5, r3
 80085a4:	d11b      	bne.n	80085de <_vfiprintf_r+0x56>
 80085a6:	6875      	ldr	r5, [r6, #4]
 80085a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_vfiprintf_r+0x32>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	059a      	lsls	r2, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_vfiprintf_r+0x32>
 80085b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085b6:	f000 fba5 	bl	8008d04 <__retarget_lock_acquire_recursive>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	071b      	lsls	r3, r3, #28
 80085be:	d501      	bpl.n	80085c4 <_vfiprintf_r+0x3c>
 80085c0:	692b      	ldr	r3, [r5, #16]
 80085c2:	b9eb      	cbnz	r3, 8008600 <_vfiprintf_r+0x78>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f96e 	bl	80088a8 <__swsetup_r>
 80085cc:	b1c0      	cbz	r0, 8008600 <_vfiprintf_r+0x78>
 80085ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d0:	07dc      	lsls	r4, r3, #31
 80085d2:	d50e      	bpl.n	80085f2 <_vfiprintf_r+0x6a>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b01d      	add	sp, #116	; 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	4b7b      	ldr	r3, [pc, #492]	; (80087cc <_vfiprintf_r+0x244>)
 80085e0:	429d      	cmp	r5, r3
 80085e2:	d101      	bne.n	80085e8 <_vfiprintf_r+0x60>
 80085e4:	68b5      	ldr	r5, [r6, #8]
 80085e6:	e7df      	b.n	80085a8 <_vfiprintf_r+0x20>
 80085e8:	4b79      	ldr	r3, [pc, #484]	; (80087d0 <_vfiprintf_r+0x248>)
 80085ea:	429d      	cmp	r5, r3
 80085ec:	bf08      	it	eq
 80085ee:	68f5      	ldreq	r5, [r6, #12]
 80085f0:	e7da      	b.n	80085a8 <_vfiprintf_r+0x20>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	0598      	lsls	r0, r3, #22
 80085f6:	d4ed      	bmi.n	80085d4 <_vfiprintf_r+0x4c>
 80085f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fa:	f000 fb84 	bl	8008d06 <__retarget_lock_release_recursive>
 80085fe:	e7e9      	b.n	80085d4 <_vfiprintf_r+0x4c>
 8008600:	2300      	movs	r3, #0
 8008602:	9309      	str	r3, [sp, #36]	; 0x24
 8008604:	2320      	movs	r3, #32
 8008606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860a:	f8cd 800c 	str.w	r8, [sp, #12]
 800860e:	2330      	movs	r3, #48	; 0x30
 8008610:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087d4 <_vfiprintf_r+0x24c>
 8008614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008618:	f04f 0901 	mov.w	r9, #1
 800861c:	4623      	mov	r3, r4
 800861e:	469a      	mov	sl, r3
 8008620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008624:	b10a      	cbz	r2, 800862a <_vfiprintf_r+0xa2>
 8008626:	2a25      	cmp	r2, #37	; 0x25
 8008628:	d1f9      	bne.n	800861e <_vfiprintf_r+0x96>
 800862a:	ebba 0b04 	subs.w	fp, sl, r4
 800862e:	d00b      	beq.n	8008648 <_vfiprintf_r+0xc0>
 8008630:	465b      	mov	r3, fp
 8008632:	4622      	mov	r2, r4
 8008634:	4629      	mov	r1, r5
 8008636:	4630      	mov	r0, r6
 8008638:	f7ff ff94 	bl	8008564 <__sfputs_r>
 800863c:	3001      	adds	r0, #1
 800863e:	f000 80aa 	beq.w	8008796 <_vfiprintf_r+0x20e>
 8008642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008644:	445a      	add	r2, fp
 8008646:	9209      	str	r2, [sp, #36]	; 0x24
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80a2 	beq.w	8008796 <_vfiprintf_r+0x20e>
 8008652:	2300      	movs	r3, #0
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800865c:	f10a 0a01 	add.w	sl, sl, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008668:	931a      	str	r3, [sp, #104]	; 0x68
 800866a:	4654      	mov	r4, sl
 800866c:	2205      	movs	r2, #5
 800866e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008672:	4858      	ldr	r0, [pc, #352]	; (80087d4 <_vfiprintf_r+0x24c>)
 8008674:	f7f7 fdb4 	bl	80001e0 <memchr>
 8008678:	9a04      	ldr	r2, [sp, #16]
 800867a:	b9d8      	cbnz	r0, 80086b4 <_vfiprintf_r+0x12c>
 800867c:	06d1      	lsls	r1, r2, #27
 800867e:	bf44      	itt	mi
 8008680:	2320      	movmi	r3, #32
 8008682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008686:	0713      	lsls	r3, r2, #28
 8008688:	bf44      	itt	mi
 800868a:	232b      	movmi	r3, #43	; 0x2b
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008690:	f89a 3000 	ldrb.w	r3, [sl]
 8008694:	2b2a      	cmp	r3, #42	; 0x2a
 8008696:	d015      	beq.n	80086c4 <_vfiprintf_r+0x13c>
 8008698:	9a07      	ldr	r2, [sp, #28]
 800869a:	4654      	mov	r4, sl
 800869c:	2000      	movs	r0, #0
 800869e:	f04f 0c0a 	mov.w	ip, #10
 80086a2:	4621      	mov	r1, r4
 80086a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a8:	3b30      	subs	r3, #48	; 0x30
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d94e      	bls.n	800874c <_vfiprintf_r+0x1c4>
 80086ae:	b1b0      	cbz	r0, 80086de <_vfiprintf_r+0x156>
 80086b0:	9207      	str	r2, [sp, #28]
 80086b2:	e014      	b.n	80086de <_vfiprintf_r+0x156>
 80086b4:	eba0 0308 	sub.w	r3, r0, r8
 80086b8:	fa09 f303 	lsl.w	r3, r9, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	46a2      	mov	sl, r4
 80086c2:	e7d2      	b.n	800866a <_vfiprintf_r+0xe2>
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	1d19      	adds	r1, r3, #4
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	9103      	str	r1, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbb      	ittet	lt
 80086d0:	425b      	neglt	r3, r3
 80086d2:	f042 0202 	orrlt.w	r2, r2, #2
 80086d6:	9307      	strge	r3, [sp, #28]
 80086d8:	9307      	strlt	r3, [sp, #28]
 80086da:	bfb8      	it	lt
 80086dc:	9204      	strlt	r2, [sp, #16]
 80086de:	7823      	ldrb	r3, [r4, #0]
 80086e0:	2b2e      	cmp	r3, #46	; 0x2e
 80086e2:	d10c      	bne.n	80086fe <_vfiprintf_r+0x176>
 80086e4:	7863      	ldrb	r3, [r4, #1]
 80086e6:	2b2a      	cmp	r3, #42	; 0x2a
 80086e8:	d135      	bne.n	8008756 <_vfiprintf_r+0x1ce>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	1d1a      	adds	r2, r3, #4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	9203      	str	r2, [sp, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfb8      	it	lt
 80086f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80086fa:	3402      	adds	r4, #2
 80086fc:	9305      	str	r3, [sp, #20]
 80086fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087e4 <_vfiprintf_r+0x25c>
 8008702:	7821      	ldrb	r1, [r4, #0]
 8008704:	2203      	movs	r2, #3
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd6a 	bl	80001e0 <memchr>
 800870c:	b140      	cbz	r0, 8008720 <_vfiprintf_r+0x198>
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	eba0 000a 	sub.w	r0, r0, sl
 8008714:	fa03 f000 	lsl.w	r0, r3, r0
 8008718:	9b04      	ldr	r3, [sp, #16]
 800871a:	4303      	orrs	r3, r0
 800871c:	3401      	adds	r4, #1
 800871e:	9304      	str	r3, [sp, #16]
 8008720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008724:	482c      	ldr	r0, [pc, #176]	; (80087d8 <_vfiprintf_r+0x250>)
 8008726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800872a:	2206      	movs	r2, #6
 800872c:	f7f7 fd58 	bl	80001e0 <memchr>
 8008730:	2800      	cmp	r0, #0
 8008732:	d03f      	beq.n	80087b4 <_vfiprintf_r+0x22c>
 8008734:	4b29      	ldr	r3, [pc, #164]	; (80087dc <_vfiprintf_r+0x254>)
 8008736:	bb1b      	cbnz	r3, 8008780 <_vfiprintf_r+0x1f8>
 8008738:	9b03      	ldr	r3, [sp, #12]
 800873a:	3307      	adds	r3, #7
 800873c:	f023 0307 	bic.w	r3, r3, #7
 8008740:	3308      	adds	r3, #8
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008746:	443b      	add	r3, r7
 8008748:	9309      	str	r3, [sp, #36]	; 0x24
 800874a:	e767      	b.n	800861c <_vfiprintf_r+0x94>
 800874c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008750:	460c      	mov	r4, r1
 8008752:	2001      	movs	r0, #1
 8008754:	e7a5      	b.n	80086a2 <_vfiprintf_r+0x11a>
 8008756:	2300      	movs	r3, #0
 8008758:	3401      	adds	r4, #1
 800875a:	9305      	str	r3, [sp, #20]
 800875c:	4619      	mov	r1, r3
 800875e:	f04f 0c0a 	mov.w	ip, #10
 8008762:	4620      	mov	r0, r4
 8008764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008768:	3a30      	subs	r2, #48	; 0x30
 800876a:	2a09      	cmp	r2, #9
 800876c:	d903      	bls.n	8008776 <_vfiprintf_r+0x1ee>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0c5      	beq.n	80086fe <_vfiprintf_r+0x176>
 8008772:	9105      	str	r1, [sp, #20]
 8008774:	e7c3      	b.n	80086fe <_vfiprintf_r+0x176>
 8008776:	fb0c 2101 	mla	r1, ip, r1, r2
 800877a:	4604      	mov	r4, r0
 800877c:	2301      	movs	r3, #1
 800877e:	e7f0      	b.n	8008762 <_vfiprintf_r+0x1da>
 8008780:	ab03      	add	r3, sp, #12
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	462a      	mov	r2, r5
 8008786:	4b16      	ldr	r3, [pc, #88]	; (80087e0 <_vfiprintf_r+0x258>)
 8008788:	a904      	add	r1, sp, #16
 800878a:	4630      	mov	r0, r6
 800878c:	f7fd fdba 	bl	8006304 <_printf_float>
 8008790:	4607      	mov	r7, r0
 8008792:	1c78      	adds	r0, r7, #1
 8008794:	d1d6      	bne.n	8008744 <_vfiprintf_r+0x1bc>
 8008796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008798:	07d9      	lsls	r1, r3, #31
 800879a:	d405      	bmi.n	80087a8 <_vfiprintf_r+0x220>
 800879c:	89ab      	ldrh	r3, [r5, #12]
 800879e:	059a      	lsls	r2, r3, #22
 80087a0:	d402      	bmi.n	80087a8 <_vfiprintf_r+0x220>
 80087a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a4:	f000 faaf 	bl	8008d06 <__retarget_lock_release_recursive>
 80087a8:	89ab      	ldrh	r3, [r5, #12]
 80087aa:	065b      	lsls	r3, r3, #25
 80087ac:	f53f af12 	bmi.w	80085d4 <_vfiprintf_r+0x4c>
 80087b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b2:	e711      	b.n	80085d8 <_vfiprintf_r+0x50>
 80087b4:	ab03      	add	r3, sp, #12
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	462a      	mov	r2, r5
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <_vfiprintf_r+0x258>)
 80087bc:	a904      	add	r1, sp, #16
 80087be:	4630      	mov	r0, r6
 80087c0:	f7fe f844 	bl	800684c <_printf_i>
 80087c4:	e7e4      	b.n	8008790 <_vfiprintf_r+0x208>
 80087c6:	bf00      	nop
 80087c8:	0800a064 	.word	0x0800a064
 80087cc:	0800a084 	.word	0x0800a084
 80087d0:	0800a044 	.word	0x0800a044
 80087d4:	08009eec 	.word	0x08009eec
 80087d8:	08009ef6 	.word	0x08009ef6
 80087dc:	08006305 	.word	0x08006305
 80087e0:	08008565 	.word	0x08008565
 80087e4:	08009ef2 	.word	0x08009ef2

080087e8 <__swbuf_r>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	460e      	mov	r6, r1
 80087ec:	4614      	mov	r4, r2
 80087ee:	4605      	mov	r5, r0
 80087f0:	b118      	cbz	r0, 80087fa <__swbuf_r+0x12>
 80087f2:	6983      	ldr	r3, [r0, #24]
 80087f4:	b90b      	cbnz	r3, 80087fa <__swbuf_r+0x12>
 80087f6:	f000 f9e7 	bl	8008bc8 <__sinit>
 80087fa:	4b21      	ldr	r3, [pc, #132]	; (8008880 <__swbuf_r+0x98>)
 80087fc:	429c      	cmp	r4, r3
 80087fe:	d12b      	bne.n	8008858 <__swbuf_r+0x70>
 8008800:	686c      	ldr	r4, [r5, #4]
 8008802:	69a3      	ldr	r3, [r4, #24]
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	071a      	lsls	r2, r3, #28
 800880a:	d52f      	bpl.n	800886c <__swbuf_r+0x84>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	b36b      	cbz	r3, 800886c <__swbuf_r+0x84>
 8008810:	6923      	ldr	r3, [r4, #16]
 8008812:	6820      	ldr	r0, [r4, #0]
 8008814:	1ac0      	subs	r0, r0, r3
 8008816:	6963      	ldr	r3, [r4, #20]
 8008818:	b2f6      	uxtb	r6, r6
 800881a:	4283      	cmp	r3, r0
 800881c:	4637      	mov	r7, r6
 800881e:	dc04      	bgt.n	800882a <__swbuf_r+0x42>
 8008820:	4621      	mov	r1, r4
 8008822:	4628      	mov	r0, r5
 8008824:	f000 f93c 	bl	8008aa0 <_fflush_r>
 8008828:	bb30      	cbnz	r0, 8008878 <__swbuf_r+0x90>
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	3b01      	subs	r3, #1
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	6022      	str	r2, [r4, #0]
 8008836:	701e      	strb	r6, [r3, #0]
 8008838:	6963      	ldr	r3, [r4, #20]
 800883a:	3001      	adds	r0, #1
 800883c:	4283      	cmp	r3, r0
 800883e:	d004      	beq.n	800884a <__swbuf_r+0x62>
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	07db      	lsls	r3, r3, #31
 8008844:	d506      	bpl.n	8008854 <__swbuf_r+0x6c>
 8008846:	2e0a      	cmp	r6, #10
 8008848:	d104      	bne.n	8008854 <__swbuf_r+0x6c>
 800884a:	4621      	mov	r1, r4
 800884c:	4628      	mov	r0, r5
 800884e:	f000 f927 	bl	8008aa0 <_fflush_r>
 8008852:	b988      	cbnz	r0, 8008878 <__swbuf_r+0x90>
 8008854:	4638      	mov	r0, r7
 8008856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008858:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <__swbuf_r+0x9c>)
 800885a:	429c      	cmp	r4, r3
 800885c:	d101      	bne.n	8008862 <__swbuf_r+0x7a>
 800885e:	68ac      	ldr	r4, [r5, #8]
 8008860:	e7cf      	b.n	8008802 <__swbuf_r+0x1a>
 8008862:	4b09      	ldr	r3, [pc, #36]	; (8008888 <__swbuf_r+0xa0>)
 8008864:	429c      	cmp	r4, r3
 8008866:	bf08      	it	eq
 8008868:	68ec      	ldreq	r4, [r5, #12]
 800886a:	e7ca      	b.n	8008802 <__swbuf_r+0x1a>
 800886c:	4621      	mov	r1, r4
 800886e:	4628      	mov	r0, r5
 8008870:	f000 f81a 	bl	80088a8 <__swsetup_r>
 8008874:	2800      	cmp	r0, #0
 8008876:	d0cb      	beq.n	8008810 <__swbuf_r+0x28>
 8008878:	f04f 37ff 	mov.w	r7, #4294967295
 800887c:	e7ea      	b.n	8008854 <__swbuf_r+0x6c>
 800887e:	bf00      	nop
 8008880:	0800a064 	.word	0x0800a064
 8008884:	0800a084 	.word	0x0800a084
 8008888:	0800a044 	.word	0x0800a044

0800888c <__ascii_wctomb>:
 800888c:	b149      	cbz	r1, 80088a2 <__ascii_wctomb+0x16>
 800888e:	2aff      	cmp	r2, #255	; 0xff
 8008890:	bf85      	ittet	hi
 8008892:	238a      	movhi	r3, #138	; 0x8a
 8008894:	6003      	strhi	r3, [r0, #0]
 8008896:	700a      	strbls	r2, [r1, #0]
 8008898:	f04f 30ff 	movhi.w	r0, #4294967295
 800889c:	bf98      	it	ls
 800889e:	2001      	movls	r0, #1
 80088a0:	4770      	bx	lr
 80088a2:	4608      	mov	r0, r1
 80088a4:	4770      	bx	lr
	...

080088a8 <__swsetup_r>:
 80088a8:	4b32      	ldr	r3, [pc, #200]	; (8008974 <__swsetup_r+0xcc>)
 80088aa:	b570      	push	{r4, r5, r6, lr}
 80088ac:	681d      	ldr	r5, [r3, #0]
 80088ae:	4606      	mov	r6, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	b125      	cbz	r5, 80088be <__swsetup_r+0x16>
 80088b4:	69ab      	ldr	r3, [r5, #24]
 80088b6:	b913      	cbnz	r3, 80088be <__swsetup_r+0x16>
 80088b8:	4628      	mov	r0, r5
 80088ba:	f000 f985 	bl	8008bc8 <__sinit>
 80088be:	4b2e      	ldr	r3, [pc, #184]	; (8008978 <__swsetup_r+0xd0>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	d10f      	bne.n	80088e4 <__swsetup_r+0x3c>
 80088c4:	686c      	ldr	r4, [r5, #4]
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088cc:	0719      	lsls	r1, r3, #28
 80088ce:	d42c      	bmi.n	800892a <__swsetup_r+0x82>
 80088d0:	06dd      	lsls	r5, r3, #27
 80088d2:	d411      	bmi.n	80088f8 <__swsetup_r+0x50>
 80088d4:	2309      	movs	r3, #9
 80088d6:	6033      	str	r3, [r6, #0]
 80088d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088dc:	81a3      	strh	r3, [r4, #12]
 80088de:	f04f 30ff 	mov.w	r0, #4294967295
 80088e2:	e03e      	b.n	8008962 <__swsetup_r+0xba>
 80088e4:	4b25      	ldr	r3, [pc, #148]	; (800897c <__swsetup_r+0xd4>)
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d101      	bne.n	80088ee <__swsetup_r+0x46>
 80088ea:	68ac      	ldr	r4, [r5, #8]
 80088ec:	e7eb      	b.n	80088c6 <__swsetup_r+0x1e>
 80088ee:	4b24      	ldr	r3, [pc, #144]	; (8008980 <__swsetup_r+0xd8>)
 80088f0:	429c      	cmp	r4, r3
 80088f2:	bf08      	it	eq
 80088f4:	68ec      	ldreq	r4, [r5, #12]
 80088f6:	e7e6      	b.n	80088c6 <__swsetup_r+0x1e>
 80088f8:	0758      	lsls	r0, r3, #29
 80088fa:	d512      	bpl.n	8008922 <__swsetup_r+0x7a>
 80088fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088fe:	b141      	cbz	r1, 8008912 <__swsetup_r+0x6a>
 8008900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008904:	4299      	cmp	r1, r3
 8008906:	d002      	beq.n	800890e <__swsetup_r+0x66>
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff fb31 	bl	8007f70 <_free_r>
 800890e:	2300      	movs	r3, #0
 8008910:	6363      	str	r3, [r4, #52]	; 0x34
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	2300      	movs	r3, #0
 800891c:	6063      	str	r3, [r4, #4]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f043 0308 	orr.w	r3, r3, #8
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	b94b      	cbnz	r3, 8008942 <__swsetup_r+0x9a>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008938:	d003      	beq.n	8008942 <__swsetup_r+0x9a>
 800893a:	4621      	mov	r1, r4
 800893c:	4630      	mov	r0, r6
 800893e:	f000 fa09 	bl	8008d54 <__smakebuf_r>
 8008942:	89a0      	ldrh	r0, [r4, #12]
 8008944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008948:	f010 0301 	ands.w	r3, r0, #1
 800894c:	d00a      	beq.n	8008964 <__swsetup_r+0xbc>
 800894e:	2300      	movs	r3, #0
 8008950:	60a3      	str	r3, [r4, #8]
 8008952:	6963      	ldr	r3, [r4, #20]
 8008954:	425b      	negs	r3, r3
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	6923      	ldr	r3, [r4, #16]
 800895a:	b943      	cbnz	r3, 800896e <__swsetup_r+0xc6>
 800895c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008960:	d1ba      	bne.n	80088d8 <__swsetup_r+0x30>
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	0781      	lsls	r1, r0, #30
 8008966:	bf58      	it	pl
 8008968:	6963      	ldrpl	r3, [r4, #20]
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	e7f4      	b.n	8008958 <__swsetup_r+0xb0>
 800896e:	2000      	movs	r0, #0
 8008970:	e7f7      	b.n	8008962 <__swsetup_r+0xba>
 8008972:	bf00      	nop
 8008974:	20000010 	.word	0x20000010
 8008978:	0800a064 	.word	0x0800a064
 800897c:	0800a084 	.word	0x0800a084
 8008980:	0800a044 	.word	0x0800a044

08008984 <abort>:
 8008984:	b508      	push	{r3, lr}
 8008986:	2006      	movs	r0, #6
 8008988:	f000 fa54 	bl	8008e34 <raise>
 800898c:	2001      	movs	r0, #1
 800898e:	f7fa fa83 	bl	8002e98 <_exit>
	...

08008994 <__sflush_r>:
 8008994:	898a      	ldrh	r2, [r1, #12]
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	4605      	mov	r5, r0
 800899c:	0710      	lsls	r0, r2, #28
 800899e:	460c      	mov	r4, r1
 80089a0:	d458      	bmi.n	8008a54 <__sflush_r+0xc0>
 80089a2:	684b      	ldr	r3, [r1, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dc05      	bgt.n	80089b4 <__sflush_r+0x20>
 80089a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	dc02      	bgt.n	80089b4 <__sflush_r+0x20>
 80089ae:	2000      	movs	r0, #0
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089b6:	2e00      	cmp	r6, #0
 80089b8:	d0f9      	beq.n	80089ae <__sflush_r+0x1a>
 80089ba:	2300      	movs	r3, #0
 80089bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089c0:	682f      	ldr	r7, [r5, #0]
 80089c2:	602b      	str	r3, [r5, #0]
 80089c4:	d032      	beq.n	8008a2c <__sflush_r+0x98>
 80089c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	075a      	lsls	r2, r3, #29
 80089cc:	d505      	bpl.n	80089da <__sflush_r+0x46>
 80089ce:	6863      	ldr	r3, [r4, #4]
 80089d0:	1ac0      	subs	r0, r0, r3
 80089d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089d4:	b10b      	cbz	r3, 80089da <__sflush_r+0x46>
 80089d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089d8:	1ac0      	subs	r0, r0, r3
 80089da:	2300      	movs	r3, #0
 80089dc:	4602      	mov	r2, r0
 80089de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089e0:	6a21      	ldr	r1, [r4, #32]
 80089e2:	4628      	mov	r0, r5
 80089e4:	47b0      	blx	r6
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	89a3      	ldrh	r3, [r4, #12]
 80089ea:	d106      	bne.n	80089fa <__sflush_r+0x66>
 80089ec:	6829      	ldr	r1, [r5, #0]
 80089ee:	291d      	cmp	r1, #29
 80089f0:	d82c      	bhi.n	8008a4c <__sflush_r+0xb8>
 80089f2:	4a2a      	ldr	r2, [pc, #168]	; (8008a9c <__sflush_r+0x108>)
 80089f4:	40ca      	lsrs	r2, r1
 80089f6:	07d6      	lsls	r6, r2, #31
 80089f8:	d528      	bpl.n	8008a4c <__sflush_r+0xb8>
 80089fa:	2200      	movs	r2, #0
 80089fc:	6062      	str	r2, [r4, #4]
 80089fe:	04d9      	lsls	r1, r3, #19
 8008a00:	6922      	ldr	r2, [r4, #16]
 8008a02:	6022      	str	r2, [r4, #0]
 8008a04:	d504      	bpl.n	8008a10 <__sflush_r+0x7c>
 8008a06:	1c42      	adds	r2, r0, #1
 8008a08:	d101      	bne.n	8008a0e <__sflush_r+0x7a>
 8008a0a:	682b      	ldr	r3, [r5, #0]
 8008a0c:	b903      	cbnz	r3, 8008a10 <__sflush_r+0x7c>
 8008a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8008a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a12:	602f      	str	r7, [r5, #0]
 8008a14:	2900      	cmp	r1, #0
 8008a16:	d0ca      	beq.n	80089ae <__sflush_r+0x1a>
 8008a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a1c:	4299      	cmp	r1, r3
 8008a1e:	d002      	beq.n	8008a26 <__sflush_r+0x92>
 8008a20:	4628      	mov	r0, r5
 8008a22:	f7ff faa5 	bl	8007f70 <_free_r>
 8008a26:	2000      	movs	r0, #0
 8008a28:	6360      	str	r0, [r4, #52]	; 0x34
 8008a2a:	e7c1      	b.n	80089b0 <__sflush_r+0x1c>
 8008a2c:	6a21      	ldr	r1, [r4, #32]
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b0      	blx	r6
 8008a34:	1c41      	adds	r1, r0, #1
 8008a36:	d1c7      	bne.n	80089c8 <__sflush_r+0x34>
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0c4      	beq.n	80089c8 <__sflush_r+0x34>
 8008a3e:	2b1d      	cmp	r3, #29
 8008a40:	d001      	beq.n	8008a46 <__sflush_r+0xb2>
 8008a42:	2b16      	cmp	r3, #22
 8008a44:	d101      	bne.n	8008a4a <__sflush_r+0xb6>
 8008a46:	602f      	str	r7, [r5, #0]
 8008a48:	e7b1      	b.n	80089ae <__sflush_r+0x1a>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	81a3      	strh	r3, [r4, #12]
 8008a52:	e7ad      	b.n	80089b0 <__sflush_r+0x1c>
 8008a54:	690f      	ldr	r7, [r1, #16]
 8008a56:	2f00      	cmp	r7, #0
 8008a58:	d0a9      	beq.n	80089ae <__sflush_r+0x1a>
 8008a5a:	0793      	lsls	r3, r2, #30
 8008a5c:	680e      	ldr	r6, [r1, #0]
 8008a5e:	bf08      	it	eq
 8008a60:	694b      	ldreq	r3, [r1, #20]
 8008a62:	600f      	str	r7, [r1, #0]
 8008a64:	bf18      	it	ne
 8008a66:	2300      	movne	r3, #0
 8008a68:	eba6 0807 	sub.w	r8, r6, r7
 8008a6c:	608b      	str	r3, [r1, #8]
 8008a6e:	f1b8 0f00 	cmp.w	r8, #0
 8008a72:	dd9c      	ble.n	80089ae <__sflush_r+0x1a>
 8008a74:	6a21      	ldr	r1, [r4, #32]
 8008a76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a78:	4643      	mov	r3, r8
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b0      	blx	r6
 8008a80:	2800      	cmp	r0, #0
 8008a82:	dc06      	bgt.n	8008a92 <__sflush_r+0xfe>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	e78e      	b.n	80089b0 <__sflush_r+0x1c>
 8008a92:	4407      	add	r7, r0
 8008a94:	eba8 0800 	sub.w	r8, r8, r0
 8008a98:	e7e9      	b.n	8008a6e <__sflush_r+0xda>
 8008a9a:	bf00      	nop
 8008a9c:	20400001 	.word	0x20400001

08008aa0 <_fflush_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	690b      	ldr	r3, [r1, #16]
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	b913      	cbnz	r3, 8008ab0 <_fflush_r+0x10>
 8008aaa:	2500      	movs	r5, #0
 8008aac:	4628      	mov	r0, r5
 8008aae:	bd38      	pop	{r3, r4, r5, pc}
 8008ab0:	b118      	cbz	r0, 8008aba <_fflush_r+0x1a>
 8008ab2:	6983      	ldr	r3, [r0, #24]
 8008ab4:	b90b      	cbnz	r3, 8008aba <_fflush_r+0x1a>
 8008ab6:	f000 f887 	bl	8008bc8 <__sinit>
 8008aba:	4b14      	ldr	r3, [pc, #80]	; (8008b0c <_fflush_r+0x6c>)
 8008abc:	429c      	cmp	r4, r3
 8008abe:	d11b      	bne.n	8008af8 <_fflush_r+0x58>
 8008ac0:	686c      	ldr	r4, [r5, #4]
 8008ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0ef      	beq.n	8008aaa <_fflush_r+0xa>
 8008aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008acc:	07d0      	lsls	r0, r2, #31
 8008ace:	d404      	bmi.n	8008ada <_fflush_r+0x3a>
 8008ad0:	0599      	lsls	r1, r3, #22
 8008ad2:	d402      	bmi.n	8008ada <_fflush_r+0x3a>
 8008ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad6:	f000 f915 	bl	8008d04 <__retarget_lock_acquire_recursive>
 8008ada:	4628      	mov	r0, r5
 8008adc:	4621      	mov	r1, r4
 8008ade:	f7ff ff59 	bl	8008994 <__sflush_r>
 8008ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae4:	07da      	lsls	r2, r3, #31
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	d4e0      	bmi.n	8008aac <_fflush_r+0xc>
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	059b      	lsls	r3, r3, #22
 8008aee:	d4dd      	bmi.n	8008aac <_fflush_r+0xc>
 8008af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008af2:	f000 f908 	bl	8008d06 <__retarget_lock_release_recursive>
 8008af6:	e7d9      	b.n	8008aac <_fflush_r+0xc>
 8008af8:	4b05      	ldr	r3, [pc, #20]	; (8008b10 <_fflush_r+0x70>)
 8008afa:	429c      	cmp	r4, r3
 8008afc:	d101      	bne.n	8008b02 <_fflush_r+0x62>
 8008afe:	68ac      	ldr	r4, [r5, #8]
 8008b00:	e7df      	b.n	8008ac2 <_fflush_r+0x22>
 8008b02:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <_fflush_r+0x74>)
 8008b04:	429c      	cmp	r4, r3
 8008b06:	bf08      	it	eq
 8008b08:	68ec      	ldreq	r4, [r5, #12]
 8008b0a:	e7da      	b.n	8008ac2 <_fflush_r+0x22>
 8008b0c:	0800a064 	.word	0x0800a064
 8008b10:	0800a084 	.word	0x0800a084
 8008b14:	0800a044 	.word	0x0800a044

08008b18 <std>:
 8008b18:	2300      	movs	r3, #0
 8008b1a:	b510      	push	{r4, lr}
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b26:	6083      	str	r3, [r0, #8]
 8008b28:	8181      	strh	r1, [r0, #12]
 8008b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8008b2c:	81c2      	strh	r2, [r0, #14]
 8008b2e:	6183      	str	r3, [r0, #24]
 8008b30:	4619      	mov	r1, r3
 8008b32:	2208      	movs	r2, #8
 8008b34:	305c      	adds	r0, #92	; 0x5c
 8008b36:	f7fd fb3d 	bl	80061b4 <memset>
 8008b3a:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <std+0x38>)
 8008b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8008b3e:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <std+0x3c>)
 8008b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <std+0x40>)
 8008b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <std+0x44>)
 8008b48:	6224      	str	r4, [r4, #32]
 8008b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8008b4c:	bd10      	pop	{r4, pc}
 8008b4e:	bf00      	nop
 8008b50:	08008e6d 	.word	0x08008e6d
 8008b54:	08008e8f 	.word	0x08008e8f
 8008b58:	08008ec7 	.word	0x08008ec7
 8008b5c:	08008eeb 	.word	0x08008eeb

08008b60 <_cleanup_r>:
 8008b60:	4901      	ldr	r1, [pc, #4]	; (8008b68 <_cleanup_r+0x8>)
 8008b62:	f000 b8af 	b.w	8008cc4 <_fwalk_reent>
 8008b66:	bf00      	nop
 8008b68:	08008aa1 	.word	0x08008aa1

08008b6c <__sfmoreglue>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	2268      	movs	r2, #104	; 0x68
 8008b70:	1e4d      	subs	r5, r1, #1
 8008b72:	4355      	muls	r5, r2
 8008b74:	460e      	mov	r6, r1
 8008b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b7a:	f7ff fa65 	bl	8008048 <_malloc_r>
 8008b7e:	4604      	mov	r4, r0
 8008b80:	b140      	cbz	r0, 8008b94 <__sfmoreglue+0x28>
 8008b82:	2100      	movs	r1, #0
 8008b84:	e9c0 1600 	strd	r1, r6, [r0]
 8008b88:	300c      	adds	r0, #12
 8008b8a:	60a0      	str	r0, [r4, #8]
 8008b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b90:	f7fd fb10 	bl	80061b4 <memset>
 8008b94:	4620      	mov	r0, r4
 8008b96:	bd70      	pop	{r4, r5, r6, pc}

08008b98 <__sfp_lock_acquire>:
 8008b98:	4801      	ldr	r0, [pc, #4]	; (8008ba0 <__sfp_lock_acquire+0x8>)
 8008b9a:	f000 b8b3 	b.w	8008d04 <__retarget_lock_acquire_recursive>
 8008b9e:	bf00      	nop
 8008ba0:	200003a9 	.word	0x200003a9

08008ba4 <__sfp_lock_release>:
 8008ba4:	4801      	ldr	r0, [pc, #4]	; (8008bac <__sfp_lock_release+0x8>)
 8008ba6:	f000 b8ae 	b.w	8008d06 <__retarget_lock_release_recursive>
 8008baa:	bf00      	nop
 8008bac:	200003a9 	.word	0x200003a9

08008bb0 <__sinit_lock_acquire>:
 8008bb0:	4801      	ldr	r0, [pc, #4]	; (8008bb8 <__sinit_lock_acquire+0x8>)
 8008bb2:	f000 b8a7 	b.w	8008d04 <__retarget_lock_acquire_recursive>
 8008bb6:	bf00      	nop
 8008bb8:	200003aa 	.word	0x200003aa

08008bbc <__sinit_lock_release>:
 8008bbc:	4801      	ldr	r0, [pc, #4]	; (8008bc4 <__sinit_lock_release+0x8>)
 8008bbe:	f000 b8a2 	b.w	8008d06 <__retarget_lock_release_recursive>
 8008bc2:	bf00      	nop
 8008bc4:	200003aa 	.word	0x200003aa

08008bc8 <__sinit>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	4604      	mov	r4, r0
 8008bcc:	f7ff fff0 	bl	8008bb0 <__sinit_lock_acquire>
 8008bd0:	69a3      	ldr	r3, [r4, #24]
 8008bd2:	b11b      	cbz	r3, 8008bdc <__sinit+0x14>
 8008bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd8:	f7ff bff0 	b.w	8008bbc <__sinit_lock_release>
 8008bdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008be0:	6523      	str	r3, [r4, #80]	; 0x50
 8008be2:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <__sinit+0x68>)
 8008be4:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <__sinit+0x6c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008bea:	42a3      	cmp	r3, r4
 8008bec:	bf04      	itt	eq
 8008bee:	2301      	moveq	r3, #1
 8008bf0:	61a3      	streq	r3, [r4, #24]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f820 	bl	8008c38 <__sfp>
 8008bf8:	6060      	str	r0, [r4, #4]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f81c 	bl	8008c38 <__sfp>
 8008c00:	60a0      	str	r0, [r4, #8]
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f818 	bl	8008c38 <__sfp>
 8008c08:	2200      	movs	r2, #0
 8008c0a:	60e0      	str	r0, [r4, #12]
 8008c0c:	2104      	movs	r1, #4
 8008c0e:	6860      	ldr	r0, [r4, #4]
 8008c10:	f7ff ff82 	bl	8008b18 <std>
 8008c14:	68a0      	ldr	r0, [r4, #8]
 8008c16:	2201      	movs	r2, #1
 8008c18:	2109      	movs	r1, #9
 8008c1a:	f7ff ff7d 	bl	8008b18 <std>
 8008c1e:	68e0      	ldr	r0, [r4, #12]
 8008c20:	2202      	movs	r2, #2
 8008c22:	2112      	movs	r1, #18
 8008c24:	f7ff ff78 	bl	8008b18 <std>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	61a3      	str	r3, [r4, #24]
 8008c2c:	e7d2      	b.n	8008bd4 <__sinit+0xc>
 8008c2e:	bf00      	nop
 8008c30:	08009cc8 	.word	0x08009cc8
 8008c34:	08008b61 	.word	0x08008b61

08008c38 <__sfp>:
 8008c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	f7ff ffac 	bl	8008b98 <__sfp_lock_acquire>
 8008c40:	4b1e      	ldr	r3, [pc, #120]	; (8008cbc <__sfp+0x84>)
 8008c42:	681e      	ldr	r6, [r3, #0]
 8008c44:	69b3      	ldr	r3, [r6, #24]
 8008c46:	b913      	cbnz	r3, 8008c4e <__sfp+0x16>
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffbd 	bl	8008bc8 <__sinit>
 8008c4e:	3648      	adds	r6, #72	; 0x48
 8008c50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	d503      	bpl.n	8008c60 <__sfp+0x28>
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	b30b      	cbz	r3, 8008ca0 <__sfp+0x68>
 8008c5c:	6836      	ldr	r6, [r6, #0]
 8008c5e:	e7f7      	b.n	8008c50 <__sfp+0x18>
 8008c60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008c64:	b9d5      	cbnz	r5, 8008c9c <__sfp+0x64>
 8008c66:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <__sfp+0x88>)
 8008c68:	60e3      	str	r3, [r4, #12]
 8008c6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c6e:	6665      	str	r5, [r4, #100]	; 0x64
 8008c70:	f000 f847 	bl	8008d02 <__retarget_lock_init_recursive>
 8008c74:	f7ff ff96 	bl	8008ba4 <__sfp_lock_release>
 8008c78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008c7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008c80:	6025      	str	r5, [r4, #0]
 8008c82:	61a5      	str	r5, [r4, #24]
 8008c84:	2208      	movs	r2, #8
 8008c86:	4629      	mov	r1, r5
 8008c88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c8c:	f7fd fa92 	bl	80061b4 <memset>
 8008c90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c9c:	3468      	adds	r4, #104	; 0x68
 8008c9e:	e7d9      	b.n	8008c54 <__sfp+0x1c>
 8008ca0:	2104      	movs	r1, #4
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff ff62 	bl	8008b6c <__sfmoreglue>
 8008ca8:	4604      	mov	r4, r0
 8008caa:	6030      	str	r0, [r6, #0]
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d1d5      	bne.n	8008c5c <__sfp+0x24>
 8008cb0:	f7ff ff78 	bl	8008ba4 <__sfp_lock_release>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	e7ee      	b.n	8008c98 <__sfp+0x60>
 8008cba:	bf00      	nop
 8008cbc:	08009cc8 	.word	0x08009cc8
 8008cc0:	ffff0001 	.word	0xffff0001

08008cc4 <_fwalk_reent>:
 8008cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc8:	4606      	mov	r6, r0
 8008cca:	4688      	mov	r8, r1
 8008ccc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008cd0:	2700      	movs	r7, #0
 8008cd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cd6:	f1b9 0901 	subs.w	r9, r9, #1
 8008cda:	d505      	bpl.n	8008ce8 <_fwalk_reent+0x24>
 8008cdc:	6824      	ldr	r4, [r4, #0]
 8008cde:	2c00      	cmp	r4, #0
 8008ce0:	d1f7      	bne.n	8008cd2 <_fwalk_reent+0xe>
 8008ce2:	4638      	mov	r0, r7
 8008ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce8:	89ab      	ldrh	r3, [r5, #12]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d907      	bls.n	8008cfe <_fwalk_reent+0x3a>
 8008cee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	d003      	beq.n	8008cfe <_fwalk_reent+0x3a>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	47c0      	blx	r8
 8008cfc:	4307      	orrs	r7, r0
 8008cfe:	3568      	adds	r5, #104	; 0x68
 8008d00:	e7e9      	b.n	8008cd6 <_fwalk_reent+0x12>

08008d02 <__retarget_lock_init_recursive>:
 8008d02:	4770      	bx	lr

08008d04 <__retarget_lock_acquire_recursive>:
 8008d04:	4770      	bx	lr

08008d06 <__retarget_lock_release_recursive>:
 8008d06:	4770      	bx	lr

08008d08 <__swhatbuf_r>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	460e      	mov	r6, r1
 8008d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	b096      	sub	sp, #88	; 0x58
 8008d14:	4614      	mov	r4, r2
 8008d16:	461d      	mov	r5, r3
 8008d18:	da08      	bge.n	8008d2c <__swhatbuf_r+0x24>
 8008d1a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	061a      	lsls	r2, r3, #24
 8008d24:	d410      	bmi.n	8008d48 <__swhatbuf_r+0x40>
 8008d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d2a:	e00e      	b.n	8008d4a <__swhatbuf_r+0x42>
 8008d2c:	466a      	mov	r2, sp
 8008d2e:	f000 f903 	bl	8008f38 <_fstat_r>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	dbf1      	blt.n	8008d1a <__swhatbuf_r+0x12>
 8008d36:	9a01      	ldr	r2, [sp, #4]
 8008d38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d40:	425a      	negs	r2, r3
 8008d42:	415a      	adcs	r2, r3
 8008d44:	602a      	str	r2, [r5, #0]
 8008d46:	e7ee      	b.n	8008d26 <__swhatbuf_r+0x1e>
 8008d48:	2340      	movs	r3, #64	; 0x40
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	b016      	add	sp, #88	; 0x58
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
	...

08008d54 <__smakebuf_r>:
 8008d54:	898b      	ldrh	r3, [r1, #12]
 8008d56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d58:	079d      	lsls	r5, r3, #30
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	d507      	bpl.n	8008d70 <__smakebuf_r+0x1c>
 8008d60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d64:	6023      	str	r3, [r4, #0]
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	2301      	movs	r3, #1
 8008d6a:	6163      	str	r3, [r4, #20]
 8008d6c:	b002      	add	sp, #8
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	ab01      	add	r3, sp, #4
 8008d72:	466a      	mov	r2, sp
 8008d74:	f7ff ffc8 	bl	8008d08 <__swhatbuf_r>
 8008d78:	9900      	ldr	r1, [sp, #0]
 8008d7a:	4605      	mov	r5, r0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7ff f963 	bl	8008048 <_malloc_r>
 8008d82:	b948      	cbnz	r0, 8008d98 <__smakebuf_r+0x44>
 8008d84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d88:	059a      	lsls	r2, r3, #22
 8008d8a:	d4ef      	bmi.n	8008d6c <__smakebuf_r+0x18>
 8008d8c:	f023 0303 	bic.w	r3, r3, #3
 8008d90:	f043 0302 	orr.w	r3, r3, #2
 8008d94:	81a3      	strh	r3, [r4, #12]
 8008d96:	e7e3      	b.n	8008d60 <__smakebuf_r+0xc>
 8008d98:	4b0d      	ldr	r3, [pc, #52]	; (8008dd0 <__smakebuf_r+0x7c>)
 8008d9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	6020      	str	r0, [r4, #0]
 8008da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da4:	81a3      	strh	r3, [r4, #12]
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	6163      	str	r3, [r4, #20]
 8008daa:	9b01      	ldr	r3, [sp, #4]
 8008dac:	6120      	str	r0, [r4, #16]
 8008dae:	b15b      	cbz	r3, 8008dc8 <__smakebuf_r+0x74>
 8008db0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008db4:	4630      	mov	r0, r6
 8008db6:	f000 f8d1 	bl	8008f5c <_isatty_r>
 8008dba:	b128      	cbz	r0, 8008dc8 <__smakebuf_r+0x74>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	89a0      	ldrh	r0, [r4, #12]
 8008dca:	4305      	orrs	r5, r0
 8008dcc:	81a5      	strh	r5, [r4, #12]
 8008dce:	e7cd      	b.n	8008d6c <__smakebuf_r+0x18>
 8008dd0:	08008b61 	.word	0x08008b61

08008dd4 <_malloc_usable_size_r>:
 8008dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dd8:	1f18      	subs	r0, r3, #4
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bfbc      	itt	lt
 8008dde:	580b      	ldrlt	r3, [r1, r0]
 8008de0:	18c0      	addlt	r0, r0, r3
 8008de2:	4770      	bx	lr

08008de4 <_raise_r>:
 8008de4:	291f      	cmp	r1, #31
 8008de6:	b538      	push	{r3, r4, r5, lr}
 8008de8:	4604      	mov	r4, r0
 8008dea:	460d      	mov	r5, r1
 8008dec:	d904      	bls.n	8008df8 <_raise_r+0x14>
 8008dee:	2316      	movs	r3, #22
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	f04f 30ff 	mov.w	r0, #4294967295
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008dfa:	b112      	cbz	r2, 8008e02 <_raise_r+0x1e>
 8008dfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e00:	b94b      	cbnz	r3, 8008e16 <_raise_r+0x32>
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f830 	bl	8008e68 <_getpid_r>
 8008e08:	462a      	mov	r2, r5
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e12:	f000 b817 	b.w	8008e44 <_kill_r>
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d00a      	beq.n	8008e30 <_raise_r+0x4c>
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	d103      	bne.n	8008e26 <_raise_r+0x42>
 8008e1e:	2316      	movs	r3, #22
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	2001      	movs	r0, #1
 8008e24:	e7e7      	b.n	8008df6 <_raise_r+0x12>
 8008e26:	2400      	movs	r4, #0
 8008e28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	4798      	blx	r3
 8008e30:	2000      	movs	r0, #0
 8008e32:	e7e0      	b.n	8008df6 <_raise_r+0x12>

08008e34 <raise>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <raise+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f7ff bfd3 	b.w	8008de4 <_raise_r>
 8008e3e:	bf00      	nop
 8008e40:	20000010 	.word	0x20000010

08008e44 <_kill_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d07      	ldr	r5, [pc, #28]	; (8008e64 <_kill_r+0x20>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	4611      	mov	r1, r2
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	f7fa f811 	bl	8002e78 <_kill>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	d102      	bne.n	8008e60 <_kill_r+0x1c>
 8008e5a:	682b      	ldr	r3, [r5, #0]
 8008e5c:	b103      	cbz	r3, 8008e60 <_kill_r+0x1c>
 8008e5e:	6023      	str	r3, [r4, #0]
 8008e60:	bd38      	pop	{r3, r4, r5, pc}
 8008e62:	bf00      	nop
 8008e64:	200003a4 	.word	0x200003a4

08008e68 <_getpid_r>:
 8008e68:	f7f9 bffe 	b.w	8002e68 <_getpid>

08008e6c <__sread>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	460c      	mov	r4, r1
 8008e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e74:	f000 f894 	bl	8008fa0 <_read_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	bfab      	itete	ge
 8008e7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e80:	181b      	addge	r3, r3, r0
 8008e82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e86:	bfac      	ite	ge
 8008e88:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e8a:	81a3      	strhlt	r3, [r4, #12]
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <__swrite>:
 8008e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	461f      	mov	r7, r3
 8008e94:	898b      	ldrh	r3, [r1, #12]
 8008e96:	05db      	lsls	r3, r3, #23
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	4616      	mov	r6, r2
 8008e9e:	d505      	bpl.n	8008eac <__swrite+0x1e>
 8008ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f000 f868 	bl	8008f7c <_lseek_r>
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	4632      	mov	r2, r6
 8008eba:	463b      	mov	r3, r7
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	f000 b817 	b.w	8008ef4 <_write_r>

08008ec6 <__sseek>:
 8008ec6:	b510      	push	{r4, lr}
 8008ec8:	460c      	mov	r4, r1
 8008eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ece:	f000 f855 	bl	8008f7c <_lseek_r>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	bf15      	itete	ne
 8008ed8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ee2:	81a3      	strheq	r3, [r4, #12]
 8008ee4:	bf18      	it	ne
 8008ee6:	81a3      	strhne	r3, [r4, #12]
 8008ee8:	bd10      	pop	{r4, pc}

08008eea <__sclose>:
 8008eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008eee:	f000 b813 	b.w	8008f18 <_close_r>
	...

08008ef4 <_write_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d07      	ldr	r5, [pc, #28]	; (8008f14 <_write_r+0x20>)
 8008ef8:	4604      	mov	r4, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	4611      	mov	r1, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f9 ffef 	bl	8002ee6 <_write>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_write_r+0x1e>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_write_r+0x1e>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	200003a4 	.word	0x200003a4

08008f18 <_close_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_close_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f9 fffb 	bl	8002f1e <_close>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_close_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_close_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	200003a4 	.word	0x200003a4

08008f38 <_fstat_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	4d07      	ldr	r5, [pc, #28]	; (8008f58 <_fstat_r+0x20>)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4608      	mov	r0, r1
 8008f42:	4611      	mov	r1, r2
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	f7f9 fff6 	bl	8002f36 <_fstat>
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	d102      	bne.n	8008f54 <_fstat_r+0x1c>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b103      	cbz	r3, 8008f54 <_fstat_r+0x1c>
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	bd38      	pop	{r3, r4, r5, pc}
 8008f56:	bf00      	nop
 8008f58:	200003a4 	.word	0x200003a4

08008f5c <_isatty_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d06      	ldr	r5, [pc, #24]	; (8008f78 <_isatty_r+0x1c>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	602b      	str	r3, [r5, #0]
 8008f68:	f7f9 fff5 	bl	8002f56 <_isatty>
 8008f6c:	1c43      	adds	r3, r0, #1
 8008f6e:	d102      	bne.n	8008f76 <_isatty_r+0x1a>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	b103      	cbz	r3, 8008f76 <_isatty_r+0x1a>
 8008f74:	6023      	str	r3, [r4, #0]
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
 8008f78:	200003a4 	.word	0x200003a4

08008f7c <_lseek_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4d07      	ldr	r5, [pc, #28]	; (8008f9c <_lseek_r+0x20>)
 8008f80:	4604      	mov	r4, r0
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	602a      	str	r2, [r5, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f7f9 ffee 	bl	8002f6c <_lseek>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_lseek_r+0x1e>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_lseek_r+0x1e>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	200003a4 	.word	0x200003a4

08008fa0 <_read_r>:
 8008fa0:	b538      	push	{r3, r4, r5, lr}
 8008fa2:	4d07      	ldr	r5, [pc, #28]	; (8008fc0 <_read_r+0x20>)
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	602a      	str	r2, [r5, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f7f9 ff7c 	bl	8002eac <_read>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	d102      	bne.n	8008fbe <_read_r+0x1e>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	b103      	cbz	r3, 8008fbe <_read_r+0x1e>
 8008fbc:	6023      	str	r3, [r4, #0]
 8008fbe:	bd38      	pop	{r3, r4, r5, pc}
 8008fc0:	200003a4 	.word	0x200003a4
 8008fc4:	00000000 	.word	0x00000000

08008fc8 <ceil>:
 8008fc8:	ec51 0b10 	vmov	r0, r1, d0
 8008fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008fd4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008fd8:	2e13      	cmp	r6, #19
 8008fda:	ee10 5a10 	vmov	r5, s0
 8008fde:	ee10 8a10 	vmov	r8, s0
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	dc30      	bgt.n	8009048 <ceil+0x80>
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	da12      	bge.n	8009010 <ceil+0x48>
 8008fea:	a335      	add	r3, pc, #212	; (adr r3, 80090c0 <ceil+0xf8>)
 8008fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff0:	f7f7 f94c 	bl	800028c <__adddf3>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	f7f7 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8008ffc:	b128      	cbz	r0, 800900a <ceil+0x42>
 8008ffe:	2c00      	cmp	r4, #0
 8009000:	db55      	blt.n	80090ae <ceil+0xe6>
 8009002:	432c      	orrs	r4, r5
 8009004:	d057      	beq.n	80090b6 <ceil+0xee>
 8009006:	4c30      	ldr	r4, [pc, #192]	; (80090c8 <ceil+0x100>)
 8009008:	2500      	movs	r5, #0
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	e025      	b.n	800905c <ceil+0x94>
 8009010:	4f2e      	ldr	r7, [pc, #184]	; (80090cc <ceil+0x104>)
 8009012:	4137      	asrs	r7, r6
 8009014:	ea01 0307 	and.w	r3, r1, r7
 8009018:	4303      	orrs	r3, r0
 800901a:	d01f      	beq.n	800905c <ceil+0x94>
 800901c:	a328      	add	r3, pc, #160	; (adr r3, 80090c0 <ceil+0xf8>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 f933 	bl	800028c <__adddf3>
 8009026:	2200      	movs	r2, #0
 8009028:	2300      	movs	r3, #0
 800902a:	f7f7 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800902e:	2800      	cmp	r0, #0
 8009030:	d0eb      	beq.n	800900a <ceil+0x42>
 8009032:	2c00      	cmp	r4, #0
 8009034:	bfc2      	ittt	gt
 8009036:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800903a:	fa43 f606 	asrgt.w	r6, r3, r6
 800903e:	19a4      	addgt	r4, r4, r6
 8009040:	ea24 0407 	bic.w	r4, r4, r7
 8009044:	2500      	movs	r5, #0
 8009046:	e7e0      	b.n	800900a <ceil+0x42>
 8009048:	2e33      	cmp	r6, #51	; 0x33
 800904a:	dd0b      	ble.n	8009064 <ceil+0x9c>
 800904c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009050:	d104      	bne.n	800905c <ceil+0x94>
 8009052:	ee10 2a10 	vmov	r2, s0
 8009056:	460b      	mov	r3, r1
 8009058:	f7f7 f918 	bl	800028c <__adddf3>
 800905c:	ec41 0b10 	vmov	d0, r0, r1
 8009060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009064:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009068:	f04f 33ff 	mov.w	r3, #4294967295
 800906c:	fa23 f707 	lsr.w	r7, r3, r7
 8009070:	4207      	tst	r7, r0
 8009072:	d0f3      	beq.n	800905c <ceil+0x94>
 8009074:	a312      	add	r3, pc, #72	; (adr r3, 80090c0 <ceil+0xf8>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 f907 	bl	800028c <__adddf3>
 800907e:	2200      	movs	r2, #0
 8009080:	2300      	movs	r3, #0
 8009082:	f7f7 fd49 	bl	8000b18 <__aeabi_dcmpgt>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0bf      	beq.n	800900a <ceil+0x42>
 800908a:	2c00      	cmp	r4, #0
 800908c:	dd02      	ble.n	8009094 <ceil+0xcc>
 800908e:	2e14      	cmp	r6, #20
 8009090:	d103      	bne.n	800909a <ceil+0xd2>
 8009092:	3401      	adds	r4, #1
 8009094:	ea25 0507 	bic.w	r5, r5, r7
 8009098:	e7b7      	b.n	800900a <ceil+0x42>
 800909a:	2301      	movs	r3, #1
 800909c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80090a0:	fa03 f606 	lsl.w	r6, r3, r6
 80090a4:	4435      	add	r5, r6
 80090a6:	4545      	cmp	r5, r8
 80090a8:	bf38      	it	cc
 80090aa:	18e4      	addcc	r4, r4, r3
 80090ac:	e7f2      	b.n	8009094 <ceil+0xcc>
 80090ae:	2500      	movs	r5, #0
 80090b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80090b4:	e7a9      	b.n	800900a <ceil+0x42>
 80090b6:	4625      	mov	r5, r4
 80090b8:	e7a7      	b.n	800900a <ceil+0x42>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	8800759c 	.word	0x8800759c
 80090c4:	7e37e43c 	.word	0x7e37e43c
 80090c8:	3ff00000 	.word	0x3ff00000
 80090cc:	000fffff 	.word	0x000fffff

080090d0 <_init>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr

080090dc <_fini>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr
